{"ast":null,"code":"'use strict';\n\nconst BaseError = require('./base-error');\n/**\n * A wrapper for multiple Errors\n *\n * @param {Error[]} [errors] Array of errors\n *\n * @property errors {Error[]}\n */\n\n\nclass AggregateError extends BaseError {\n  constructor(errors) {\n    super();\n    this.errors = errors;\n    this.name = 'AggregateError';\n  }\n\n  toString() {\n    const message = `AggregateError of:\\n${this.errors.map(error => error === this ? '[Circular AggregateError]' : error instanceof AggregateError ? String(error).replace(/\\n$/, '').replace(/^/mg, '  ') : String(error).replace(/^/mg, '    ').substring(2)).join('\\n')}\\n`;\n    return message;\n  }\n\n}\n\nmodule.exports = AggregateError;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/errors/aggregate-error.js"],"names":["BaseError","require","AggregateError","constructor","errors","name","toString","message","map","error","String","replace","substring","join","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;AAEA;;;;;;;;;AAOA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;AACA,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAY,gBAAZ;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,OAAO,GAAI,uBACf,KAAKH,MAAL,CAAYI,GAAZ,CAAgBC,KAAK,IACnBA,KAAK,KAAK,IAAV,GACI,2BADJ,GAEIA,KAAK,YAAYP,cAAjB,GACEQ,MAAM,CAACD,KAAD,CAAN,CAAcE,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,EAAiCA,OAAjC,CAAyC,KAAzC,EAAgD,IAAhD,CADF,GAEED,MAAM,CAACD,KAAD,CAAN,CAAcE,OAAd,CAAsB,KAAtB,EAA6B,MAA7B,EAAqCC,SAArC,CAA+C,CAA/C,CALR,EAOEC,IAPF,CAOO,IAPP,CAQD,IATD;AAUA,WAAON,OAAP;AACD;;AAnBoC;;AAsBvCO,MAAM,CAACC,OAAP,GAAiBb,cAAjB","sourcesContent":["'use strict';\n\nconst BaseError = require('./base-error');\n\n/**\n * A wrapper for multiple Errors\n *\n * @param {Error[]} [errors] Array of errors\n *\n * @property errors {Error[]}\n */\nclass AggregateError extends BaseError {\n  constructor(errors) {\n    super();\n    this.errors = errors;\n    this.name = 'AggregateError';\n  }\n\n  toString() {\n    const message = `AggregateError of:\\n${\n      this.errors.map(error =>\n        error === this\n          ? '[Circular AggregateError]'\n          : error instanceof AggregateError\n            ? String(error).replace(/\\n$/, '').replace(/^/mg, '  ')\n            : String(error).replace(/^/mg, '    ').substring(2)\n        \n      ).join('\\n')\n    }\\n`;\n    return message;\n  }\n}\n\nmodule.exports = AggregateError;\n"]},"metadata":{},"sourceType":"script"}