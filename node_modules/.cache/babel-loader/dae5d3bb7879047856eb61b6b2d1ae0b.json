{"ast":null,"code":"'use strict';\n\nconst Utils = require('./../utils');\n\nconst Helpers = require('./helpers');\n\nconst _ = require('lodash');\n\nconst Association = require('./base');\n\nconst BelongsTo = require('./belongs-to');\n\nconst HasMany = require('./has-many');\n\nconst HasOne = require('./has-one');\n\nconst AssociationError = require('../errors').AssociationError;\n\nconst EmptyResultError = require('../errors').EmptyResultError;\n\nconst Op = require('../operators');\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * const project = await Project.create({ id: 11 });\n * await user.addProjects([project, 12]);\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * const projects = await user.getProjects();\n * const p1 = projects[0];\n * p1.UserProjects.started // Is this project started yet?\n * })\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\n\n\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = { ...this.options.through\n    };\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(this.source.tableName, this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName);\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n    /*\n    * Find paired association (if exists)\n    */\n\n\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n    /*\n    * Default/generated source/target keys\n    */\n\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [],\n          //we don't want indexes here (as referenced in #2416)\n          paranoid: this.through.paranoid ? this.through.paranoid : false,\n          // Default to non-paranoid join (referenced in #11991)\n          validate: {} // Don't propagate model-level validations\n\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, ['timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid']));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n\n        this._createForeignAndOtherKeys();\n      }\n\n      if (this.paired.targetKeyDefault) {\n        // in this case paired.otherKey depends on paired.targetKey,\n        // so cleanup previously wrong generated otherKey\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n\n          this.paired._createForeignAndOtherKeys();\n\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up\n        // before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n    this.associationAccessor = this.as; // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize([this.source.options.name.singular, this.sourceKey].join('_'));\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize([this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular, this.targetKey].join('_'));\n    }\n  } // the id is in the target table\n  // or in an extra table which connects two tables\n\n\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey; // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if (attributeName === this.foreignKey || attributeName === this.otherKey) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        } else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = {\n      type: sourceKeyType,\n      ...this.foreignKeyAttribute\n    };\n    const targetAttribute = {\n      type: targetKeyType,\n      ...this.otherKeyAttribute\n    };\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n\n      if (typeof this.options.uniqueKey === 'string' && this.options.uniqueKey !== '') {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      }\n\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      }; // For the source attribute the passed option is the priority\n\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      }; // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n    this.through.model.refreshAttributes();\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @see\n   * {@link Model} for a full explanation of options\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   * @param {object} [options.through.where] An optional where clause applied to through model (join table)\n   * @param {boolean} [options.through.paranoid=true] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n\n\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = { ...this.scope\n      };\n    }\n\n    options.where = {\n      [Op.and]: [scopeWhere, options.where]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      } //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n\n\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, 'paranoid', true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n\n\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n    options = Utils.cloneDeep(options);\n    options.attributes = [[sequelize.fn('COUNT', sequelize.col([this.target.name, this.targetKeyField].join('.'))), 'count']];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model} sourceInstance source instance to check for an association with\n   * @param {Model|Model[]|string[]|string|number[]|number} [instances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = {\n      raw: true,\n      ...options,\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    };\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.targetKey]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [{\n        [Op.or]: instancePrimaryKeys\n      }, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return _.differenceWith(instancePrimaryKeys, associatedObjects, (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n  /**\n   * Set the associated models by passing an array of instances or their primary keys.\n   * Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newAssociatedObjects] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {object} [options.validate] Run validation for the join model\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n\n\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      ...this.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n      const unassociatedObjects = newAssociatedObjects.filter(obj => !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey)));\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name]; // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = { ...defaultAttributes,\n            ...throughAttributes\n          };\n\n          if (Object.keys(attributes).length) {\n            promises.push(this.through.model.update(attributes, Object.assign(options, {\n              where: {\n                [identifier]: sourceInstance.get(sourceKey),\n                [foreignIdentifier]: newObj.get(targetKey)\n              }\n            })));\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(this.through.model.destroy({ ...options,\n          where: {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]),\n            ...this.through.scope\n          }\n        }));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return { ...defaultAttributes,\n            ...unassociatedObject[this.through.model.name],\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey),\n            ...this.through.scope\n          };\n        });\n        promises.push(this.through.model.bulkCreate(bulk, {\n          validate: true,\n          ...options\n        }));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll({ ...options,\n        where,\n        raw: true\n      });\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n  /**\n   * Associate one or several rows with source instance. It will not un-associate any already associated instance\n   * that may be missing from `newInstances`.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {object} [options.validate] Run validation for the join model.\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n\n\n  async add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Promise.resolve();\n    options = { ...options\n    };\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n    newInstances = association.toInstanceArray(newInstances);\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey)),\n      ...association.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = { ...defaultAttributes,\n            ...throughAttributes\n          };\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = { ...defaultAttributes,\n            ...throughAttributes\n          };\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n          Object.assign(attributes, association.through.scope);\n          return attributes;\n        });\n        promises.push(association.through.model.bulkCreate(bulk, {\n          validate: true,\n          ...options\n        }));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = { ...defaultAttributes,\n          ...throughAttributes\n        }; // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, {\n          where: {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: assoc.get(targetKey)\n          }\n        })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll({ ...options,\n        where,\n        raw: true\n      });\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [oldAssociatedObjects] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `through.destroy`\n   *\n   * @returns {Promise}\n   */\n\n\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n    options = options || {};\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n    return association.through.model.destroy({ ...options,\n      where\n    });\n  }\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model\n   * @param {object} [options] Options passed to create and add\n   * @param {object} [options.through] Additional attributes for the join table\n   *\n   * @returns {Promise}\n   */\n\n\n  async create(sourceInstance, values, options) {\n    const association = this;\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    } // Create the related model instance\n\n\n    const newAssociatedObject = await association.target.create(values, options);\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields']));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/associations/belongs-to-many.js"],"names":["Utils","require","Helpers","_","Association","BelongsTo","HasMany","HasOne","AssociationError","EmptyResultError","Op","BelongsToMany","constructor","source","target","options","through","undefined","name","model","associationType","targetAssociation","sequelize","isMultiAssociation","doubleLinked","as","isSelfAssociation","isAliased","isPlainObject","plural","singular","singularize","combinedTableName","combineTableNames","tableName","each","associations","association","paired","sourceKey","primaryKeyAttribute","sourceKeyField","rawAttributes","field","targetKey","targetKeyField","targetKeyDefault","_createForeignAndOtherKeys","isDefined","define","Object","assign","indexes","paranoid","validate","pick","needInjectPaired","otherKey","otherKeyDefault","foreignKey","_injectAttributes","throughModel","combinedName","associationAccessor","upperFirst","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","isObject","foreignKeyAttribute","fieldName","camelize","join","otherKeyAttribute","identifier","foreignIdentifier","attribute","attributeName","primaryKey","_autoGenerated","primaryKeyDeleted","sourceKeyType","type","targetKeyType","sourceAttribute","targetAttribute","unique","uniqueKey","constraints","references","getTableName","key","onDelete","onUpdate","refreshAttributes","identifierField","foreignIdentifierField","toSource","manyFromSource","oneFromSource","toTarget","manyFromTarget","oneFromTarget","checkNamingCollision","mixin","obj","methods","aliases","mixinMethods","instance","cloneDeep","scopeWhere","throughWhere","scope","where","and","include","push","attributes","joinTableAttributes","required","prototype","hasOwnProperty","call","unscoped","schema","schemaDelimiter","findAll","fn","col","raw","plain","result","parseInt","has","sourceInstance","instances","Array","isArray","instancePrimaryKeys","map","or","associatedObjects","differenceWith","a","b","isEqual","length","newAssociatedObjects","toInstanceArray","updateAssociations","currentRows","obsoleteAssociations","promises","defaultAttributes","unassociatedObjects","filter","some","currentRow","newObj","find","throughAttributes","keys","update","destroy","obsoleteAssociation","bulk","unassociatedObject","bulkCreate","Promise","all","error","newInstances","resolve","newInstance","changedAssociations","existingAssociation","current","assoc","oldAssociatedObjects","values","fields","concat","newAssociatedObject","omit","verifyAssociationAlias","alias","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst BelongsTo = require('./belongs-to');\nconst HasMany = require('./has-many');\nconst HasOne = require('./has-one');\nconst AssociationError = require('../errors').AssociationError;\nconst EmptyResultError = require('../errors').EmptyResultError;\nconst Op = require('../operators');\n\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * const project = await Project.create({ id: 11 });\n * await user.addProjects([project, 12]);\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * const projects = await user.getProjects();\n * const p1 = projects[0];\n * p1.UserProjects.started // Is this project started yet?\n * })\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = { ...this.options.through };\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(\n      this.source.tableName,\n      this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName\n    );\n\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    /*\n    * Find paired association (if exists)\n    */\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    /*\n    * Default/generated source/target keys\n    */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [], //we don't want indexes here (as referenced in #2416)\n          paranoid: this.through.paranoid ? this.through.paranoid : false, // Default to non-paranoid join (referenced in #11991)\n          validate: {} // Don't propagate model-level validations\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\n      'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'\n    ]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n        this._createForeignAndOtherKeys();\n      }\n      if (this.paired.targetKeyDefault) {\n        // in this case paired.otherKey depends on paired.targetKey,\n        // so cleanup previously wrong generated otherKey\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n          this.paired._createForeignAndOtherKeys();\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up\n        // before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.sourceKey\n        ].join('_')\n      );\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize(\n        [\n          this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular,\n          this.targetKey\n        ].join('_')\n      );\n    }\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if (attributeName === this.foreignKey || attributeName === this.otherKey) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        }\n        else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = { type: sourceKeyType, ...this.foreignKeyAttribute };\n    const targetAttribute = { type: targetKeyType, ...this.otherKeyAttribute };\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n      if (typeof this.options.uniqueKey === 'string' && this.options.uniqueKey !== '') {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      }\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      // For the source attribute the passed option is the priority\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n\n    this.through.model.refreshAttributes();\n\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @see\n   * {@link Model} for a full explanation of options\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   * @param {object} [options.through.where] An optional where clause applied to through model (join table)\n   * @param {boolean} [options.through.paranoid=true] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = { ...this.scope };\n    }\n\n    options.where = {\n      [Op.and]: [\n        scopeWhere,\n        options.where\n      ]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, 'paranoid', true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col([this.target.name, this.targetKeyField].join('.'))), 'count']\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model} sourceInstance source instance to check for an association with\n   * @param {Model|Model[]|string[]|string|number[]|number} [instances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise<boolean>}\n   */\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = {\n      raw: true,\n      ...options,\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    };\n\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.targetKey]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        { [Op.or]: instancePrimaryKeys },\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return _.differenceWith(instancePrimaryKeys, associatedObjects,\n      (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  /**\n   * Set the associated models by passing an array of instances or their primary keys.\n   * Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newAssociatedObjects] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {object} [options.validate] Run validation for the join model\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      ...this.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n\n      const unassociatedObjects = newAssociatedObjects.filter(obj =>\n        !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey))\n      );\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).length) {\n            promises.push(\n              this.through.model.update(attributes, Object.assign(options, {\n                where: {\n                  [identifier]: sourceInstance.get(sourceKey),\n                  [foreignIdentifier]: newObj.get(targetKey)\n                }\n              }\n              ))\n            );\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(\n          this.through.model.destroy({\n            ...options,\n            where: {\n              [identifier]: sourceInstance.get(sourceKey),\n              [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]),\n              ...this.through.scope\n            }\n          })\n        );\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return {\n            ...defaultAttributes,\n            ...unassociatedObject[this.through.model.name],\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey),\n            ...this.through.scope\n          };\n        });\n\n        promises.push(this.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll({ ...options, where, raw: true });\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  /**\n   * Associate one or several rows with source instance. It will not un-associate any already associated instance\n   * that may be missing from `newInstances`.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {object} [options.validate] Run validation for the join model.\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Promise.resolve();\n\n    options = { ...options };\n\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey)),\n      ...association.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          Object.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = { ...defaultAttributes, ...throughAttributes };\n        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, { where: {\n          [identifier]: sourceInstance.get(sourceKey),\n          [foreignIdentifier]: assoc.get(targetKey)\n        } })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll({ ...options, where, raw: true });\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [oldAssociatedObjects] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `through.destroy`\n   *\n   * @returns {Promise}\n   */\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n\n    options = options || {};\n\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n\n    return association.through.model.destroy({ ...options, where });\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model\n   * @param {object} [options] Options passed to create and add\n   * @param {object} [options.through] Additional attributes for the join table\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    // Create the related model instance\n    const newAssociatedObject = await association.target.create(values, options);\n\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields']));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n"]},"metadata":{},"sourceType":"script"}