{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').postgres;\n\nconst {\n  PostgresQueryInterface\n} = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT VALUES': true,\n  'EXCEPTION': true,\n  'ON DUPLICATE KEY': false,\n  'ORDER NULLS': true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: 'FOR SHARE',\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\nPostgresDialect.prototype.defaultVersion = '9.5.0';\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/postgres/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","postgres","PostgresQueryInterface","PostgresDialect","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","prototype","supports","merge","cloneDeep","returnValues","returning","bulkDefault","schemas","lock","lockOf","lockKey","lockOuterJoinFailure","skipLocked","forShare","index","concurrently","using","where","functionBased","operator","inserts","onConflictDoNothing","updateOnDuplicate","NUMERIC","ARRAY","RANGE","GEOMETRY","REGEXP","GEOGRAPHY","JSON","JSONB","HSTORE","deferrableConstraints","searchPath","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT VALUES': true,\n  'EXCEPTION': true,\n  'ON DUPLICATE KEY': false,\n  'ORDER NULLS': true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: 'FOR SHARE',\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\n\nPostgresDialect.prototype.defaultVersion = '9.5.0';\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"]},"metadata":{},"sourceType":"script"}