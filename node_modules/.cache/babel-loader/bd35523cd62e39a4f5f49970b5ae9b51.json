{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst SqlString = require('../../sql-string');\n\nconst QueryTypes = require('../../query-types');\n\nconst Dot = require('dottie');\n\nconst deprecations = require('../../utils/deprecations');\n\nconst uuid = require('uuid').v4;\n\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n  }\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n\n\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n\n      return replVal;\n    });\n    return [sql, []];\n  }\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n\n\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n\n\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging(); // eslint-disable-next-line no-console\n\n      this.options.logging = console.log;\n    }\n  }\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n\n\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    } // is insert query if sql contains insert into\n\n\n    result = result && this.sql.toLowerCase().startsWith('insert into'); // is insert query if no results are passed or if the result has the inserted id\n\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField())); // is insert query if no metadata are passed or if the metadata has the inserted id\n\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null; // Map raw fields to names if a mapping is provided\n\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n\n        return result;\n      }, result));\n    } // Raw queries\n\n\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      }); // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      }); // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    } // return the first real model instance if options.plain is set (e.g. Model.find)\n\n\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n\n\n  _logQuery(sql, debugContext, parameters) {\n    const {\n      connection,\n      options\n    } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p => JSON.stringify(p)).join(', ');\n      } else {\n        paramStr = JSON.stringify(parameters);\n      }\n\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n\n\n  static _groupJoinData(rows, includeOptions, options) {\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    } // Generic looping\n\n\n    let i;\n    let length;\n    let $i;\n    let $length; // Row specific looping\n\n    let rowsI;\n    let row;\n    const rowsLength = rows.length; // Key specific looping\n\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting; // If we don't have to deduplicate we can pre-allocate the resulting array\n\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {}; // Result variables for the respective functions\n\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent; // Map each key to an include option\n\n    let previousPiece;\n\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n\n        includeMap[previousPiece] = $current;\n      }\n    }; // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n\n\n    const keyPrefixStringMemo = {};\n\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n\n      return memo[key];\n    }; // Removes the prefix from a key ('id' for 'User.Results.id')\n\n\n    const removeKeyPrefixMemo = {};\n\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n\n      return removeKeyPrefixMemo[key];\n    }; // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n\n\n    const keyPrefixMemo = {};\n\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n\n      return keyPrefixMemo[key];\n    }; // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n\n\n    const lastKeyPrefixMemo = {};\n\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n\n      return lastKeyPrefixMemo[key];\n    };\n\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n\n      uniqueKeyAttributes = uniqueKeyAttributes.result(`${uniqueKeyAttributes.findKey()}.fields`).map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes;\n    };\n\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI]; // Keys are the same for all rows, so only need to compute them on the first row\n\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false; // Compute top level hash key (this is usually just the primary key values)\n\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI]; // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key); // On the first row we compute the includeMap\n\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        } // End of key set\n\n\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            } // Reset values\n\n\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        } // End of iteration, set value and set prev values (for next iteration)\n\n\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/abstract/query.js"],"names":["_","require","SqlString","QueryTypes","Dot","deprecations","uuid","v4","AbstractQuery","constructor","connection","sequelize","options","instance","model","plain","raw","logging","console","log","checkLoggingOption","formatBindParameters","sql","values","dialect","replacementFunc","undefined","skipValueReplace","match","key","timeZone","escape","origReplacementFunc","list","Array","isArray","replace","skipUnescape","replVal","Error","run","noTrueLogging","getInsertIdField","getUniqueConstraintErrorMessage","field","message","Object","keys","uniqueKeys","fields","includes","msg","isRawQuery","type","RAW","isVersionQuery","VERSION","isUpsertQuery","UPSERT","isInsertQuery","results","metaData","result","INSERT","toLowerCase","startsWith","prototype","hasOwnProperty","call","handleInsertQuery","autoIncrementAttribute","id","isShowTablesQuery","SHOWTABLES","handleShowTablesQuery","flatten","map","resultSet","isShowIndexesQuery","SHOWINDEXES","isShowConstraintsQuery","SHOWCONSTRAINTS","isDescribeQuery","DESCRIBE","isSelectQuery","SELECT","isBulkUpdateQuery","BULKUPDATE","isBulkDeleteQuery","BULKDELETE","isForeignKeysQuery","FOREIGNKEYS","isUpdateQuery","UPDATE","handleSelectQuery","fieldMap","reduce","name","o","nest","transform","hasJoin","_groupJoinData","includeMap","includeNames","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","include","includeValidated","attributes","originalAttributes","length","isShowOrDescribeQuery","isCallQuery","_logQuery","debugContext","parameters","benchmark","logQueryParameters","startTime","Date","now","logParameter","delimiter","endsWith","paramStr","p","JSON","stringify","join","fmt","afterMsg","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix","getUniqueKeyAttributes","uniqueKeyAttributes","chain","findKey","chr","value","obj","Buffer","toString","primaryKeyAttributes","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>JSON.stringify(p)).join(', ');\n      } else {\n        paramStr = JSON.stringify(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]},"metadata":{},"sourceType":"script"}