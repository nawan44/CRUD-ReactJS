{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst DataTypes = require('../../data-types');\n\nconst TableHints = require('../../table-hints');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst randomBytes = require('crypto').randomBytes;\n\nconst semver = require('semver');\n\nconst Op = require('../../operators');\n/* istanbul ignore next */\n\n\nconst throwMethodUndefined = function (methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      collate: null,\n      ...options\n    };\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n    return ['IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')', 'BEGIN', 'CREATE DATABASE', this.quoteIdentifier(databaseName), `${collation};`, 'END;'].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return ['IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')', 'BEGIN', 'DROP DATABASE', this.quoteIdentifier(databaseName), ';', 'END;'].join(' ');\n  }\n\n  createSchema(schema) {\n    return ['IF NOT EXISTS (SELECT schema_name', 'FROM information_schema.schemata', 'WHERE schema_name =', wrapSingleQuote(schema), ')', 'BEGIN', \"EXEC sp_executesql N'CREATE SCHEMA\", this.quoteIdentifier(schema), \";'\", 'END;'].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return ['IF EXISTS (SELECT schema_name', 'FROM information_schema.schemata', 'WHERE schema_name =', quotedSchema, ')', 'BEGIN', 'DECLARE @id INT, @ms_sql NVARCHAR(2000);', 'DECLARE @cascade TABLE (', 'id INT NOT NULL IDENTITY PRIMARY KEY,', 'ms_sql NVARCHAR(2000) NOT NULL );', 'INSERT INTO @cascade ( ms_sql )', \"SELECT CASE WHEN o.type IN ('F','PK')\", \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\", \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\", 'FROM sys.objects o', 'JOIN sys.schemas s on o.schema_id = s.schema_id', 'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id', \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema, 'ORDER BY o.type ASC;', 'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;', 'WHILE @id IS NOT NULL', 'BEGIN', 'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY', 'BEGIN CATCH BREAK; THROW; END CATCH;', 'DELETE FROM @cascade WHERE id = @id;', 'SELECT @id = NULL, @ms_sql = NULL;', 'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;', 'END', \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\", 'END;'].join(' ');\n  }\n\n  showSchemasQuery() {\n    return ['SELECT \"name\" as \"schema_name\" FROM sys.schemas as s', 'WHERE \"s\".\"name\" NOT IN (', \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\", ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return ['DECLARE @ms_ver NVARCHAR(20);', \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\", \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n          foreignKeys = {},\n          attributesClauseParts = [];\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr); // remove comment related substring from dataType\n\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n\n          attributesClauseParts.push(`CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([`IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`, `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`, ';', commentStr]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = ['SELECT', \"c.COLUMN_NAME AS 'Name',\", \"c.DATA_TYPE AS 'Type',\", \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\", \"c.IS_NULLABLE as 'IsNull',\", \"COLUMN_DEFAULT AS 'Default',\", \"pk.CONSTRAINT_TYPE AS 'Constraint',\", \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\", \"CAST(prop.value AS NVARCHAR) AS 'Comment'\", 'FROM', 'INFORMATION_SCHEMA.TABLES t', 'INNER JOIN', 'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA', 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ', 'cu.column_name, tc.CONSTRAINT_TYPE ', 'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ', 'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ', 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ', 'and tc.constraint_name=cu.constraint_name ', 'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ', 'ON pk.table_schema=c.table_schema ', 'AND pk.table_name=c.table_name ', 'AND pk.column_name=c.column_name ', 'INNER JOIN sys.columns AS sc', \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\", 'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id', 'AND prop.minor_id = sc.column_id', \"AND prop.name = 'MS_Description'\", 'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([`IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`, 'DROP TABLE', quoteTbl, ';']);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key); // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n\n      delete dataType['comment'];\n    }\n\n    return Utils.joinSQLFragments(['ALTER TABLE', this.quoteTable(table), 'ADD', this.quoteIdentifier(key), this.attributeToSQL(dataType, {\n      context: 'addColumn'\n    }), ';', commentStr]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' + `@name = N'MS_Description', @value = ${this.escape(comment)}, ` + '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' + `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` + `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments(['ALTER TABLE', this.quoteTable(tableName), 'DROP COLUMN', this.quoteIdentifier(attributeName), ';']);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n          constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName); // remove comment related substring from dataType\n\n        definition = commentMatch[1];\n      }\n\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments(['ALTER TABLE', this.quoteTable(tableName), attrString.length && `ALTER COLUMN ${attrString.join(', ')}`, constraintString.length && `ADD ${constraintString.join(', ')}`, ';', commentString]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments(['EXEC sp_rename', `'${this.quoteTable(tableName)}.${attrBefore}',`, `'${newName}',`, \"'COLUMN'\", ';']);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n    let needIdentityInsertWrapper = false,\n        outputFragment = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      } // normal case\n\n\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) return;\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${allAttributes.map(key => this.escape(attrValueHash[key])).join(',')})`);\n      });\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false; //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    } //Add unique indexes defined by indexes option to uniqueAttrs\n\n\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n\n    let joinCondition; //IDENTITY_INSERT Condition\n\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    }); //Filter NULL Clauses\n\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n\n      for (const key in clause) {\n        if (typeof clause[key] === 'undefined' || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    });\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    } // Remove the IDENTITY_INSERT Column from update\n\n\n    const updateSnippet = updateKeys.filter(key => !identityAttrs.includes(key)).map(key => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    }).join(', ');\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n    return Utils.joinSQLFragments(['DELETE', options.limit && `TOP(${this.escape(options.limit)})`, 'FROM', table, whereClause && `WHERE ${whereClause}`, ';', 'SELECT @@ROWCOUNT AS AFFECTEDROWS', ';']);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    } // handle self referential constraints\n\n\n    if (attribute.references) {\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, ' + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values; // enums are a special case\n\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ')}))`;\n      return template;\n    }\n\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    } // Blobs/texts cannot have a defaultValue\n\n\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n          existingConstraints = [];\n    let key, attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString()); // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n\n          attribute.onUpdate = '';\n        }\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n\n\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' + 'constraint_name = OBJ.NAME, ' + 'constraintName = OBJ.NAME, '}${catalogName ? `constraintCatalog = '${catalogName}', ` : ''}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` + 'tableName = TB.NAME, ' + `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${catalogName ? `tableCatalog = '${catalogName}', ` : ''}columnName = COL.NAME, ` + `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${catalogName ? `referencedCatalog = '${catalogName}', ` : ''}referencedTableName = RTB.NAME, ` + 'referencedColumnName = RCOL.NAME ' + 'FROM sys.foreign_key_columns FKC ' + 'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' + 'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' + 'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' + 'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' + 'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n\n\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)} WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([this._getForeignKeysQueryPrefix(), 'WHERE', `TB.NAME =${wrapSingleQuote(tableName)}`, 'AND', `COL.NAME =${wrapSingleQuote(attributeName)}`, table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments(['SELECT K.TABLE_NAME AS tableName,', 'K.COLUMN_NAME AS columnName,', 'K.CONSTRAINT_NAME AS constraintName', 'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C', 'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K', 'ON C.TABLE_NAME = K.TABLE_NAME', 'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG', 'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA', 'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME', 'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'', `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`, `AND K.TABLE_NAME = ${tableName}`, ';']);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments(['ALTER TABLE', this.quoteTable(tableName), 'DROP', this.quoteIdentifier(foreignKey)]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments(['SELECT name FROM sys.default_constraints', `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`, `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`, `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`, ';']);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments(['ALTER TABLE', this.quoteTable(tableName), 'DROP CONSTRAINT', this.quoteIdentifier(constraintName), ';']);\n  }\n\n  setIsolationLevelQuery() {}\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, {\n      modelName: model && model.name,\n      as: mainTableAs\n    });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\n\n    if (isSQLServer2008 && options.offset) {\n      // For earlier versions of SQL server, we need to nest several queries\n      // in order to emulate the OFFSET behavior.\n      //\n      // 1. The outermost query selects all items from the inner query block.\n      //    This is due to a limitation in SQL server with the use of computed\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\n      //    the TOP N rows of the query where the row number is > OFFSET\n      // 3. The innermost query is the actual set we want information from\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = {\n        mainQueryOrder: []\n      };\n\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || 'OffsetTable';\n      return Utils.joinSQLFragments(['SELECT TOP 100 PERCENT', attributes.join(', '), 'FROM (', ['SELECT', options.limit && `TOP ${options.limit}`, '* FROM (', ['SELECT ROW_NUMBER() OVER (', ['ORDER BY', orders.mainQueryOrder.join(', ')], `) as row_num, * FROM ${tables} AS ${tmpTable}`, where && `WHERE ${where}`], `) AS ${tmpTable} WHERE row_num > ${offset}`], `) AS ${tmpTable}`]);\n    }\n\n    return Utils.joinSQLFragments(['SELECT', isSQLServer2008 && options.limit && `TOP ${options.limit}`, attributes.join(', '), `FROM ${tables}`, mainTableAs && `AS ${mainTableAs}`, options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`]);\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || !options.order.length || options.include && !orders.subQueryOrder.length) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = _.map(options.order, order => order[0]);\n\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n} // private methods\n\n\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mssql/query-generator.js"],"names":["_","require","Utils","DataTypes","TableHints","AbstractQueryGenerator","randomBytes","semver","Op","throwMethodUndefined","methodName","Error","MSSQLQueryGenerator","createDatabaseQuery","databaseName","options","collate","collation","escape","wrapSingleQuote","quoteIdentifier","join","dropDatabaseQuery","createSchema","schema","dropSchema","quotedSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","primaryKeys","foreignKeys","attributesClauseParts","commentStr","attr","Object","prototype","hasOwnProperty","call","dataType","match","includes","commentMatch","commentText","replace","trim","commentTemplate","push","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","quotedTableName","quoteTable","joinSQLFragments","describeTableQuery","sql","renameTableQuery","before","after","showTablesQuery","dropTableQuery","quoteTbl","addColumnQuery","table","key","comment","isString","attributeToSQL","context","column","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","commentString","quotedAttrName","definition","renameColumnQuery","attrBefore","newName","keys","bulkInsertQuery","attrValueHashes","quotedTable","tuples","allAttributes","allQueries","needIdentityInsertWrapper","outputFragment","returning","returnValues","generateReturnValues","emptyQuery","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","value","quotedAttributes","tupleStr","commands","offset","batch","Math","floor","max","slice","min","generatedQuery","v","updateQuery","where","limit","updateArgs","query","upsertQuery","insertValues","updateValues","model","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","rawAttributes","primaryKey","unique","index","_indexes","fieldName","name","attribute","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","or","filter","clause","valid","getJoinSnippet","array","updateSnippet","insertSnippet","truncateTableQuery","deleteQuery","whereClause","getWhereConditions","showIndexesQuery","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","underscore","quoteIdentifiers","isPlainObject","type","references","Model","sequelize","log","onDelete","onUpdate","template","ENUM","values","toSql","toString","allowNull","defaultValueSchemable","defaultValue","_binary","toUpperCase","attributesToSQL","result","existingConstraints","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","_getForeignKeysQueryPrefix","catalogName","getForeignKeysQuery","getForeignKeyQuery","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","foreignKey","getDefaultConstraintQuery","dropConstraintQuery","constraintName","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","_throwOnEmptyAttributes","modelName","as","dbVersion","databaseVersion","isSQLServer2008","lt","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","mainQueryOrder","order","getQueryOrders","primaryKeyField","tmpTable","tableHint","addLimitAndOffset","subQuery","undefined","fragment","include","subQueryOrder","tablePkFragment","tableAs","orderFieldNames","primaryKeyFieldAlreadyPresent","booleanValue","identifier","addTicks","removeTicks","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = { collate: null, ...options };\n\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n\n    return [\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\n      `${collation};`,\n      'END;'\n    ].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\n      'END;'\n    ].join(' ');\n  }\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = {},\n      attributesClauseParts = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          // remove comment related substring from dataType\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${\n            this.quoteIdentifier(indexName)\n          } UNIQUE (${\n            columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\n          })`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`,\n      ';',\n      commentStr\n    ]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"CAST(prop.value AS NVARCHAR) AS 'Comment'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'INNER JOIN sys.columns AS sc',\n      \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\",\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      \"AND prop.name = 'MS_Description'\",\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\n      'DROP TABLE',\n      quoteTbl,\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n      delete dataType['comment'];\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, { context: 'addColumn' }),\n      ';',\n      commentStr\n    ]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' +\n        `@name = N'MS_Description', @value = ${this.escape(comment)}, ` +\n        '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' +\n        `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` +\n        `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        // remove comment related substring from dataType\n        definition = commentMatch[1];\n      }\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `ALTER COLUMN ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n      commentString\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\n      'EXEC sp_rename',\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\n      `'${newName}',`,\n      \"'COLUMN'\",\n      ';'\n    ]);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',')\n        })`);\n      });\n\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (typeof clause[key] === 'undefined' || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const updateSnippet = updateKeys.filter(key => !identityAttrs.includes(key))\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n\n    return Utils.joinSQLFragments([\n      'DELETE',\n      options.limit && `TOP(${this.escape(options.limit)})`,\n      'FROM',\n      table,\n      whereClause && `WHERE ${whereClause}`,\n      ';',\n      'SELECT @@ROWCOUNT AS AFFECTEDROWS',\n      ';'\n    ]);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n      return template;\n    }\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, '}${\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` +\n        'tableName = TB.NAME, ' +\n        `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\n          catalogName ? `tableCatalog = '${catalogName}', ` : ''\n        }columnName = COL.NAME, ` +\n        `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\n          catalogName ? `referencedCatalog = '${catalogName}', ` : ''\n        }referencedTableName = RTB.NAME, ` +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM sys.foreign_key_columns FKC ' +\n        'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      this._getForeignKeysQueryPrefix(),\n      'WHERE',\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\n      'AND',\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`\n    ]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName}`,\n      ';'\n    ]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(foreignKey)\n    ]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      'SELECT name FROM sys.default_constraints',\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\n      ';'\n    ]);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      this.quoteIdentifier(constraintName),\n      ';'\n    ]);\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\n\n    if (isSQLServer2008 && options.offset) {\n      // For earlier versions of SQL server, we need to nest several queries\n      // in order to emulate the OFFSET behavior.\n      //\n      // 1. The outermost query selects all items from the inner query block.\n      //    This is due to a limitation in SQL server with the use of computed\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\n      //    the TOP N rows of the query where the row number is > OFFSET\n      // 3. The innermost query is the actual set we want information from\n\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = { mainQueryOrder: [] };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || 'OffsetTable';\n\n      return Utils.joinSQLFragments([\n        'SELECT TOP 100 PERCENT',\n        attributes.join(', '),\n        'FROM (',\n        [\n          'SELECT',\n          options.limit && `TOP ${options.limit}`,\n          '* FROM (',\n          [\n            'SELECT ROW_NUMBER() OVER (',\n            [\n              'ORDER BY',\n              orders.mainQueryOrder.join(', ')\n            ],\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\n            where && `WHERE ${where}`\n          ],\n          `) AS ${tmpTable} WHERE row_num > ${offset}`\n        ],\n        `) AS ${tmpTable}`\n      ]);\n    }\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\n      attributes.join(', '),\n      `FROM ${tables}`,\n      mainTableAs && `AS ${mainTableAs}`,\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`\n    ]);\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\n      : options.subQuery;\n\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || !options.order.length || options.include && !orders.subQueryOrder.length) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = _.map(options.order, order => order[0]);\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}