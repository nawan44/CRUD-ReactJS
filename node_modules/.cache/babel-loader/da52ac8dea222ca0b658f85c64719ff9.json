{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst _ = require('lodash');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = {\n      type: TYPES.VarChar,\n      typeOptions: {}\n    };\n    paramType.type = TYPES.NVarChar;\n\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric; //Default to a reasonable numeric precision/scale pending more sophisticated logic\n\n        paramType.typeOptions = {\n          precision: 30,\n          scale: getScale(value)\n        };\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const {\n      options\n    } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n      connection.execSql(request);\n    });\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n\n\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      const result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (result[_result.Name].type.includes('CHAR') && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n        field, value, this.instance, 'not_unique'));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields\n      });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mssql/query.js"],"names":["AbstractQuery","require","sequelizeErrors","parserStore","_","logger","debug","debugContext","getScale","aNum","Number","isFinite","e","Math","round","log10","Query","getInsertIdField","getSQLTypeFromJsType","value","TYPES","paramType","type","VarChar","typeOptions","NVarChar","isInteger","Int","BigInt","Numeric","precision","scale","Bit","Buffer","isBuffer","VarBinary","_run","connection","sql","parameters","options","complete","_logQuery","query","Promise","resolve","reject","startsWith","beginTransaction","error","transaction","name","lib","ISOLATION_LEVEL","isolationLevel","commitTransaction","rollbackTransaction","saveTransaction","rows","request","Request","err","rowCount","forOwn","key","addParameter","on","columns","push","execSql","formatError","Array","isArray","map","row","column","typeid","metadata","id","parse","get","colName","formatResults","run","queue","enqueue","formatBindParameters","values","dialect","bindParam","replacementFunc","match","undefined","data","isInsertQuery","handleInsertQuery","instance","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","result","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","comment","Comment","includes","Length","isSelectQuery","handleSelectQuery","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","returning","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","$action","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","results","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","message","length","fields","uniqueKey","model","uniqueKeys","msg","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","table","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","reduce","acc","item","index_name","index_keys","forEach","columnName","attribute","order","collate","primary","unique","index_description","metaData","autoIncrementAttribute","autoIncrementAttributeAlias","Object","prototype","hasOwnProperty","call","rawAttributes","dataValues","record","attr","find","fieldName","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n  \n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n  \n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n      \n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}