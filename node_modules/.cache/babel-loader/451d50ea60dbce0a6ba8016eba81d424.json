{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').mysql;\n\nconst {\n  MySQLQueryInterface\n} = require('./query-interface');\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: true,\n  JSON: true,\n  REGEXP: true\n});\nMysqlDialect.prototype.defaultVersion = '5.7.0';\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\nmodule.exports = MysqlDialect;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mysql/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","mysql","MySQLQueryInterface","MysqlDialect","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","prototype","supports","merge","cloneDeep","lock","forShare","settingIsolationLevelDuringTransaction","inserts","ignoreDuplicates","updateOnDuplicate","index","collate","length","parser","type","using","constraints","dropConstraint","check","indexViaAlter","indexHints","NUMERIC","GEOMETRY","JSON","REGEXP","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,KAA9C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BP,OAAO,CAAC,mBAAD,CAAvC;;AAEA,MAAMQ,YAAN,SAA2BP,eAA3B,CAA2C;AACzCQ,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAIT,iBAAJ,CAAsB,IAAtB,EAA4BQ,SAA5B,CAAzB;AACA,SAAKE,cAAL,GAAsB,IAAIR,cAAJ,CAAmB;AACvCS,MAAAA,QAAQ,EAAE,IAD6B;AAEvCH,MAAAA;AAFuC,KAAnB,CAAtB;AAIA,SAAKI,cAAL,GAAsB,IAAIP,mBAAJ,CAAwBG,SAAxB,EAAmC,KAAKE,cAAxC,CAAtB;AACD;;AAVwC;;AAa3CJ,YAAY,CAACO,SAAb,CAAuBC,QAAvB,GAAkCjB,CAAC,CAACkB,KAAF,CAAQlB,CAAC,CAACmB,SAAF,CAAYjB,eAAe,CAACc,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AACzF,eAAa,IAD4E;AAEzF,qBAAmB,IAFsE;AAGzFG,EAAAA,IAAI,EAAE,IAHmF;AAIzFC,EAAAA,QAAQ,EAAE,oBAJ+E;AAKzFC,EAAAA,sCAAsC,EAAE,KALiD;AAMzFC,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,EAAE,SADX;AAEPC,IAAAA,iBAAiB,EAAE;AAFZ,GANgF;AAUzFC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE,IAFH;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,IAAI,EAAE,IAJD;AAKLC,IAAAA,KAAK,EAAE;AALF,GAVkF;AAiBzFC,EAAAA,WAAW,EAAE;AACXC,IAAAA,cAAc,EAAE,KADL;AAEXC,IAAAA,KAAK,EAAE;AAFI,GAjB4E;AAqBzFC,EAAAA,aAAa,EAAE,IArB0E;AAsBzFC,EAAAA,UAAU,EAAE,IAtB6E;AAuBzFC,EAAAA,OAAO,EAAE,IAvBgF;AAwBzFC,EAAAA,QAAQ,EAAE,IAxB+E;AAyBzFC,EAAAA,IAAI,EAAE,IAzBmF;AA0BzFC,EAAAA,MAAM,EAAE;AA1BiF,CAAzD,CAAlC;AA6BA/B,YAAY,CAACO,SAAb,CAAuByB,cAAvB,GAAwC,OAAxC;AACAhC,YAAY,CAACO,SAAb,CAAuBZ,KAAvB,GAA+BA,KAA/B;AACAK,YAAY,CAACO,SAAb,CAAuBX,cAAvB,GAAwCA,cAAxC;AACAI,YAAY,CAACO,SAAb,CAAuBV,SAAvB,GAAmCA,SAAnC;AACAG,YAAY,CAACO,SAAb,CAAuB0B,IAAvB,GAA8B,OAA9B;AACAjC,YAAY,CAACO,SAAb,CAAuB2B,SAAvB,GAAmC,GAAnC;AACAlC,YAAY,CAACO,SAAb,CAAuB4B,cAAvB,GAAwCnC,YAAY,CAACO,SAAb,CAAuB2B,SAA/D;AACAlC,YAAY,CAACO,SAAb,CAAuB6B,eAAvB,GAAyCpC,YAAY,CAACO,SAAb,CAAuB2B,SAAhE;AAEAG,MAAM,CAACC,OAAP,GAAiBtC,YAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\nconst { MySQLQueryInterface } = require('./query-interface');\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: true,\n  JSON: true,\n  REGEXP: true\n});\n\nMysqlDialect.prototype.defaultVersion = '5.7.0';\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"]},"metadata":{},"sourceType":"script"}