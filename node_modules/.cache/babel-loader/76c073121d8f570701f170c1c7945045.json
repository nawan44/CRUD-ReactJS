{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst DataTypes = require('../../data-types');\n\nconst Transaction = require('../../transaction');\n\nconst QueryTypes = require('../../query-types');\n/**\n * The interface that Sequelize uses to talk to all databases\n */\n\n\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n\n\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n  /**\n   * Show all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n\n\n  async showAllSchemas(options) {\n    options = { ...options,\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    };\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n  /**\n   * Return database version\n   *\n   * @param {object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  async databaseVersion(options) {\n    return await this.sequelize.query(this.queryGenerator.versionQuery(), { ...options,\n      type: QueryTypes.VERSION\n    });\n  }\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n\n\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n    options = { ...options\n    };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(attributes, attribute => this.sequelize.normalizeAttribute(attribute)); // Postgres requires special SQL commands for ENUM/ENUM[]\n\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (!tableName.schema && (options.schema || !!model && model._schema)) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: 'createTable'\n    });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {object} options   Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = { ...options\n    };\n    options.cascade = options.cascade || options.force || false;\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, { ...options,\n          cascade: true\n        });\n      }\n    }\n  }\n  /**\n   * Drop all tables from database\n   *\n   * @param {object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n\n\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n\n    await this._dropAllTables(tableNames, skip, options);\n  }\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Get all tables in current database\n   *\n   * @param {object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n\n\n  async showAllTables(options) {\n    options = { ...options,\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    };\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<object>}\n   */\n\n\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options,\n      type: QueryTypes.DESCRIBE\n    };\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n\n\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = {\n        type: dataTypeOrOptions,\n        allowNull: true\n      };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n\n\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n\n\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n\n    if (description[columnName]) {\n      return description;\n    }\n\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n\n\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n    const _options = {};\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    }; // fix: a not-null column cannot have null as default value\n\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n\n\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, { ...options,\n      supportsSearchPath: false\n    });\n  }\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n\n\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, { ...options,\n      type: QueryTypes.SHOWINDEXES\n    });\n  }\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @param {string[]} tableNames table names\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = { ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const results = await Promise.all(tableNames.map(tableName => this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n    const result = {};\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i]) ? results[i].map(r => r.constraint_name) : [results[i] && results[i].constraint_name];\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n    return result;\n  }\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]  Query options\n   */\n\n\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = { ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                  Table name where you want to add a constraint\n   * @param {object} options                    An object to define the constraint name, type etc\n   * @param {string} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {Array}  options.fields             Array of column names to apply the constraint over\n   * @param {string} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]     The value for the default constraint\n   * @param {object} [options.where]            Where clause/expression for the CHECK constraint\n   * @param {object} [options.references]       Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table] Target table name\n   * @param {string} [options.references.field] Target column name\n   *\n   * @returns {Promise}\n   */\n\n\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, { ...options,\n      type: QueryTypes.SHOWCONSTRAINTS\n    });\n  }\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {object} options         Query options\n   */\n\n\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n    return results;\n  }\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options\n    };\n    const model = options.model;\n    const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n    const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length >= 1).map(c => c.fields);\n    const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length >= 1).map(c => c.fields);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = []; // For fields in updateValues, try to find a constraint or unique index\n    // that includes given field. Only first matching upsert key is used.\n\n    for (const field of options.updateOnDuplicate) {\n      const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n\n      if (uniqueKey) {\n        options.upsertKeys = uniqueKey;\n        break;\n      }\n\n      const indexKey = indexKeys.find(fields => fields.includes(field));\n\n      if (indexKey) {\n        options.upsertKeys = indexKey;\n        break;\n      }\n    } // Always use PK, if no constraint available OR update data contains PK\n\n\n    if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {\n      options.upsertKeys = primaryKeys;\n    }\n\n    options.upsertKeys = _.uniq(options.upsertKeys);\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n\n\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options\n    };\n    options.type = QueryTypes.INSERT;\n    const results = await this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier, options) {\n    options = { ...options\n    };\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n\n\n  async bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : {\n      tableName\n    };\n\n    const model = _.find(this.sequelize.modelManager.models, {\n      tableName: table.tableName\n    });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n    options = { ...options\n    }; // Check for a restrict field\n\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n\n        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === 'cascade' && association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options); // Check for hasOne relationship with non-existing associate (\"has zero\")\n\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n\n\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      limit: null\n    });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options);\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n    return await this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where, options, model), options);\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = { ...optionsArg,\n      type: QueryTypes.SELECT,\n      model\n    };\n    return await this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options);\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    const data = await this.sequelize.query(sql, options);\n\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      return parseInt(result, 10);\n    }\n\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n\n    return result;\n  }\n\n  async createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n\n\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n\n\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  } // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n\n\n  ensureEnums() {// noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options,\n      transaction: transaction.parent || transaction\n    };\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) return;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options,\n      transaction: transaction.parent || transaction\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = { ...options,\n      transaction: transaction.parent || transaction\n    };\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = { ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = 'commit';\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = { ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = 'rollback';\n    return await promise;\n  }\n\n}\n\nexports.QueryInterface = QueryInterface;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/abstract/query-interface.js"],"names":["_","require","Utils","DataTypes","Transaction","QueryTypes","QueryInterface","constructor","sequelize","queryGenerator","createDatabase","database","options","sql","createDatabaseQuery","query","dropDatabase","dropDatabaseQuery","createSchema","schema","dropSchema","dropAllSchemas","_dialect","supports","schemas","drop","showAllSchemas","Promise","all","map","schemaName","raw","type","SELECT","showSchemasSql","showSchemasQuery","schemaNames","flatten","value","schema_name","databaseVersion","versionQuery","VERSION","createTable","tableName","attributes","model","uniqueKeys","forOwn","uniqueKey","customIndex","undefined","mapValues","attribute","normalizeAttribute","ensureEnums","_schema","addSchema","attributesToSQL","table","context","createTableQuery","dropTable","cascade","force","dropTableQuery","_dropAllTables","tableNames","skip","includes","dropAllTables","showAllTables","foreignKeys","getForeignKeysForTables","normalizedTableName","isObject","foreignKey","dropForeignKeyQuery","renameTable","before","after","renameTableQuery","SHOWTABLES","showTablesSql","showTablesQuery","config","describeTable","schemaDelimiter","describeTableQuery","DESCRIBE","data","isEmpty","Error","e","original","code","addColumn","key","addColumnQuery","removeColumn","attributeName","removeColumnQuery","dataTypeOrOptions","Object","values","allowNull","changeColumn","changeColumnQuery","assertTableHasColumn","columnName","description","renameColumn","attrNameBefore","attrNameAfter","_options","defaultValue","renameColumnQuery","addIndex","rawTablename","Array","isArray","fields","cloneDeep","addIndexQuery","supportsSearchPath","showIndex","showIndexesQuery","SHOWINDEXES","length","FOREIGNKEYS","results","getForeignKeysQuery","result","forEach","i","r","constraint_name","filter","identity","getForeignKeyReferencesForTable","queryOptions","removeIndex","indexNameOrAttributes","removeIndexQuery","addConstraint","addConstraintQuery","showConstraint","constraintName","showConstraintsQuery","SHOWCONSTRAINTS","removeConstraint","removeConstraintQuery","insert","instance","hasTrigger","insertQuery","rawAttributes","INSERT","isNewRecord","upsert","insertValues","updateValues","where","primaryKeys","item","field","c","indexKeys","_indexes","unique","UPSERT","updateOnDuplicate","keys","upsertKeys","find","indexKey","intersection","uniq","bulkInsert","records","bulkInsertQuery","update","identifier","updateQuery","UPDATE","bulkUpdate","modelManager","models","BULKUPDATE","delete","cascades","deleteQuery","associations","association","onDelete","toLowerCase","useHooks","push","accessors","get","instances","_instance","destroy","bulkDelete","defaults","limit","truncate","truncateTableQuery","select","optionsArg","selectQuery","increment","incrementAmountsByField","extraAttributesToBeUpdated","arithmeticQuery","decrement","rawSelect","attributeSelector","Model","plain","dataType","DECIMAL","FLOAT","parseFloat","INTEGER","BIGINT","parseInt","DATE","Date","createTrigger","triggerName","timingType","fireOnArray","functionName","functionParams","optionsArray","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","language","body","dropFunction","renameFunction","oldFunctionName","newFunctionName","setIsolationLevel","transaction","parent","setIsolationLevelQuery","startTransaction","name","startTransactionQuery","deferConstraints","deferConstraintsQuery","commitTransaction","completesTransaction","commitTransactionQuery","promise","finished","rollbackTransaction","rollbackTransactionQuery","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst Transaction = require('../../transaction');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n */\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n  async showAllSchemas(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    };\n\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  /**\n   * Return database version\n   *\n   * @param {object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async databaseVersion(options) {\n    return await this.sequelize.query(\n      this.queryGenerator.versionQuery(),\n      { ...options, type: QueryTypes.VERSION }\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable' });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {object} options   Query options\n   *\n   * @returns {Promise}\n   */\n  async dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = { ...options };\n    options.cascade = options.cascade || options.force || false;\n\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, { ...options, cascade: true } );\n      }\n    }\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showAllTables(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    };\n\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<object>}\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n\n    const _options = {};\n\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    // fix: a not-null column cannot have null as default value\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(\n      tableName,\n      attrNameBefore,\n      this.queryGenerator.attributesToSQL(_options)\n    );\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, { ...options, supportsSearchPath: false });\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWINDEXES });\n  }\n\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @param {string[]} tableNames table names\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = { ...options, type: QueryTypes.FOREIGNKEYS };\n\n    const results = await Promise.all(tableNames.map(tableName =>\n      this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n\n    const result = {};\n\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i])\n        ? results[i].map(r => r.constraint_name)\n        : [results[i] && results[i].constraint_name];\n\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]  Query options\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   *\n   * @returns {Promise}\n   */\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                  Table name where you want to add a constraint\n   * @param {object} options                    An object to define the constraint name, type etc\n   * @param {string} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {Array}  options.fields             Array of column names to apply the constraint over\n   * @param {string} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]     The value for the default constraint\n   * @param {object} [options.where]            Where clause/expression for the CHECK constraint\n   * @param {object} [options.references]       Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table] Target table name\n   * @param {string} [options.references.field] Target column name\n   *\n   * @returns {Promise}\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWCONSTRAINTS });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {object} options         Query options\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n\n    return results;\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n    const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n    const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length >= 1).map(c => c.fields);\n    const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length >= 1).map(c => c.fields);\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = [];\n\n    // For fields in updateValues, try to find a constraint or unique index\n    // that includes given field. Only first matching upsert key is used.\n    for (const field of options.updateOnDuplicate) {\n      const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n      if (uniqueKey) {\n        options.upsertKeys = uniqueKey;\n        break;\n      }\n\n      const indexKey = indexKeys.find(fields => fields.includes(field));\n      if (indexKey) {\n        options.upsertKeys = indexKey;\n        break;\n      }\n    }\n\n    // Always use PK, if no constraint available OR update data contains PK\n    if (\n      options.upsertKeys.length === 0\n      || _.intersection(options.updateOnDuplicate, primaryKeys).length\n    ) {\n      options.upsertKeys = primaryKeys;\n    }\n\n    options.upsertKeys = _.uniq(options.upsertKeys);\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options };\n    options.type = QueryTypes.INSERT;\n\n    const results = await this.sequelize.query(\n      this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    );\n\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier, options) {\n    options = { ...options };\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  async bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = { ...options };\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      // Check for hasOne relationship with non-existing associate (\"has zero\")\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(\n        this.queryGenerator.truncateTableQuery(tableName, options),\n        options\n      );\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n\n    return await this.sequelize.query(\n      this.queryGenerator.deleteQuery(tableName, where, options, model),\n      options\n    );\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = { ...optionsArg, type: QueryTypes.SELECT, model };\n\n    return await this.sequelize.query(\n      this.queryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    const data = await this.sequelize.query(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      return parseInt(result, 10);\n    }\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n    return result;\n  }\n\n  async createTrigger(\n    tableName,\n    triggerName,\n    timingType,\n    fireOnArray,\n    functionName,\n    functionParams,\n    optionsArray,\n    options\n  ) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n  ensureEnums() {\n    // noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return await promise;\n  }\n}\n\nexports.QueryInterface = QueryInterface;\n"]},"metadata":{},"sourceType":"script"}