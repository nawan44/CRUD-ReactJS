{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst QueryTypes = require('../../query-types');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n\n        return undefined;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const {\n      connection\n    } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases) // Sorting to replace the longest aliases first to prevent alias collision\n      .sort((a, b) => b[1].length - a[1].length).forEach(([alias, original]) => {\n        const reg = new RegExp(_.escapeRegExp(original), 'g');\n        sql = sql.replace(reg, alias);\n      });\n    }\n\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    }\n\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row => _.toPairs(row).reduce((acc, [key, value]) => {\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(','); // Map column index in table to column name\n\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute; // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey]; // for functional indices indKey = 0\n\n          if (!field) {\n            return null;\n          }\n\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n\n      return rows;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n\n      for (const row of rows) {\n        let defParts;\n\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n\n        result.push(row);\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      let result = rows; // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n\n            return key;\n          });\n        });\n      }\n\n      return this.handleSelectQuery(result);\n    }\n\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = {\n            'false': false,\n            'true': true\n          }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n\n      return this.handleSelectQuery(rows);\n    }\n\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n\n      return [this.instance || rows && (this.options.plain && rows[0] || rows) || undefined, rowCount];\n    }\n\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n\n    return rows;\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err\n        });\n\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n\n        message = 'Exclusion constraint error';\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err\n          });\n        }\n\n      // falls through\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/postgres/query.js"],"names":["AbstractQuery","require","QueryTypes","sequelizeErrors","_","logger","debug","debugContext","Query","formatBindParameters","sql","values","dialect","stringReplaceFunc","value","replace","bindParam","Array","isArray","map","skipValueReplace","i","seen","replacementFunc","match","key","undefined","push","run","parameters","connection","isEmpty","options","searchPath","sequelize","getQueryInterface","queryGenerator","setSearchPath","minifyAliases","includeAliases","toPairs","sort","a","b","length","forEach","alias","original","reg","RegExp","escapeRegExp","query","Promise","resolve","reject","error","result","complete","_logQuery","queryResult","err","code","_invalid","formatError","rows","reduce","allRows","r","concat","rowCount","count","Number","isFinite","aliasesMapping","row","acc","mapping","get","isTableNameQuery","startsWith","isRelNameQuery","name","relname","tableName","split","Object","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","includes","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","test","toLowerCase","isSelectQuery","raw","quoteIdentifiers","attrsMap","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isInsertQuery","isUpdateQuery","isUpsertQuery","instance","dataValues","prototype","hasOwnProperty","call","record","attr","find","fieldName","plain","isRawQuery","errors","message","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({ message: errMessage, fields: null, index, table, parent: err });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}