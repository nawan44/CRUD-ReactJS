{"ast":null,"code":"const path = require('path');\n\nconst express = require('express');\n\nconst hbs = require('hbs');\n\nconst bodyParser = require('body-parser');\n\nconst mysql = require('mysql');\n\nconst app = express(); // const database = require('./database'); \n//konfigurasi koneksi\n\nconst conn = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'activity_db'\n}); //connect ke database\n\nconn.connect(function (err) {\n  if (err) throw err;\n  console.log('Mysql Connected...');\n}); //set views file\n\napp.set('', path.join(__dirname, '')); //set view engine\n\napp.set('', 'hbs');\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n})); //set folder public sebagai static folder untuk static file\n\napp.use('/', express.static(__dirname + '/')); //route untuk homepage\n\napp.get('/', (req, res) => {\n  let sql = \"SELECT * FROM todolist_tbl\";\n  let query = conn.query(sql, (err, results) => {\n    if (err) throw err;\n    res.render('App', {\n      results: results\n    });\n  });\n}); //route untuk insert data\n\napp.post('/save', (req, res) => {\n  let data = {\n    name: req.body.name,\n    activity: req.body.activity,\n    date: req.body.date\n  };\n  let sql = \"INSERT INTO todolist_tbl SET ?\";\n  let query = conn.query(sql, data, (err, results) => {\n    if (err) throw err;\n    res.redirect('/');\n  });\n}); //route untuk update data\n\napp.post('/update', (req, res) => {\n  let sql = \"UPDATE todolist_tbl SET name='\" + req.body.name + \"', activity='\" + req.body.activity + \"',date='\" + req.body.date + \"' WHERE id=\" + req.body.id;\n  let query = conn.query(sql, (err, results) => {\n    if (err) throw err;\n    res.redirect('/');\n  });\n}); //route untuk delete data\n\napp.post('/delete', (req, res) => {\n  let sql = \"DELETE FROM todolist_tbl WHERE id=\" + req.body.id + \"\";\n  let query = conn.query(sql, (err, results) => {\n    if (err) throw err;\n    res.redirect('/');\n  });\n}); //server listening\n\napp.listen(8000, () => {\n  console.log('Server is running at port 8000');\n});","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/src/index.js"],"names":["path","require","express","hbs","bodyParser","mysql","app","conn","createConnection","host","user","password","database","connect","err","console","log","set","join","__dirname","use","json","urlencoded","extended","static","get","req","res","sql","query","results","render","post","data","name","body","activity","date","redirect","id","listen"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMK,GAAG,GAAGJ,OAAO,EAAnB,C,CACA;AAEA;;AACA,MAAMK,IAAI,GAAGF,KAAK,CAACG,gBAAN,CAAuB;AAClCC,EAAAA,IAAI,EAAE,WAD4B;AAElCC,EAAAA,IAAI,EAAE,MAF4B;AAGlCC,EAAAA,QAAQ,EAAE,UAHwB;AAIlCC,EAAAA,QAAQ,EAAE;AAJwB,CAAvB,CAAb,C,CAOA;;AACAL,IAAI,CAACM,OAAL,CAAa,UAASC,GAAT,EAAc;AACzB,MAAGA,GAAH,EAAQ,MAAMA,GAAN;AACRC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,CAHD,E,CAKA;;AACAV,GAAG,CAACW,GAAJ,CAAQ,EAAR,EAAWjB,IAAI,CAACkB,IAAL,CAAUC,SAAV,EAAoB,EAApB,CAAX,E,CACA;;AACAb,GAAG,CAACW,GAAJ,CAAQ,EAAR,EAAY,KAAZ;AACAX,GAAG,CAACc,GAAJ,CAAQhB,UAAU,CAACiB,IAAX,EAAR;AACAf,GAAG,CAACc,GAAJ,CAAQhB,UAAU,CAACkB,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CACA;;AACAjB,GAAG,CAACc,GAAJ,CAAQ,GAAR,EAAYlB,OAAO,CAACsB,MAAR,CAAeL,SAAS,GAAG,GAA3B,CAAZ,E,CAIA;;AACAb,GAAG,CAACmB,GAAJ,CAAQ,GAAR,EAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxB,MAAIC,GAAG,GAAG,4BAAV;AACA,MAAIC,KAAK,GAAGtB,IAAI,CAACsB,KAAL,CAAWD,GAAX,EAAgB,CAACd,GAAD,EAAMgB,OAAN,KAAkB;AAC5C,QAAGhB,GAAH,EAAQ,MAAMA,GAAN;AACRa,IAAAA,GAAG,CAACI,MAAJ,CAAW,KAAX,EAAiB;AACfD,MAAAA,OAAO,EAAEA;AADM,KAAjB;AAGD,GALW,CAAZ;AAMD,CARD,E,CAUA;;AACAxB,GAAG,CAAC0B,IAAJ,CAAS,OAAT,EAAiB,CAACN,GAAD,EAAMC,GAAN,KAAc;AAC3B,MAAIM,IAAI,GAAG;AAACC,IAAAA,IAAI,EAAER,GAAG,CAACS,IAAJ,CAASD,IAAhB;AAAsBE,IAAAA,QAAQ,EAAEV,GAAG,CAACS,IAAJ,CAASC,QAAzC;AAAmDC,IAAAA,IAAI,EAAEX,GAAG,CAACS,IAAJ,CAASE;AAAlE,GAAX;AACA,MAAIT,GAAG,GAAG,gCAAV;AACA,MAAIC,KAAK,GAAGtB,IAAI,CAACsB,KAAL,CAAWD,GAAX,EAAgBK,IAAhB,EAAqB,CAACnB,GAAD,EAAMgB,OAAN,KAAkB;AACjD,QAAGhB,GAAH,EAAQ,MAAMA,GAAN;AACRa,IAAAA,GAAG,CAACW,QAAJ,CAAa,GAAb;AACD,GAHW,CAAZ;AAID,CAPH,E,CASA;;AACAhC,GAAG,CAAC0B,IAAJ,CAAS,SAAT,EAAmB,CAACN,GAAD,EAAMC,GAAN,KAAc;AAC7B,MAAIC,GAAG,GAAG,mCAAiCF,GAAG,CAACS,IAAJ,CAASD,IAA1C,GAA+C,eAA/C,GAA+DR,GAAG,CAACS,IAAJ,CAASC,QAAxE,GAAiF,UAAjF,GAA4FV,GAAG,CAACS,IAAJ,CAASE,IAArG,GAA0G,aAA1G,GAAwHX,GAAG,CAACS,IAAJ,CAASI,EAA3I;AACA,MAAIV,KAAK,GAAGtB,IAAI,CAACsB,KAAL,CAAWD,GAAX,EAAgB,CAACd,GAAD,EAAMgB,OAAN,KAAkB;AAC5C,QAAGhB,GAAH,EAAQ,MAAMA,GAAN;AACRa,IAAAA,GAAG,CAACW,QAAJ,CAAa,GAAb;AACD,GAHW,CAAZ;AAID,CANH,E,CAQE;;AACAhC,GAAG,CAAC0B,IAAJ,CAAS,SAAT,EAAmB,CAACN,GAAD,EAAMC,GAAN,KAAc;AAC/B,MAAIC,GAAG,GAAG,uCAAqCF,GAAG,CAACS,IAAJ,CAASI,EAA9C,GAAiD,EAA3D;AACA,MAAIV,KAAK,GAAGtB,IAAI,CAACsB,KAAL,CAAWD,GAAX,EAAgB,CAACd,GAAD,EAAMgB,OAAN,KAAkB;AAC5C,QAAGhB,GAAH,EAAQ,MAAMA,GAAN;AACNa,IAAAA,GAAG,CAACW,QAAJ,CAAa,GAAb;AACH,GAHW,CAAZ;AAID,CAND,E,CAQA;;AACAhC,GAAG,CAACkC,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBzB,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD,CAFD","sourcesContent":["const path = require('path');\nconst express = require('express');\nconst hbs = require('hbs');\nconst bodyParser = require('body-parser');\nconst mysql = require('mysql');\nconst app = express();\n// const database = require('./database'); \n\n//konfigurasi koneksi\nconst conn = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'activity_db'\n});\n \n//connect ke database\nconn.connect(function(err) {\n  if(err) throw err;\n  console.log('Mysql Connected...');\n});\n \n//set views file\napp.set('',path.join(__dirname,''));\n//set view engine\napp.set('', 'hbs');\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n//set folder public sebagai static folder untuk static file\napp.use('/',express.static(__dirname + '/'));\n \n\n\n//route untuk homepage\napp.get('/',(req, res) => {\n  let sql = \"SELECT * FROM todolist_tbl\";\n  let query = conn.query(sql, (err, results) => {\n    if(err) throw err;\n    res.render('App',{\n      results: results\n    });\n  });\n});\n\n//route untuk insert data\napp.post('/save',(req, res) => {\n    let data = {name: req.body.name, activity: req.body.activity, date: req.body.date};\n    let sql = \"INSERT INTO todolist_tbl SET ?\";\n    let query = conn.query(sql, data,(err, results) => {\n      if(err) throw err;\n      res.redirect('/');\n    });\n  });\n\n//route untuk update data\napp.post('/update',(req, res) => {\n    let sql = \"UPDATE todolist_tbl SET name='\"+req.body.name+\"', activity='\"+req.body.activity+\"',date='\"+req.body.date+\"' WHERE id=\"+req.body.id;\n    let query = conn.query(sql, (err, results) => {\n      if(err) throw err;\n      res.redirect('/');\n    });\n  });\n   \n  //route untuk delete data\n  app.post('/delete',(req, res) => {\n    let sql = \"DELETE FROM todolist_tbl WHERE id=\"+req.body.id+\"\";\n    let query = conn.query(sql, (err, results) => {\n      if(err) throw err;\n        res.redirect('/');\n    });\n  });\n   \n  //server listening\n  app.listen(8000, () => {\n    console.log('Server is running at port 8000');\n  });\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}