{"ast":null,"code":"'use strict';\n\nconst Utils = require('./../utils');\n\nconst Helpers = require('./helpers');\n\nconst _ = require('lodash');\n\nconst Association = require('./base');\n\nconst Op = require('../operators');\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\n\n\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.as, this.target.primaryKeyAttribute].join('_'));\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (this.options.targetKey && !this.target.rawAttributes[this.options.targetKey]) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks; // Get singular name, trying to uppercase the first letter, unless the model forbids it\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  } // the id is in the source table\n\n\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n    this.source.refreshAttributes();\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n\n\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, {\n          raw: true\n        })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, {\n          raw: true\n        })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n\n\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n    if (options.save === false) return;\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    }; // passes the changed field to save, so only that field get updated.\n\n    return await sourceInstance.save(options);\n  }\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n\n\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/associations/belongs-to.js"],"names":["Utils","require","Helpers","_","Association","Op","BelongsTo","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelize","primaryKeyAttribute","join","identifier","rawAttributes","identifierField","field","targetKey","Error","targetKeyField","targetKeyIsPrimary","targetIdentifier","associationAccessor","useHooks","upperFirst","accessors","get","set","create","_injectAttributes","newAttributes","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","where","Target","instance","cloneDeep","Object","prototype","hasOwnProperty","call","scope","unscoped","schema","schemaDelimiter","Array","isArray","undefined","in","map","_instance","findByPk","limit","and","results","findAll","result","raw","findOne","sourceInstance","associatedInstance","value","save","fields","association","values","newAssociatedObject","verifyAssociationAlias","alias","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.as,\n          this.target.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (\n      this.options.targetKey\n      && !this.target.rawAttributes[this.options.targetKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the source table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.source.refreshAttributes();\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    };\n\n    // passes the changed field to save, so only that field get updated.\n    return await sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"]},"metadata":{},"sourceType":"script"}