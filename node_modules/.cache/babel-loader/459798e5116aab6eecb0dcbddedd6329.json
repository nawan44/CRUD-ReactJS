{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').sqlite;\n\nconst {\n  SQLiteQueryInterface\n} = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'RIGHT JOIN': false,\n  inserts: {\n    ignoreDuplicates: ' OR IGNORE',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/sqlite/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SQLiteQueryInterface","SqliteDialect","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","prototype","supports","merge","cloneDeep","inserts","ignoreDuplicates","updateOnDuplicate","index","using","where","functionBased","transactionOptions","type","constraints","addConstraint","dropConstraint","joinTableDependent","groupedLimit","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,MAA9C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BP,OAAO,CAAC,mBAAD,CAAxC;;AAEA,MAAMQ,aAAN,SAA4BP,eAA5B,CAA4C;AAC1CQ,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAIT,iBAAJ,CAAsB,IAAtB,EAA4BQ,SAA5B,CAAzB;AACA,SAAKE,cAAL,GAAsB,IAAIR,cAAJ,CAAmB;AACvCS,MAAAA,QAAQ,EAAE,IAD6B;AAEvCH,MAAAA;AAFuC,KAAnB,CAAtB;AAKA,SAAKI,cAAL,GAAsB,IAAIP,oBAAJ,CAAyBG,SAAzB,EAAoC,KAAKE,cAAzC,CAAtB;AACD;;AAXyC;;AAc5CJ,aAAa,CAACO,SAAd,CAAwBC,QAAxB,GAAmCjB,CAAC,CAACkB,KAAF,CAAQlB,CAAC,CAACmB,SAAF,CAAYjB,eAAe,CAACc,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AAC1F,aAAW,KAD+E;AAE1F,oBAAkB,IAFwE;AAG1F,eAAa,KAH6E;AAI1F,gBAAc,KAJ4E;AAK1FG,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,EAAE,YADX;AAEPC,IAAAA,iBAAiB,EAAE;AAFZ,GALiF;AAS1FC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,KAAK,EAAE,IAFF;AAGLC,IAAAA,aAAa,EAAE;AAHV,GATmF;AAc1FC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,IAAI,EAAE;AADY,GAdsE;AAiB1FC,EAAAA,WAAW,EAAE;AACXC,IAAAA,aAAa,EAAE,KADJ;AAEXC,IAAAA,cAAc,EAAE;AAFL,GAjB6E;AAqB1FC,EAAAA,kBAAkB,EAAE,KArBsE;AAsB1FC,EAAAA,YAAY,EAAE,KAtB4E;AAuB1FC,EAAAA,IAAI,EAAE;AAvBoF,CAAzD,CAAnC;AA0BAzB,aAAa,CAACO,SAAd,CAAwBmB,cAAxB,GAAyC,OAAzC;AACA1B,aAAa,CAACO,SAAd,CAAwBZ,KAAxB,GAAgCA,KAAhC;AACAK,aAAa,CAACO,SAAd,CAAwBV,SAAxB,GAAoCA,SAApC;AACAG,aAAa,CAACO,SAAd,CAAwBoB,IAAxB,GAA+B,QAA/B;AACA3B,aAAa,CAACO,SAAd,CAAwBqB,SAAxB,GAAoC,GAApC;AACA5B,aAAa,CAACO,SAAd,CAAwBsB,cAAxB,GAAyC7B,aAAa,CAACO,SAAd,CAAwBqB,SAAjE;AACA5B,aAAa,CAACO,SAAd,CAAwBuB,eAAxB,GAA0C9B,aAAa,CAACO,SAAd,CAAwBqB,SAAlE;AAEAG,MAAM,CAACC,OAAP,GAAiBhC,aAAjB;AACA+B,MAAM,CAACC,OAAP,CAAehC,aAAf,GAA+BA,aAA/B;AACA+B,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBjC,aAAzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'RIGHT JOIN': false,\n  inserts: {\n    ignoreDuplicates: ' OR IGNORE',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  JSON: true\n});\n\nSqliteDialect.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]},"metadata":{},"sourceType":"script"}