{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').mssql;\n\nconst {\n  MSSqlQueryInterface\n} = require('./query-interface');\n\nclass MssqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MSSqlQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nMssqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': true,\n  'DEFAULT VALUES': true,\n  'LIMIT ON UPDATE': true,\n  'ORDER NULLS': false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: {\n    output: true\n  },\n  schemas: true,\n  autoIncrement: {\n    identityInsert: true,\n    defaultValue: false,\n    update: false\n  },\n  constraints: {\n    restrict: false,\n    default: true\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: true,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\nMssqlDialect.prototype.defaultVersion = '12.0.2000'; // SQL Server 2014 Express\n\nMssqlDialect.prototype.Query = Query;\nMssqlDialect.prototype.name = 'mssql';\nMssqlDialect.prototype.TICK_CHAR = '\"';\nMssqlDialect.prototype.TICK_CHAR_LEFT = '[';\nMssqlDialect.prototype.TICK_CHAR_RIGHT = ']';\nMssqlDialect.prototype.DataTypes = DataTypes;\nmodule.exports = MssqlDialect;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mssql/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","mssql","MSSqlQueryInterface","MssqlDialect","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","prototype","supports","merge","cloneDeep","lock","transactions","migrations","returnValues","output","schemas","autoIncrement","identityInsert","defaultValue","update","constraints","restrict","default","index","collate","length","parser","type","using","where","NUMERIC","tmpTableTrigger","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,KAA9C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BP,OAAO,CAAC,mBAAD,CAAvC;;AAEA,MAAMQ,YAAN,SAA2BP,eAA3B,CAA2C;AACzCQ,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAIT,iBAAJ,CAAsB,IAAtB,EAA4BQ,SAA5B,CAAzB;AACA,SAAKE,cAAL,GAAsB,IAAIR,cAAJ,CAAmB;AACvCS,MAAAA,QAAQ,EAAE,IAD6B;AAEvCH,MAAAA;AAFuC,KAAnB,CAAtB;AAIA,SAAKI,cAAL,GAAsB,IAAIP,mBAAJ,CAAwBG,SAAxB,EAAmC,KAAKE,cAAxC,CAAtB;AACD;;AAVwC;;AAa3CJ,YAAY,CAACO,SAAb,CAAuBC,QAAvB,GAAkCjB,CAAC,CAACkB,KAAF,CAAQlB,CAAC,CAACmB,SAAF,CAAYjB,eAAe,CAACc,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AACzF,aAAW,IAD8E;AAEzF,oBAAkB,IAFuE;AAGzF,qBAAmB,IAHsE;AAIzF,iBAAe,KAJ0E;AAKzFG,EAAAA,IAAI,EAAE,KALmF;AAMzFC,EAAAA,YAAY,EAAE,IAN2E;AAOzFC,EAAAA,UAAU,EAAE,KAP6E;AAQzFC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE;AADI,GAR2E;AAWzFC,EAAAA,OAAO,EAAE,IAXgF;AAYzFC,EAAAA,aAAa,EAAE;AACbC,IAAAA,cAAc,EAAE,IADH;AAEbC,IAAAA,YAAY,EAAE,KAFD;AAGbC,IAAAA,MAAM,EAAE;AAHK,GAZ0E;AAiBzFC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE,KADC;AAEXC,IAAAA,OAAO,EAAE;AAFE,GAjB4E;AAqBzFC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE,KAFH;AAGLC,IAAAA,MAAM,EAAE,KAHH;AAILC,IAAAA,IAAI,EAAE,IAJD;AAKLC,IAAAA,KAAK,EAAE,KALF;AAMLC,IAAAA,KAAK,EAAE;AANF,GArBkF;AA6BzFC,EAAAA,OAAO,EAAE,IA7BgF;AA8BzFC,EAAAA,eAAe,EAAE;AA9BwE,CAAzD,CAAlC;AAiCAhC,YAAY,CAACO,SAAb,CAAuB0B,cAAvB,GAAwC,WAAxC,C,CAAqD;;AACrDjC,YAAY,CAACO,SAAb,CAAuBZ,KAAvB,GAA+BA,KAA/B;AACAK,YAAY,CAACO,SAAb,CAAuB2B,IAAvB,GAA8B,OAA9B;AACAlC,YAAY,CAACO,SAAb,CAAuB4B,SAAvB,GAAmC,GAAnC;AACAnC,YAAY,CAACO,SAAb,CAAuB6B,cAAvB,GAAwC,GAAxC;AACApC,YAAY,CAACO,SAAb,CAAuB8B,eAAvB,GAAyC,GAAzC;AACArC,YAAY,CAACO,SAAb,CAAuBV,SAAvB,GAAmCA,SAAnC;AAEAyC,MAAM,CAACC,OAAP,GAAiBvC,YAAjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mssql;\nconst { MSSqlQueryInterface } = require('./query-interface');\n\nclass MssqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MSSqlQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nMssqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': true,\n  'DEFAULT VALUES': true,\n  'LIMIT ON UPDATE': true,\n  'ORDER NULLS': false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: {\n    output: true\n  },\n  schemas: true,\n  autoIncrement: {\n    identityInsert: true,\n    defaultValue: false,\n    update: false\n  },\n  constraints: {\n    restrict: false,\n    default: true\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: true,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\n\nMssqlDialect.prototype.defaultVersion = '12.0.2000'; // SQL Server 2014 Express\nMssqlDialect.prototype.Query = Query;\nMssqlDialect.prototype.name = 'mssql';\nMssqlDialect.prototype.TICK_CHAR = '\"';\nMssqlDialect.prototype.TICK_CHAR_LEFT = '[';\nMssqlDialect.prototype.TICK_CHAR_RIGHT = ']';\nMssqlDialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = MssqlDialect;\n"]},"metadata":{},"sourceType":"script"}