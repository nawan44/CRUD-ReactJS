{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst util = require('util');\n\nconst DataTypes = require('../../data-types');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst semver = require('semver');\n\nconst _ = require('lodash');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options\n    }; //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = 'public';\n    return 'SELECT ' + 'pk.constraint_type as \"Constraint\",' + 'c.column_name as \"Field\", ' + 'c.column_default as \"Default\",' + 'c.is_nullable as \"Null\", ' + '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' + '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' + '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' + 'FROM information_schema.columns c ' + 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' + 'cu.column_name, tc.constraint_type ' + 'FROM information_schema.TABLE_CONSTRAINTS tc ' + 'JOIN information_schema.KEY_COLUMN_USAGE  cu ' + 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' + 'and tc.constraint_name=cu.constraint_name ' + 'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' + 'ON pk.table_schema=c.table_schema ' + 'AND pk.table_name=c.table_name ' + 'AND pk.column_name=c.column_name ' + `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    } // https://www.postgresql.org/docs/current/static/functions-json.html\n\n\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    } // Check invalid json statement\n\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    } // return true if the statement has valid json function\n\n\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(' AND ');\n      }\n\n      if (smth.path) {\n        let str; // Allow specifying conditions using the postgres json syntax\n\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, {\n      context: 'addColumn',\n      table,\n      key\n    });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [`TRUNCATE ${this.quoteTable(tableName)}`, options.restartIdentity ? ' RESTART IDENTITY' : '', options.cascade ? ' CASCADE' : ''].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    } // This is ARCANE!\n\n\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' + 'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' + `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` + 'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' + `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` + 'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', 'from INFORMATION_SCHEMA.table_constraints', `WHERE table_name='${tableName}';`].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model == 'string') && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && (options.context === 'addColumn' || options.context === 'changeColumn')) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, {\n        key,\n        ...options\n      });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName'); // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n\n    const paramList = this._expandFunctionParamList(params);\n\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n    });\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ? '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"'); // pgListEnums requires the enum name only, without the schema\n\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' + 'JOIN pg_enum e ON t.oid = e.enumtypid ' + 'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' + `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n\n\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' + `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n\n\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' + 'DISTINCT tc.constraint_name as constraint_name, ' + 'tc.constraint_schema as constraint_schema, ' + 'tc.constraint_catalog as constraint_catalog, ' + 'tc.table_name as table_name,' + 'tc.table_schema as table_schema,' + 'tc.table_catalog as table_catalog,' + 'kcu.column_name as column_name,' + 'ccu.table_schema  AS referenced_table_schema,' + 'ccu.table_catalog  AS referenced_table_catalog,' + 'ccu.table_name  AS referenced_table_name,' + 'ccu.column_name AS referenced_column_name ' + 'FROM information_schema.table_constraints AS tc ' + 'JOIN information_schema.key_column_usage AS kcu ' + 'ON tc.constraint_name = kcu.constraint_name ' + 'JOIN information_schema.constraint_column_usage AS ccu ' + 'ON ccu.constraint_name = tc.constraint_name ';\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n\n\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n}\n\nmodule.exports = PostgresQueryGenerator;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/postgres/query-generator.js"],"names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","PostgresQueryGenerator","setSearchPath","searchPath","createDatabaseQuery","databaseName","options","encoding","collate","values","database","quoteTable","escape","collation","ctype","template","dropDatabaseQuery","createSchema","schema","databaseVersion","get","gte","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","attrStr","comments","columnComments","quotedTable","comment","attr","quotedAttr","quoteIdentifier","i","indexOf","escapedCommentText","substring","dataType","dataTypeMapping","push","attributesClause","join","uniqueKeys","each","columns","customIndex","fields","map","field","pks","reduce","acc","attribute","key","includes","length","dropTableQuery","cascade","showTablesQuery","describeTableQuery","_checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","value","str","paths","toPath","column","shift","format","call","addColumnQuery","table","dbDataType","attributeToSQL","context","type","definition","quotedKey","extractTableDetails","query","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","subQuery","sql","attrSql","replace","trim","match","startsWith","pgEnumName","renameColumnQuery","attrBefore","attrString","fn","fnName","parameters","body","returns","language","truncateTableQuery","restartIdentity","deleteQuery","where","model","whereClause","getWhereConditions","limit","primaryKeys","primaryKeysSelection","Object","pk","primaryKeyAttributes","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","quoteIdentifiers","addLimitAndOffset","fragment","offset","isPlainObject","ARRAY","enumType","Array","isArray","toString","prototype","hasOwnProperty","allowNull","autoIncrement","autoIncrementIdentity","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","addSchema","_schema","referencesKey","onDelete","toUpperCase","onUpdate","deferrable","deferConstraintsQuery","setConstraintQuery","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","_expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","variableList","variables","_expandFunctionVariableList","expandedOptionsArray","statement","force","dropFunction","renameFunction","oldFunctionName","newFunctionName","pgEscapeAndQuote","val","removeTicks","undefined","forEach","curParam","paramDef","direction","name","joined","variableDefinitions","variable","variableDefinition","default","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","addTicks","generateEnumName","delimiter","pgListEnums","attrName","pgEnumDrop","pgEnumAdd","sequelize","before","after","fromArray","text","matches","m","slice","getForeignKeysQuery","_getForeignKeyReferencesQueryPrefix","getForeignKeyReferencesQuery","catalogName","schemaName","getForeignKeyReferenceQuery","columnName","dropForeignKeyQuery","foreignKey","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,6BAAD,CAAtC;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMK,CAAC,GAAGL,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMM,sBAAN,SAAqCH,sBAArC,CAA4D;AAC1DI,EAAAA,aAAa,CAACC,UAAD,EAAa;AACxB,WAAQ,sBAAqBA,UAAW,GAAxC;AACD;;AAEDC,EAAAA,mBAAmB,CAACC,YAAD,EAAeC,OAAf,EAAwB;AACzCA,IAAAA,OAAO,GAAG;AACRC,MAAAA,QAAQ,EAAE,IADF;AAERC,MAAAA,OAAO,EAAE,IAFD;AAGR,SAAGF;AAHK,KAAV;AAMA,UAAMG,MAAM,GAAG;AACbC,MAAAA,QAAQ,EAAE,KAAKC,UAAL,CAAgBN,YAAhB,CADG;AAEbE,MAAAA,QAAQ,EAAED,OAAO,CAACC,QAAR,GAAoB,eAAc,KAAKK,MAAL,CAAYN,OAAO,CAACC,QAApB,CAA8B,EAAhE,GAAoE,EAFjE;AAGbM,MAAAA,SAAS,EAAEP,OAAO,CAACE,OAAR,GAAmB,iBAAgB,KAAKI,MAAL,CAAYN,OAAO,CAACE,OAApB,CAA6B,EAAhE,GAAoE,EAHlE;AAIbM,MAAAA,KAAK,EAAER,OAAO,CAACQ,KAAR,GAAiB,eAAc,KAAKF,MAAL,CAAYN,OAAO,CAACQ,KAApB,CAA2B,EAA1D,GAA8D,EAJxD;AAKbC,MAAAA,QAAQ,EAAET,OAAO,CAACS,QAAR,GAAoB,eAAc,KAAKH,MAAL,CAAYN,OAAO,CAACS,QAApB,CAA8B,EAAhE,GAAoE;AALjE,KAAf;AAQA,WAAQ,mBAAkBN,MAAM,CAACC,QAAS,GAAED,MAAM,CAACF,QAAS,GAAEE,MAAM,CAACI,SAAU,GAAEJ,MAAM,CAACK,KAAM,GAAEL,MAAM,CAACM,QAAS,GAAhH;AACD;;AAEDC,EAAAA,iBAAiB,CAACX,YAAD,EAAe;AAC9B,WAAQ,2BAA0B,KAAKM,UAAL,CAAgBN,YAAhB,CAA8B,GAAhE;AACD;;AAEDY,EAAAA,YAAY,CAACC,MAAD,EAAS;AACnB,UAAMC,eAAe,GAAGnB,CAAC,CAACoB,GAAF,CAAM,IAAN,EAAY,mCAAZ,EAAiD,CAAjD,CAAxB;;AAEA,QAAID,eAAe,IAAIpB,MAAM,CAACsB,GAAP,CAAWF,eAAX,EAA4B,OAA5B,CAAvB,EAA6D;AAC3D,aAAQ,+BAA8BD,MAAO,GAA7C;AACD;;AAED,WAAQ,iBAAgBA,MAAO,GAA/B;AACD;;AAEDI,EAAAA,UAAU,CAACJ,MAAD,EAAS;AACjB,WAAQ,yBAAwBA,MAAO,WAAvC;AACD;;AAEDK,EAAAA,gBAAgB,GAAG;AACjB,WAAO,uJAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,qBAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,SAAD,EAAYC,UAAZ,EAAwBrB,OAAxB,EAAiC;AAC/CA,IAAAA,OAAO,GAAG,EAAE,GAAGA;AAAL,KAAV,CAD+C,CAG/C;;AACA,UAAMa,eAAe,GAAGnB,CAAC,CAACoB,GAAF,CAAM,IAAN,EAAY,mCAAZ,EAAiD,CAAjD,CAAxB;;AACA,UAAMQ,OAAO,GAAG,EAAhB;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,cAAc,GAAG,EAArB;AAEA,UAAMC,WAAW,GAAG,KAAKpB,UAAL,CAAgBe,SAAhB,CAApB;;AAEA,QAAIpB,OAAO,CAAC0B,OAAR,IAAmB,OAAO1B,OAAO,CAAC0B,OAAf,KAA2B,QAAlD,EAA4D;AAC1DH,MAAAA,QAAQ,IAAK,sBAAqBE,WAAY,OAAM,KAAKnB,MAAL,CAAYN,OAAO,CAAC0B,OAApB,CAA6B,EAAjF;AACD;;AAED,SAAK,MAAMC,IAAX,IAAmBN,UAAnB,EAA+B;AAC7B,YAAMO,UAAU,GAAG,KAAKC,eAAL,CAAqBF,IAArB,CAAnB;AACA,YAAMG,CAAC,GAAGT,UAAU,CAACM,IAAD,CAAV,CAAiBI,OAAjB,CAAyB,UAAzB,CAAV;;AACA,UAAID,CAAC,KAAK,CAAC,CAAX,EAAc;AACZ;AACA,cAAME,kBAAkB,GAAG,KAAK1B,MAAL,CAAYe,UAAU,CAACM,IAAD,CAAV,CAAiBM,SAAjB,CAA2BH,CAAC,GAAG,CAA/B,CAAZ,CAA3B;AACAN,QAAAA,cAAc,IAAK,uBAAsBC,WAAY,IAAGG,UAAW,OAAMI,kBAAmB,EAA5F;AACAX,QAAAA,UAAU,CAACM,IAAD,CAAV,GAAmBN,UAAU,CAACM,IAAD,CAAV,CAAiBM,SAAjB,CAA2B,CAA3B,EAA8BH,CAA9B,CAAnB;AACD;;AAED,YAAMI,QAAQ,GAAG,KAAKC,eAAL,CAAqBf,SAArB,EAAgCO,IAAhC,EAAsCN,UAAU,CAACM,IAAD,CAAhD,CAAjB;AACAL,MAAAA,OAAO,CAACc,IAAR,CAAc,GAAER,UAAW,IAAGM,QAAS,EAAvC;AACD;;AAGD,QAAIG,gBAAgB,GAAGf,OAAO,CAACgB,IAAR,CAAa,IAAb,CAAvB;;AAEA,QAAItC,OAAO,CAACuC,UAAZ,EAAwB;AACtB7C,MAAAA,CAAC,CAAC8C,IAAF,CAAOxC,OAAO,CAACuC,UAAf,EAA2BE,OAAO,IAAI;AACpC,YAAIA,OAAO,CAACC,WAAZ,EAAyB;AACvBL,UAAAA,gBAAgB,IAAK,aAAYI,OAAO,CAACE,MAAR,CAAeC,GAAf,CAAmBC,KAAK,IAAI,KAAKhB,eAAL,CAAqBgB,KAArB,CAA5B,EAAyDP,IAAzD,CAA8D,IAA9D,CAAoE,GAArG;AACD;AACF,OAJD;AAKD;;AAED,UAAMQ,GAAG,GAAGpD,CAAC,CAACqD,MAAF,CAAS1B,UAAT,EAAqB,CAAC2B,GAAD,EAAMC,SAAN,EAAiBC,GAAjB,KAAyB;AACxD,UAAID,SAAS,CAACE,QAAV,CAAmB,aAAnB,CAAJ,EAAuC;AACrCH,QAAAA,GAAG,CAACZ,IAAJ,CAAS,KAAKP,eAAL,CAAqBqB,GAArB,CAAT;AACD;;AACD,aAAOF,GAAP;AACD,KALW,EAKT,EALS,EAKLV,IALK,CAKA,GALA,CAAZ;;AAOA,QAAIQ,GAAG,CAACM,MAAJ,GAAa,CAAjB,EAAoB;AAClBf,MAAAA,gBAAgB,IAAK,kBAAiBS,GAAI,GAA1C;AACD;;AAED,WAAQ,gBAAejC,eAAe,KAAK,CAApB,IAAyBpB,MAAM,CAACsB,GAAP,CAAWF,eAAX,EAA4B,OAA5B,CAAzB,GAAgE,gBAAhE,GAAmF,EAAG,GAAEY,WAAY,KAAIY,gBAAiB,IAAGd,QAAS,GAAEC,cAAe,GAA7K;AACD;;AAED6B,EAAAA,cAAc,CAACjC,SAAD,EAAYpB,OAAZ,EAAqB;AACjCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,WAAQ,wBAAuB,KAAKK,UAAL,CAAgBe,SAAhB,CAA2B,GAAEpB,OAAO,CAACsD,OAAR,GAAkB,UAAlB,GAA+B,EAAG,GAA9F;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,kJAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACpC,SAAD,EAAYR,MAAZ,EAAoB;AACpC,QAAI,CAACA,MAAL,EAAaA,MAAM,GAAG,QAAT;AAEb,WAAO,YACL,qCADK,GAEL,4BAFK,GAGL,gCAHK,GAIL,2BAJK,GAKL,4MALK,GAML,oJANK,GAOL,uNAPK,GAQL,oCARK,GASL,oDATK,GAUL,qCAVK,GAWL,+CAXK,GAYL,+CAZK,GAaL,qEAbK,GAcL,4CAdK,GAeL,6CAfK,GAgBL,oCAhBK,GAiBL,iCAjBK,GAkBL,mCAlBK,GAmBJ,wBAAuB,KAAKN,MAAL,CAAYc,SAAZ,CAAuB,yBAAwB,KAAKd,MAAL,CAAYM,MAAZ,CAAoB,GAnB7F;AAoBD;AAED;;;;;;;;;AAOA6C,EAAAA,wBAAwB,CAACC,IAAD,EAAO;AAC7B,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAO,KAAP;AACD,KAH4B,CAK7B;;;AACA,UAAMC,iBAAiB,GAAG,wDAA1B;AACA,UAAMC,iBAAiB,GAAG,yCAA1B;AACA,UAAMC,iBAAiB,GAAG,4DAA1B;AAEA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAIC,eAAe,GAAG,CAAtB;AACA,QAAIC,eAAe,GAAG,CAAtB;AACA,QAAIC,eAAe,GAAG,KAAtB;AACA,QAAIC,eAAe,GAAG,KAAtB;;AAEA,WAAOJ,YAAY,GAAGJ,IAAI,CAACN,MAA3B,EAAmC;AACjC,YAAMe,MAAM,GAAGT,IAAI,CAACU,MAAL,CAAYN,YAAZ,CAAf;AACA,YAAMO,eAAe,GAAGV,iBAAiB,CAACW,IAAlB,CAAuBH,MAAvB,CAAxB;;AACA,UAAIE,eAAJ,EAAqB;AACnBP,QAAAA,YAAY,IAAIO,eAAe,CAAC,CAAD,CAAf,CAAmBtC,OAAnB,CAA2B,GAA3B,CAAhB;AACAkC,QAAAA,eAAe,GAAG,IAAlB;AACA;AACD;;AAED,YAAMM,eAAe,GAAGX,iBAAiB,CAACU,IAAlB,CAAuBH,MAAvB,CAAxB;;AACA,UAAII,eAAJ,EAAqB;AACnBT,QAAAA,YAAY,IAAIS,eAAe,CAAC,CAAD,CAAf,CAAmBnB,MAAnC;AACAa,QAAAA,eAAe,GAAG,IAAlB;AACA;AACD;;AAED,YAAMO,YAAY,GAAGX,iBAAiB,CAACS,IAAlB,CAAuBH,MAAvB,CAArB;;AACA,UAAIK,YAAJ,EAAkB;AAChB,cAAMC,aAAa,GAAGD,YAAY,CAAC,CAAD,CAAlC;;AACA,YAAIC,aAAa,KAAK,GAAtB,EAA2B;AACzBV,UAAAA,eAAe;AAChB,SAFD,MAEO,IAAIU,aAAa,KAAK,GAAtB,EAA2B;AAChCT,UAAAA,eAAe;AAChB,SAFM,MAEA,IAAIS,aAAa,KAAK,GAAtB,EAA2B;AAChCP,UAAAA,eAAe,GAAG,IAAlB;AACA;AACD;;AACDJ,QAAAA,YAAY,IAAIU,YAAY,CAAC,CAAD,CAAZ,CAAgBpB,MAAhC;AACA;AACD;;AAED;AACD,KAhD4B,CAkD7B;;;AACAc,IAAAA,eAAe,IAAIH,eAAe,KAAKC,eAAvC;;AACA,QAAIC,eAAe,IAAIC,eAAvB,EAAwC;AACtC,YAAM,IAAIQ,KAAJ,CAAW,2BAA0BhB,IAAK,EAA1C,CAAN;AACD,KAtD4B,CAwD7B;;;AACA,WAAOO,eAAP;AACD;;AAEDU,EAAAA,qBAAqB,CAACC,IAAD,EAAOxD,SAAP,EAAkByD,OAAlB,EAA2B7E,OAA3B,EAAoC8E,OAApC,EAA6C;AAChE,QAAIF,IAAI,YAAYxF,KAAK,CAAC2F,IAA1B,EAAgC;AAC9B;AACA,UAAIH,IAAI,CAACI,UAAT,EAAqB;AACnB,cAAMA,UAAU,GAAG,KAAKC,oBAAL,CAA0BL,IAAI,CAACI,UAA/B,EAA2CpC,GAA3C,CAA+CsC,SAAS,IACxE,GAAE,KAAKC,uBAAL,CAA6BD,SAAS,CAACE,IAAV,CAAe,CAAf,CAA7B,EAAgD1F,CAAC,CAAC2F,IAAF,CAAOH,SAAS,CAACE,IAAjB,CAAhD,CAAwE,OAAMF,SAAS,CAACI,KAAM,GADhF,CAAnB;AAIA,eAAON,UAAU,CAAC1C,IAAX,CAAgB,OAAhB,CAAP;AACD;;AACD,UAAIsC,IAAI,CAACQ,IAAT,EAAe;AACb,YAAIG,GAAJ,CADa,CAGb;;AACA,YAAI,KAAK9B,wBAAL,CAA8BmB,IAAI,CAACQ,IAAnC,CAAJ,EAA8C;AAC5CG,UAAAA,GAAG,GAAGX,IAAI,CAACQ,IAAX;AACD,SAFD,MAEO;AACL;AACA,gBAAMI,KAAK,GAAG9F,CAAC,CAAC+F,MAAF,CAASb,IAAI,CAACQ,IAAd,CAAd;;AACA,gBAAMM,MAAM,GAAGF,KAAK,CAACG,KAAN,EAAf;AACAJ,UAAAA,GAAG,GAAG,KAAKJ,uBAAL,CAA6BO,MAA7B,EAAqCF,KAArC,CAAN;AACD;;AAED,YAAIZ,IAAI,CAACU,KAAT,EAAgB;AACdC,UAAAA,GAAG,IAAIjG,IAAI,CAACsG,MAAL,CAAY,OAAZ,EAAqB,KAAKtF,MAAL,CAAYsE,IAAI,CAACU,KAAjB,CAArB,CAAP;AACD;;AAED,eAAOC,GAAP;AACD;AACF;;AACD,WAAO,MAAMZ,qBAAN,CAA4BkB,IAA5B,CAAiC,IAAjC,EAAuCjB,IAAvC,EAA6CxD,SAA7C,EAAwDyD,OAAxD,EAAiE7E,OAAjE,EAA0E8E,OAA1E,CAAP;AACD;;AAEDgB,EAAAA,cAAc,CAACC,KAAD,EAAQ7C,GAAR,EAAaD,SAAb,EAAwB;AACpC,UAAM+C,UAAU,GAAG,KAAKC,cAAL,CAAoBhD,SAApB,EAA+B;AAAEiD,MAAAA,OAAO,EAAE,WAAX;AAAwBH,MAAAA,KAAxB;AAA+B7C,MAAAA;AAA/B,KAA/B,CAAnB;AACA,UAAMhB,QAAQ,GAAGe,SAAS,CAACkD,IAAV,IAAkBlD,SAAnC;AACA,UAAMmD,UAAU,GAAG,KAAKjE,eAAL,CAAqB4D,KAArB,EAA4B7C,GAA5B,EAAiC8C,UAAjC,CAAnB;AACA,UAAMK,SAAS,GAAG,KAAKxE,eAAL,CAAqBqB,GAArB,CAAlB;AACA,UAAMzB,WAAW,GAAG,KAAKpB,UAAL,CAAgB,KAAKiG,mBAAL,CAAyBP,KAAzB,CAAhB,CAApB;AAEA,QAAIQ,KAAK,GAAI,eAAc9E,WAAY,eAAc4E,SAAU,IAAGD,UAAW,GAA7E;;AAEA,QAAIlE,QAAQ,YAAY3C,SAAS,CAACiH,IAAlC,EAAwC;AACtCD,MAAAA,KAAK,GAAG,KAAKE,MAAL,CAAYV,KAAZ,EAAmB7C,GAAnB,EAAwBhB,QAAxB,IAAoCqE,KAA5C;AACD,KAFD,MAEO,IAAIrE,QAAQ,CAACiE,IAAT,IAAiBjE,QAAQ,CAACiE,IAAT,YAAyB5G,SAAS,CAACiH,IAAxD,EAA8D;AACnED,MAAAA,KAAK,GAAG,KAAKE,MAAL,CAAYV,KAAZ,EAAmB7C,GAAnB,EAAwBhB,QAAQ,CAACiE,IAAjC,IAAyCI,KAAjD;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACtF,SAAD,EAAYuF,aAAZ,EAA2B;AAC1C,UAAMC,eAAe,GAAG,KAAKvG,UAAL,CAAgB,KAAKiG,mBAAL,CAAyBlF,SAAzB,CAAhB,CAAxB;AACA,UAAMyF,mBAAmB,GAAG,KAAKhF,eAAL,CAAqB8E,aAArB,CAA5B;AACA,WAAQ,eAAcC,eAAgB,gBAAeC,mBAAoB,GAAzE;AACD;;AAEDC,EAAAA,iBAAiB,CAAC1F,SAAD,EAAYC,UAAZ,EAAwB;AACvC,UAAMkF,KAAK,GAAGQ,QAAQ,IAAK,eAAc,KAAK1G,UAAL,CAAgBe,SAAhB,CAA2B,iBAAgB2F,QAAS,GAA7F;;AACA,UAAMC,GAAG,GAAG,EAAZ;;AACA,SAAK,MAAML,aAAX,IAA4BtF,UAA5B,EAAwC;AACtC,UAAI+E,UAAU,GAAG,KAAKjE,eAAL,CAAqBf,SAArB,EAAgCuF,aAAhC,EAA+CtF,UAAU,CAACsF,aAAD,CAAzD,CAAjB;AACA,UAAIM,OAAO,GAAG,EAAd;;AAEA,UAAIb,UAAU,CAACjD,QAAX,CAAoB,UAApB,CAAJ,EAAqC;AACnC8D,QAAAA,OAAO,IAAIV,KAAK,CAAE,GAAE,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,eAAxC,CAAhB;AAEAP,QAAAA,UAAU,GAAGA,UAAU,CAACc,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,EAAmCC,IAAnC,EAAb;AACD,OAJD,MAIO,IAAI,CAACf,UAAU,CAACjD,QAAX,CAAoB,YAApB,CAAL,EAAwC;AAC7C8D,QAAAA,OAAO,IAAIV,KAAK,CAAE,GAAE,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,gBAAxC,CAAhB;AACD;;AAED,UAAIP,UAAU,CAACjD,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClC8D,QAAAA,OAAO,IAAIV,KAAK,CAAE,GAAE,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,gBAAeP,UAAU,CAACgB,KAAX,CAAiB,iBAAjB,EAAoC,CAApC,CAAuC,EAA9F,CAAhB;AAEAhB,QAAAA,UAAU,GAAGA,UAAU,CAACc,OAAX,CAAmB,gBAAnB,EAAqC,EAArC,EAAyCC,IAAzC,EAAb;AACD,OAJD,MAIO,IAAI,CAACf,UAAU,CAACjD,QAAX,CAAoB,YAApB,CAAL,EAAwC;AAC7C8D,QAAAA,OAAO,IAAIV,KAAK,CAAE,GAAE,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,eAAxC,CAAhB;AACD;;AAED,UAAItF,UAAU,CAACsF,aAAD,CAAV,CAA0BU,UAA1B,CAAqC,OAArC,CAAJ,EAAmD;AACjDJ,QAAAA,OAAO,IAAI,KAAKR,MAAL,CAAYrF,SAAZ,EAAuBuF,aAAvB,EAAsCtF,UAAU,CAACsF,aAAD,CAAhD,CAAX;AACAP,QAAAA,UAAU,GAAGA,UAAU,CAACc,OAAX,CAAmB,aAAnB,EAAkC,KAAKI,UAAL,CAAgBlG,SAAhB,EAA2BuF,aAA3B,EAA0C;AAAE/F,UAAAA,MAAM,EAAE;AAAV,SAA1C,CAAlC,CAAb;AACAwF,QAAAA,UAAU,IAAK,WAAU,KAAKvE,eAAL,CAAqB8E,aAArB,CAAoC,KAAI,KAAKW,UAAL,CAAgBlG,SAAhB,EAA2BuF,aAA3B,CAA0C,GAA3G;AACD;;AAED,UAAIP,UAAU,CAACgB,KAAX,CAAiB,WAAjB,CAAJ,EAAmC;AACjChB,QAAAA,UAAU,GAAGA,UAAU,CAACc,OAAX,CAAmB,WAAnB,EAAgC,EAAhC,CAAb;AACAD,QAAAA,OAAO,IAAIV,KAAK,CAAE,eAAc,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,GAApD,CAAL,CAA6DO,OAA7D,CAAqE,cAArE,EAAqF,EAArF,CAAX;AACD;;AAED,UAAId,UAAU,CAACjD,QAAX,CAAoB,YAApB,CAAJ,EAAuC;AACrCiD,QAAAA,UAAU,GAAGA,UAAU,CAACc,OAAX,CAAmB,mBAAnB,EAAwC,EAAxC,CAAb;AACAD,QAAAA,OAAO,IAAIV,KAAK,CAAE,oBAAmB,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,KAAIP,UAAW,EAAxE,CAAL,CAAgFc,OAAhF,CAAwF,cAAxF,EAAwG,EAAxG,CAAX;AACD,OAHD,MAGO;AACLD,QAAAA,OAAO,IAAIV,KAAK,CAAE,GAAE,KAAK1E,eAAL,CAAqB8E,aAArB,CAAoC,SAAQP,UAAW,EAA3D,CAAhB;AACD;;AAEDY,MAAAA,GAAG,CAAC5E,IAAJ,CAAS6E,OAAT;AACD;;AAED,WAAOD,GAAG,CAAC1E,IAAJ,CAAS,EAAT,CAAP;AACD;;AAEDiF,EAAAA,iBAAiB,CAACnG,SAAD,EAAYoG,UAAZ,EAAwBnG,UAAxB,EAAoC;AAEnD,UAAMoG,UAAU,GAAG,EAAnB;;AAEA,SAAK,MAAMd,aAAX,IAA4BtF,UAA5B,EAAwC;AACtCoG,MAAAA,UAAU,CAACrF,IAAX,CAAiB,GAAE,KAAKP,eAAL,CAAqB2F,UAArB,CAAiC,OAAM,KAAK3F,eAAL,CAAqB8E,aAArB,CAAoC,EAA9F;AACD;;AAED,WAAQ,eAAc,KAAKtG,UAAL,CAAgBe,SAAhB,CAA2B,kBAAiBqG,UAAU,CAACnF,IAAX,CAAgB,IAAhB,CAAsB,GAAxF;AACD;;AAEDoF,EAAAA,EAAE,CAACC,MAAD,EAASvG,SAAT,EAAoBwG,UAApB,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACzDJ,IAAAA,MAAM,GAAGA,MAAM,IAAI,UAAnB;AACAI,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,SAAvB;AACAD,IAAAA,OAAO,GAAGA,OAAO,GAAI,WAAUA,OAAQ,EAAtB,GAA0B,EAA3C;AACAF,IAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,WAAQ,sCAAqCD,MAAO,IAAGC,UAAW,KAAIE,OAAQ,oBAAmBD,IAAK,yBAAwBE,QAAS,2BAA0BJ,MAAO,KAAxK;AACD;;AAEDK,EAAAA,kBAAkB,CAAC5G,SAAD,EAAYpB,OAAO,GAAG,EAAtB,EAA0B;AAC1C,WAAO,CACJ,YAAW,KAAKK,UAAL,CAAgBe,SAAhB,CAA2B,EADlC,EAELpB,OAAO,CAACiI,eAAR,GAA0B,mBAA1B,GAAgD,EAF3C,EAGLjI,OAAO,CAACsD,OAAR,GAAkB,UAAlB,GAA+B,EAH1B,EAILhB,IAJK,CAIA,EAJA,CAAP;AAKD;;AAED4F,EAAAA,WAAW,CAAC9G,SAAD,EAAY+G,KAAZ,EAAmBnI,OAAO,GAAG,EAA7B,EAAiCoI,KAAjC,EAAwC;AACjD,UAAMrC,KAAK,GAAG,KAAK1F,UAAL,CAAgBe,SAAhB,CAAd;AACA,QAAIiH,WAAW,GAAG,KAAKC,kBAAL,CAAwBH,KAAxB,EAA+B,IAA/B,EAAqCC,KAArC,EAA4CpI,OAA5C,CAAlB;AACA,UAAMuI,KAAK,GAAGvI,OAAO,CAACuI,KAAR,GAAiB,UAAS,KAAKjI,MAAL,CAAYN,OAAO,CAACuI,KAApB,CAA2B,EAArD,GAAyD,EAAvE;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,oBAAoB,GAAG,EAA3B;;AAEA,QAAIJ,WAAJ,EAAiB;AACfA,MAAAA,WAAW,GAAI,UAASA,WAAY,EAApC;AACD;;AAED,QAAIrI,OAAO,CAACuI,KAAZ,EAAmB;AACjB,UAAI,CAACH,KAAL,EAAY;AACV,cAAM,IAAI1D,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,YAAM5B,GAAG,GAAG4F,MAAM,CAACvI,MAAP,CAAciI,KAAK,CAACI,WAApB,EAAiC5F,GAAjC,CAAqC+F,EAAE,IAAI,KAAK9G,eAAL,CAAqB8G,EAAE,CAAC9F,KAAxB,CAA3C,EAA2EP,IAA3E,CAAgF,GAAhF,CAAZ;AAEAkG,MAAAA,WAAW,GAAGJ,KAAK,CAACQ,oBAAN,CAA2BxF,MAA3B,GAAoC,CAApC,GAAyC,IAAGN,GAAI,GAAhD,GAAqDA,GAAnE;AACA2F,MAAAA,oBAAoB,GAAG3F,GAAvB;AAEA,aAAQ,eAAciD,KAAM,UAASyC,WAAY,eAAcC,oBAAqB,SAAQ1C,KAAM,GAAEsC,WAAY,GAAEE,KAAM,GAAxH;AACD;;AACD,WAAQ,eAAcxC,KAAM,GAAEsC,WAAY,EAA1C;AACD;;AAEDQ,EAAAA,gBAAgB,CAACzH,SAAD,EAAY;AAC1B,QAAI0H,UAAU,GAAG,EAAjB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAI,OAAO3H,SAAP,KAAqB,QAAzB,EAAmC;AACjC0H,MAAAA,UAAU,GAAG,kBAAb;AACAC,MAAAA,WAAW,GAAI,gDAA+C3H,SAAS,CAACR,MAAO,GAA/E;AACAQ,MAAAA,SAAS,GAAGA,SAAS,CAACA,SAAtB;AACD,KAPyB,CAS1B;;;AACA,WAAO,0GACL,8GADK,GAEJ,yEAAwE0H,UAAW,GAF/E,GAGL,iFAHK,GAIJ,oCAAmC1H,SAAU,IAAG2H,WAAY,GAJxD,GAKL,mGALF;AAMD;;AAEDC,EAAAA,oBAAoB,CAAC5H,SAAD,EAAY;AAC9B;AACA,WAAO,CACL,mDADK,EAEL,0CAFK,EAGL,sCAHK,EAIL,kCAJK,EAKL,gCALK,EAML,4BANK,EAOL,sCAPK,EAQL,kCARK,EASL,2CATK,EAUL,2CAVK,EAWJ,qBAAoBA,SAAU,IAX1B,EAYLkB,IAZK,CAYA,GAZA,CAAP;AAaD;;AAED2G,EAAAA,gBAAgB,CAAC7H,SAAD,EAAY8H,qBAAZ,EAAmC;AACjD,QAAIC,SAAS,GAAGD,qBAAhB;;AAEA,QAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,MAAAA,SAAS,GAAG/J,KAAK,CAACgK,UAAN,CAAkB,GAAEhI,SAAU,IAAG8H,qBAAqB,CAAC5G,IAAtB,CAA2B,GAA3B,CAAgC,EAAjE,CAAZ;AACD;;AAED,WAAQ,wBAAuB,KAAK+G,gBAAL,CAAsBF,SAAtB,CAAiC,EAAhE;AACD;;AAEDG,EAAAA,iBAAiB,CAACtJ,OAAD,EAAU;AACzB,QAAIuJ,QAAQ,GAAG,EAAf;AACA;;AACA,QAAIvJ,OAAO,CAACuI,KAAR,IAAiB,IAArB,EAA2B;AACzBgB,MAAAA,QAAQ,IAAI,YAAY,KAAKjJ,MAAL,CAAYN,OAAO,CAACuI,KAApB,CAAxB;AACD;;AACD,QAAIvI,OAAO,CAACwJ,MAAR,IAAkB,IAAtB,EAA4B;AAC1BD,MAAAA,QAAQ,IAAI,aAAa,KAAKjJ,MAAL,CAAYN,OAAO,CAACwJ,MAApB,CAAzB;AACD;AACD;;;AAEA,WAAOD,QAAP;AACD;;AAEDtD,EAAAA,cAAc,CAAChD,SAAD,EAAYjD,OAAZ,EAAqB;AACjC,QAAI,CAACN,CAAC,CAAC+J,aAAF,CAAgBxG,SAAhB,CAAL,EAAiC;AAC/BA,MAAAA,SAAS,GAAG;AACVkD,QAAAA,IAAI,EAAElD;AADI,OAAZ;AAGD;;AAED,QAAIkD,IAAJ;;AACA,QACElD,SAAS,CAACkD,IAAV,YAA0B5G,SAAS,CAACiH,IAApC,IACAvD,SAAS,CAACkD,IAAV,YAA0B5G,SAAS,CAACmK,KAApC,IAA6CzG,SAAS,CAACkD,IAAV,CAAeA,IAAf,YAA+B5G,SAAS,CAACiH,IAFxF,EAGE;AACA,YAAMmD,QAAQ,GAAG1G,SAAS,CAACkD,IAAV,CAAeA,IAAf,IAAuBlD,SAAS,CAACkD,IAAlD;AACA,UAAIhG,MAAM,GAAG8C,SAAS,CAAC9C,MAAvB;;AAEA,UAAIwJ,QAAQ,CAACxJ,MAAT,IAAmB,CAAC8C,SAAS,CAAC9C,MAAlC,EAA0C;AACxCA,QAAAA,MAAM,GAAGwJ,QAAQ,CAACxJ,MAAlB;AACD;;AAED,UAAIyJ,KAAK,CAACC,OAAN,CAAc1J,MAAd,KAAyBA,MAAM,CAACiD,MAAP,GAAgB,CAA7C,EAAgD;AAC9C+C,QAAAA,IAAI,GAAI,QAAOhG,MAAM,CAACyC,GAAP,CAAW0C,KAAK,IAAI,KAAKhF,MAAL,CAAYgF,KAAZ,CAApB,EAAwChD,IAAxC,CAA6C,IAA7C,CAAmD,GAAlE;;AAEA,YAAIW,SAAS,CAACkD,IAAV,YAA0B5G,SAAS,CAACmK,KAAxC,EAA+C;AAC7CvD,UAAAA,IAAI,IAAI,IAAR;AACD;AAEF,OAPD,MAOO;AACL,cAAM,IAAIzB,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;AAED,QAAI,CAACyB,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGlD,SAAS,CAACkD,IAAjB;AACD;;AAED,QAAIa,GAAG,GAAGb,IAAI,CAAC2D,QAAL,EAAV;;AAEA,QAAIpB,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCnE,IAAhC,CAAqC5C,SAArC,EAAgD,WAAhD,KAAgE,CAACA,SAAS,CAACgH,SAA/E,EAA0F;AACxFjD,MAAAA,GAAG,IAAI,WAAP;AACD;;AAED,QAAI/D,SAAS,CAACiH,aAAd,EAA6B;AAC3B,UAAIjH,SAAS,CAACkH,qBAAd,EAAqC;AACnCnD,QAAAA,GAAG,IAAI,mCAAP;AACD,OAFD,MAEO;AACLA,QAAAA,GAAG,IAAI,SAAP;AACD;AACF;;AAED,QAAI5H,KAAK,CAACgL,qBAAN,CAA4BnH,SAAS,CAACoH,YAAtC,CAAJ,EAAyD;AACvDrD,MAAAA,GAAG,IAAK,YAAW,KAAK1G,MAAL,CAAY2C,SAAS,CAACoH,YAAtB,EAAoCpH,SAApC,CAA+C,EAAlE;AACD;;AAED,QAAIA,SAAS,CAACqH,MAAV,KAAqB,IAAzB,EAA+B;AAC7BtD,MAAAA,GAAG,IAAI,SAAP;AACD;;AAED,QAAI/D,SAAS,CAACsH,UAAd,EAA0B;AACxBvD,MAAAA,GAAG,IAAI,cAAP;AACD;;AAED,QAAI/D,SAAS,CAACuH,UAAd,EAA0B;AACxB,UAAIC,eAAe,GAAG,KAAKpK,UAAL,CAAgB4C,SAAS,CAACuH,UAAV,CAAqBpC,KAArC,CAAtB;AACA,UAAIxH,MAAJ;;AAEA,UAAIZ,OAAO,CAACY,MAAZ,EAAoB;AAClBA,QAAAA,MAAM,GAAGZ,OAAO,CAACY,MAAjB;AACD,OAFD,MAEO,IACL,CAAC,CAACqC,SAAS,CAACuH,UAAV,CAAqBpC,KAAtB,IAA+B,OAAOnF,SAAS,CAACuH,UAAV,CAAqBpC,KAA5B,IAAqC,QAArE,KACGpI,OAAO,CAAC+F,KADX,IAEG/F,OAAO,CAAC+F,KAAR,CAAcnF,MAHZ,EAIL;AACAA,QAAAA,MAAM,GAAGZ,OAAO,CAAC+F,KAAR,CAAcnF,MAAvB;AACD;;AAED,UAAIA,MAAJ,EAAY;AACV6J,QAAAA,eAAe,GAAG,KAAKpK,UAAL,CAAgB,KAAKqK,SAAL,CAAe;AAC/CtJ,UAAAA,SAAS,EAAEqJ,eADoC;AAE/CE,UAAAA,OAAO,EAAE/J;AAFsC,SAAf,CAAhB,CAAlB;AAID;;AAED,UAAIgK,aAAJ;;AAEA,UAAI3H,SAAS,CAACuH,UAAV,CAAqBtH,GAAzB,EAA8B;AAC5B0H,QAAAA,aAAa,GAAG,KAAKvB,gBAAL,CAAsBpG,SAAS,CAACuH,UAAV,CAAqBtH,GAA3C,CAAhB;AACD,OAFD,MAEO;AACL0H,QAAAA,aAAa,GAAG,KAAK/I,eAAL,CAAqB,IAArB,CAAhB;AACD;;AAEDmF,MAAAA,GAAG,IAAK,eAAcyD,eAAgB,KAAIG,aAAc,GAAxD;;AAEA,UAAI3H,SAAS,CAAC4H,QAAd,EAAwB;AACtB7D,QAAAA,GAAG,IAAK,cAAa/D,SAAS,CAAC4H,QAAV,CAAmBC,WAAnB,EAAiC,EAAtD;AACD;;AAED,UAAI7H,SAAS,CAAC8H,QAAd,EAAwB;AACtB/D,QAAAA,GAAG,IAAK,cAAa/D,SAAS,CAAC8H,QAAV,CAAmBD,WAAnB,EAAiC,EAAtD;AACD;;AAED,UAAI7H,SAAS,CAACuH,UAAV,CAAqBQ,UAAzB,EAAqC;AACnChE,QAAAA,GAAG,IAAK,IAAG/D,SAAS,CAACuH,UAAV,CAAqBQ,UAArB,CAAgClB,QAAhC,CAAyC,IAAzC,CAA+C,EAA1D;AACD;AACF;;AAED,QAAI7G,SAAS,CAACvB,OAAV,IAAqB,OAAOuB,SAAS,CAACvB,OAAjB,KAA6B,QAAtD,EAAgE;AAC9D,UAAI1B,OAAO,KAAKA,OAAO,CAACkG,OAAR,KAAoB,WAApB,IAAmClG,OAAO,CAACkG,OAAR,KAAoB,cAA5D,CAAX,EAAwF;AACtF,cAAMtE,UAAU,GAAG,KAAKC,eAAL,CAAqB7B,OAAO,CAACkD,GAA7B,CAAnB;AACA,cAAMlB,kBAAkB,GAAG,KAAK1B,MAAL,CAAY2C,SAAS,CAACvB,OAAtB,CAA3B;AACAsF,QAAAA,GAAG,IAAK,uBAAsB,KAAK3G,UAAL,CAAgBL,OAAO,CAAC+F,KAAxB,CAA+B,IAAGnE,UAAW,OAAMI,kBAAmB,EAApG;AACD,OAJD,MAIO;AACL;AACA;AACAgF,QAAAA,GAAG,IAAK,YAAW/D,SAAS,CAACvB,OAAQ,EAArC;AACD;AACF;;AAED,WAAOsF,GAAP;AACD;;AAEDiE,EAAAA,qBAAqB,CAACjL,OAAD,EAAU;AAC7B,WAAOA,OAAO,CAACgL,UAAR,CAAmBlB,QAAnB,CAA4B,IAA5B,CAAP;AACD;;AAEDoB,EAAAA,kBAAkB,CAACzI,OAAD,EAAU0D,IAAV,EAAgB;AAChC,QAAIgF,cAAc,GAAG,KAArB;;AAEA,QAAI1I,OAAJ,EAAa;AACX0I,MAAAA,cAAc,GAAG1I,OAAO,CAACG,GAAR,CAAY8C,MAAM,IAAI,KAAK7D,eAAL,CAAqB6D,MAArB,CAAtB,EAAoDpD,IAApD,CAAyD,IAAzD,CAAjB;AACD;;AAED,WAAQ,mBAAkB6I,cAAe,IAAGhF,IAAK,EAAjD;AACD;;AAEDiF,EAAAA,gBAAgB,CAAC3I,OAAD,EAAU;AACxB,WAAO,KAAKyI,kBAAL,CAAwBzI,OAAxB,EAAiC,UAAjC,CAAP;AACD;;AAED4I,EAAAA,iBAAiB,CAAC5I,OAAD,EAAU;AACzB,WAAO,KAAKyI,kBAAL,CAAwBzI,OAAxB,EAAiC,WAAjC,CAAP;AACD;;AAED6I,EAAAA,eAAe,CAACjK,UAAD,EAAarB,OAAb,EAAsB;AACnC,UAAMuL,MAAM,GAAG,EAAf;;AAEA,SAAK,MAAMrI,GAAX,IAAkB7B,UAAlB,EAA8B;AAC5B,YAAM4B,SAAS,GAAG5B,UAAU,CAAC6B,GAAD,CAA5B;AACAqI,MAAAA,MAAM,CAACtI,SAAS,CAACJ,KAAV,IAAmBK,GAApB,CAAN,GAAiC,KAAK+C,cAAL,CAAoBhD,SAApB,EAA+B;AAAEC,QAAAA,GAAF;AAAO,WAAGlD;AAAV,OAA/B,CAAjC;AACD;;AAED,WAAOuL,MAAP;AACD;;AAEDC,EAAAA,aAAa,CAACpK,SAAD,EAAYqK,WAAZ,EAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,YAAhD,EAA8DC,cAA9D,EAA8EC,YAA9E,EAA4F;AACvG,UAAMC,gBAAgB,GAAG,KAAKC,sBAAL,CAA4BN,SAA5B,CAAzB;AACA,UAAMO,SAAS,GAAG,KAAKC,sBAAL,CAA4BP,UAA5B,CAAlB;AACA,UAAMQ,eAAe,GAAG,KAAKC,aAAL,CAAmBN,YAAnB,CAAxB;;AACA,UAAMO,SAAS,GAAG,KAAKC,wBAAL,CAA8BT,cAA9B,CAAlB;;AAEA,WAAQ,UAAS,KAAKU,4BAAL,CAAkCb,SAAlC,CAA6C,WAAU,KAAK7J,eAAL,CAAqB4J,WAArB,CAAkC,IAAGM,gBAAiB,IAC5HE,SAAU,OAAM,KAAK5L,UAAL,CAAgBe,SAAhB,CAA2B,GAAE+K,eAAe,GAAI,IAAGA,eAAgB,EAAvB,GAA2B,EAAG,sBAAqBP,YAAa,IAAGS,SAAU,IAD3I;AAED;;AAEDG,EAAAA,WAAW,CAACpL,SAAD,EAAYqK,WAAZ,EAAyB;AAClC,WAAQ,gBAAe,KAAK5J,eAAL,CAAqB4J,WAArB,CAAkC,OAAM,KAAKpL,UAAL,CAAgBe,SAAhB,CAA2B,YAA1F;AACD;;AAEDqL,EAAAA,aAAa,CAACrL,SAAD,EAAYsL,cAAZ,EAA4BC,cAA5B,EAA4C;AACvD,WAAQ,iBAAgB,KAAK9K,eAAL,CAAqB6K,cAArB,CAAqC,OAAM,KAAKrM,UAAL,CAAgBe,SAAhB,CAA2B,cAAa,KAAKS,eAAL,CAAqB8K,cAArB,CAAqC,GAAhJ;AACD;;AAEDC,EAAAA,cAAc,CAAChB,YAAD,EAAeiB,MAAf,EAAuBC,UAAvB,EAAmC/E,QAAnC,EAA6CF,IAA7C,EAAmDiE,YAAnD,EAAiE9L,OAAjE,EAA0E;AACtF,QAAI,CAAC4L,YAAD,IAAiB,CAACkB,UAAlB,IAAgC,CAAC/E,QAAjC,IAA6C,CAACF,IAAlD,EAAwD,MAAM,IAAInD,KAAJ,CAAU,mGAAV,CAAN;;AAExD,UAAM2H,SAAS,GAAG,KAAKC,wBAAL,CAA8BO,MAA9B,CAAlB;;AACA,UAAME,YAAY,GAAG/M,OAAO,IAAIA,OAAO,CAACgN,SAAnB,GAA+B,KAAKC,2BAAL,CAAiCjN,OAAO,CAACgN,SAAzC,CAA/B,GAAqF,EAA1G;AACA,UAAME,oBAAoB,GAAG,KAAKd,aAAL,CAAmBN,YAAnB,CAA7B;AAEA,UAAMqB,SAAS,GAAGnN,OAAO,IAAIA,OAAO,CAACoN,KAAnB,GAA2B,4BAA3B,GAA0D,iBAA5E;AAEA,WAAQ,GAAED,SAAU,IAAGvB,YAAa,IAAGS,SAAU,aAAYS,UAAW,cAAaC,YAAa,UAASlF,IAAK,0BAAyBE,QAAS,IAAGmF,oBAAqB,GAA1K;AACD;;AAEDG,EAAAA,YAAY,CAACzB,YAAD,EAAeiB,MAAf,EAAuB;AACjC,QAAI,CAACjB,YAAL,EAAmB,MAAM,IAAIlH,KAAJ,CAAU,uBAAV,CAAN,CADc,CAEjC;;AACA,UAAM2H,SAAS,GAAG,KAAKC,wBAAL,CAA8BO,MAA9B,CAAlB;;AACA,WAAQ,iBAAgBjB,YAAa,IAAGS,SAAU,aAAlD;AACD;;AAEDiB,EAAAA,cAAc,CAACC,eAAD,EAAkBV,MAAlB,EAA0BW,eAA1B,EAA2C;AACvD,UAAMnB,SAAS,GAAG,KAAKC,wBAAL,CAA8BO,MAA9B,CAAlB;;AACA,WAAQ,kBAAiBU,eAAgB,IAAGlB,SAAU,eAAcmB,eAAgB,GAApF;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,GAAD,EAAM;AACpB,WAAO,KAAK7L,eAAL,CAAqBzC,KAAK,CAACuO,WAAN,CAAkB,KAAKrN,MAAL,CAAYoN,GAAZ,CAAlB,EAAoC,GAApC,CAArB,CAAP;AACD;;AAEDpB,EAAAA,wBAAwB,CAACO,MAAD,EAAS;AAC/B,QAAIA,MAAM,KAAKe,SAAX,IAAwB,CAAChE,KAAK,CAACC,OAAN,CAAcgD,MAAd,CAA7B,EAAoD;AAClD,YAAM,IAAInI,KAAJ,CAAU,uGAAV,CAAN;AACD;;AAED,UAAM2H,SAAS,GAAG,EAAlB;AACAQ,IAAAA,MAAM,CAACgB,OAAP,CAAeC,QAAQ,IAAI;AACzB,YAAMC,QAAQ,GAAG,EAAjB;;AACA,UAAID,QAAQ,CAAC3H,IAAb,EAAmB;AACjB,YAAI2H,QAAQ,CAACE,SAAb,EAAwB;AAAED,UAAAA,QAAQ,CAAC3L,IAAT,CAAc0L,QAAQ,CAACE,SAAvB;AAAoC;;AAC9D,YAAIF,QAAQ,CAACG,IAAb,EAAmB;AAAEF,UAAAA,QAAQ,CAAC3L,IAAT,CAAc0L,QAAQ,CAACG,IAAvB;AAA+B;;AACpDF,QAAAA,QAAQ,CAAC3L,IAAT,CAAc0L,QAAQ,CAAC3H,IAAvB;AACD,OAJD,MAIO;AACL,cAAM,IAAIzB,KAAJ,CAAU,4DAAV,CAAN;AACD;;AAED,YAAMwJ,MAAM,GAAGH,QAAQ,CAACzL,IAAT,CAAc,GAAd,CAAf;AACA,UAAI4L,MAAJ,EAAY7B,SAAS,CAACjK,IAAV,CAAe8L,MAAf;AAEb,KAbD;AAeA,WAAO7B,SAAS,CAAC/J,IAAV,CAAe,IAAf,CAAP;AACD;;AAED2K,EAAAA,2BAA2B,CAACD,SAAD,EAAY;AACrC,QAAI,CAACpD,KAAK,CAACC,OAAN,CAAcmD,SAAd,CAAL,EAA+B;AAC7B,YAAM,IAAItI,KAAJ,CAAU,kEAAV,CAAN;AACD;;AACD,UAAMyJ,mBAAmB,GAAG,EAA5B;AACAnB,IAAAA,SAAS,CAACa,OAAV,CAAkBO,QAAQ,IAAI;AAC5B,UAAI,CAACA,QAAQ,CAACH,IAAV,IAAkB,CAACG,QAAQ,CAACjI,IAAhC,EAAsC;AACpC,cAAM,IAAIzB,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,UAAI2J,kBAAkB,GAAI,WAAUD,QAAQ,CAACH,IAAK,IAAGG,QAAQ,CAACjI,IAAK,EAAnE;;AACA,UAAIiI,QAAQ,CAACE,OAAb,EAAsB;AACpBD,QAAAA,kBAAkB,IAAK,OAAMD,QAAQ,CAACE,OAAQ,EAA9C;AACD;;AACDD,MAAAA,kBAAkB,IAAI,GAAtB;AACAF,MAAAA,mBAAmB,CAAC/L,IAApB,CAAyBiM,kBAAzB;AACD,KAVD;AAWA,WAAOF,mBAAmB,CAAC7L,IAApB,CAAyB,GAAzB,CAAP;AACD;;AAED8J,EAAAA,aAAa,CAACpM,OAAD,EAAU;AACrB,WAAOA,OAAO,KAAK4N,SAAZ,IAAyBlO,CAAC,CAAC6O,OAAF,CAAUvO,OAAV,CAAzB,GACL,EADK,GACAA,OAAO,CAACsC,IAAR,CAAa,GAAb,CADP;AAED;;AAED0J,EAAAA,sBAAsB,CAACwC,cAAD,EAAiB;AACrC,UAAMC,aAAa,GAAG;AACpB,eAAS,OADW;AAEpB,gBAAU,QAFU;AAGpB,oBAAc,YAHM;AAIpB,0BAAoB;AAJA,KAAtB;;AAOA,QAAI,CAACA,aAAa,CAACD,cAAD,CAAlB,EAAoC;AAClC,YAAM,IAAI9J,KAAJ,CAAW,oCAAmC8J,cAAe,EAA7D,CAAN;AACD;;AAED,WAAOC,aAAa,CAACD,cAAD,CAApB;AACD;;AAEDjC,EAAAA,4BAA4B,CAACiC,cAAD,EAAiB;AAC3C,WAAOA,cAAc,KAAK,kBAAnB,GAAwC,aAAxC,GAAwD,EAA/D;AACD;;AAEDtC,EAAAA,sBAAsB,CAACP,UAAD,EAAa;AACjC,QAAIjM,CAAC,CAAC6O,OAAF,CAAU5C,UAAV,CAAJ,EAA2B;AACzB,YAAM,IAAIjH,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,WAAOhF,CAAC,CAACkD,GAAF,CAAM+I,UAAN,EAAkB,CAAC+C,SAAD,EAAYC,OAAZ,KAAwB;AAC/C,YAAMC,SAAS,GAAG;AAChB,kBAAU,QADM;AAEhB,kBAAU,QAFM;AAGhB,kBAAU,QAHM;AAIhB,oBAAY;AAJI,OAAlB;;AAOA,UAAI,CAACA,SAAS,CAACF,SAAD,CAAd,EAA2B;AACzB,cAAM,IAAIhK,KAAJ,CAAW,kDAAiDiK,OAAQ,EAApE,CAAN;AACD;;AAED,UAAI1C,SAAS,GAAG2C,SAAS,CAACF,SAAD,CAAzB;;AACA,UAAIzC,SAAS,KAAK,QAAlB,EAA4B;AAC1B,YAAIrC,KAAK,CAACC,OAAN,CAAc6E,SAAd,KAA4BA,SAAS,CAACtL,MAAV,GAAmB,CAAnD,EAAsD;AACpD6I,UAAAA,SAAS,IAAK,OAAMyC,SAAS,CAACpM,IAAV,CAAe,IAAf,CAAqB,EAAzC;AACD;AACF;;AAED,aAAO2J,SAAP;AACD,KApBM,EAoBJ3J,IApBI,CAoBC,MApBD,CAAP;AAqBD;;AAEDgF,EAAAA,UAAU,CAAClG,SAAD,EAAYO,IAAZ,EAAkB3B,OAAlB,EAA2B;AACnCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAM6O,YAAY,GAAG,KAAKvI,mBAAL,CAAyBlF,SAAzB,EAAoCpB,OAApC,CAArB;AACA,QAAI8O,QAAQ,GAAG1P,KAAK,CAAC2P,QAAN,CAAe3P,KAAK,CAAC4P,gBAAN,CAAuBH,YAAY,CAACzN,SAApC,EAA+CO,IAA/C,CAAf,EAAqE,GAArE,CAAf,CAJmC,CAMnC;;AACA,QAAI3B,OAAO,CAACY,MAAR,KAAmB,KAAnB,IAA4BiO,YAAY,CAACjO,MAA7C,EAAqD;AACnDkO,MAAAA,QAAQ,GAAG,KAAKjN,eAAL,CAAqBgN,YAAY,CAACjO,MAAlC,IAA4CiO,YAAY,CAACI,SAAzD,GAAqEH,QAAhF;AACD;;AAED,WAAOA,QAAP;AACD;;AAEDI,EAAAA,WAAW,CAAC9N,SAAD,EAAY+N,QAAZ,EAAsBnP,OAAtB,EAA+B;AACxC,QAAI8O,QAAQ,GAAG,EAAf;AACA,UAAMD,YAAY,GAAG,KAAKvI,mBAAL,CAAyBlF,SAAzB,EAAoCpB,OAApC,CAArB;;AAEA,QAAI6O,YAAY,CAACzN,SAAb,IAA0B+N,QAA9B,EAAwC;AACtCL,MAAAA,QAAQ,GAAI,kBAAiB,KAAKxH,UAAL,CAAgBuH,YAAY,CAACzN,SAA7B,EAAwC+N,QAAxC,EAAkD;AAAEvO,QAAAA,MAAM,EAAE;AAAV,OAAlD,EAAqEsG,OAArE,CAA6E,IAA7E,EAAmF,GAAnF,CAAwF,EAArH;AACD;;AAED,WAAO,yGACL,wCADK,GAEL,2DAFK,GAGJ,sBAAqB2H,YAAY,CAACjO,MAAO,IAAGkO,QAAS,aAHxD;AAID;;AAEDrI,EAAAA,MAAM,CAACrF,SAAD,EAAYO,IAAZ,EAAkBO,QAAlB,EAA4BlC,OAA5B,EAAqC;AACzC,UAAM8O,QAAQ,GAAG,KAAKxH,UAAL,CAAgBlG,SAAhB,EAA2BO,IAA3B,EAAiC3B,OAAjC,CAAjB;AACA,QAAIG,MAAJ;;AAEA,QAAI+B,QAAQ,CAAC/B,MAAb,EAAqB;AACnBA,MAAAA,MAAM,GAAI,QAAO+B,QAAQ,CAAC/B,MAAT,CAAgByC,GAAhB,CAAoB0C,KAAK,IAAI,KAAKhF,MAAL,CAAYgF,KAAZ,CAA7B,EAAiDhD,IAAjD,CAAsD,IAAtD,CAA4D,GAA7E;AACD,KAFD,MAEO;AACLnC,MAAAA,MAAM,GAAG+B,QAAQ,CAAC4H,QAAT,GAAoB1C,KAApB,CAA0B,aAA1B,EAAyC,CAAzC,CAAT;AACD;;AAED,QAAIJ,GAAG,GAAI,eAAc8H,QAAS,OAAM3O,MAAO,GAA/C;;AACA,QAAI,CAAC,CAACH,OAAF,IAAaA,OAAO,CAACoN,KAAR,KAAkB,IAAnC,EAAyC;AACvCpG,MAAAA,GAAG,GAAG,KAAKoI,UAAL,CAAgBhO,SAAhB,EAA2BO,IAA3B,IAAmCqF,GAAzC;AACD;;AACD,WAAOA,GAAP;AACD;;AAEDqI,EAAAA,SAAS,CAACjO,SAAD,EAAYO,IAAZ,EAAkB2D,KAAlB,EAAyBtF,OAAzB,EAAkC;AACzC,UAAM8O,QAAQ,GAAG,KAAKxH,UAAL,CAAgBlG,SAAhB,EAA2BO,IAA3B,CAAjB;AACA,QAAIqF,GAAG,GAAI,cAAa8H,QAAS,aAAjC;;AAEA,QAAIrP,MAAM,CAACsB,GAAP,CAAW,KAAKuO,SAAL,CAAetP,OAAf,CAAuBa,eAAlC,EAAmD,OAAnD,CAAJ,EAAiE;AAC/DmG,MAAAA,GAAG,IAAI,gBAAP;AACD;;AACDA,IAAAA,GAAG,IAAI,KAAK1G,MAAL,CAAYgF,KAAZ,CAAP;;AAEA,QAAItF,OAAO,CAACuP,MAAZ,EAAoB;AAClBvI,MAAAA,GAAG,IAAK,WAAU,KAAK1G,MAAL,CAAYN,OAAO,CAACuP,MAApB,CAA4B,EAA9C;AACD,KAFD,MAEO,IAAIvP,OAAO,CAACwP,KAAZ,EAAmB;AACxBxI,MAAAA,GAAG,IAAK,UAAS,KAAK1G,MAAL,CAAYN,OAAO,CAACwP,KAApB,CAA2B,EAA5C;AACD;;AAED,WAAOxI,GAAP;AACD;;AAEDoI,EAAAA,UAAU,CAAChO,SAAD,EAAYO,IAAZ,EAAkBmN,QAAlB,EAA4B;AACpCA,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKxH,UAAL,CAAgBlG,SAAhB,EAA2BO,IAA3B,CAAvB;AACA,WAAQ,uBAAsBmN,QAAS,IAAvC;AACD;;AAEDW,EAAAA,SAAS,CAACC,IAAD,EAAO;AACdA,IAAAA,IAAI,GAAGA,IAAI,CAACxI,OAAL,CAAa,IAAb,EAAmB,EAAnB,EAAuBA,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CAAP;AACA,QAAIyI,OAAO,GAAGD,IAAI,CAACtI,KAAL,CAAW,+CAAX,CAAd;;AAEA,QAAIuI,OAAO,CAACvM,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAO,EAAP;AACD;;AAEDuM,IAAAA,OAAO,GAAGA,OAAO,CAAC/M,GAAR,CAAYgN,CAAC,IAAIA,CAAC,CAAC1I,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBA,OAArB,CAA6B,IAA7B,EAAmC,EAAnC,EAAuCA,OAAvC,CAA+C,UAA/C,EAA2D,EAA3D,CAAjB,CAAV;AAEA,WAAOyI,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAP;AACD;;AAED1N,EAAAA,eAAe,CAACf,SAAD,EAAYO,IAAZ,EAAkBO,QAAlB,EAA4B;AACzC,QAAIA,QAAQ,CAACiB,QAAT,CAAkB,aAAlB,CAAJ,EAAsC;AACpCjB,MAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,aAAjB,EAAgC,EAAhC,CAAX;AACD;;AAED,QAAIhF,QAAQ,CAACiB,QAAT,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,UAAIjB,QAAQ,CAACiB,QAAT,CAAkB,QAAlB,CAAJ,EAAiC;AAC/BjB,QAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,QAAjB,EAA2B,WAA3B,CAAX;AACAhF,QAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,QAAjB,EAA2B,EAA3B,CAAX;AACD,OAHD,MAGO,IAAIhF,QAAQ,CAACiB,QAAT,CAAkB,UAAlB,CAAJ,EAAmC;AACxCjB,QAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,QAAjB,EAA2B,aAA3B,CAAX;AACAhF,QAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAX;AACD,OAHM,MAGA;AACLhF,QAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAX;AACD;;AACDhF,MAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAX;AACD;;AAED,QAAIhF,QAAQ,CAACmF,UAAT,CAAoB,OAApB,CAAJ,EAAkC;AAChCnF,MAAAA,QAAQ,GAAGA,QAAQ,CAACgF,OAAT,CAAiB,aAAjB,EAAgC,KAAKI,UAAL,CAAgBlG,SAAhB,EAA2BO,IAA3B,CAAhC,CAAX;AACD;;AAED,WAAOO,QAAP;AACD;AAED;;;;;;;;;AAOA4N,EAAAA,mBAAmB,CAAC1O,SAAD,EAAY;AAC7B,WAAO,+HACJ,iEAAgEA,SAAU,4CAD7E;AAED;AAED;;;;;;;AAKA2O,EAAAA,mCAAmC,GAAG;AACpC,WAAO,YACL,kDADK,GAEL,6CAFK,GAGL,+CAHK,GAIL,8BAJK,GAKL,kCALK,GAML,oCANK,GAOL,iCAPK,GAQL,+CARK,GASL,iDATK,GAUL,2CAVK,GAWL,4CAXK,GAYL,kDAZK,GAaL,kDAbK,GAcL,8CAdK,GAeL,yDAfK,GAgBL,8CAhBF;AAiBD;AAED;;;;;;;;;;;AASAC,EAAAA,4BAA4B,CAAC5O,SAAD,EAAY6O,WAAZ,EAAyBC,UAAzB,EAAqC;AAC/D,WAAQ,GAAE,KAAKH,mCAAL,EACT,8DAA6D3O,SAAU,IACtE6O,WAAW,GAAI,4BAA2BA,WAAY,GAA3C,GAAgD,EAC5D,GAAEC,UAAU,GAAI,2BAA0BA,UAAW,GAAzC,GAA8C,EAAG,EAH9D;AAID;;AAEDC,EAAAA,2BAA2B,CAACpK,KAAD,EAAQqK,UAAR,EAAoB;AAC7C,UAAMhP,SAAS,GAAG2E,KAAK,CAAC3E,SAAN,IAAmB2E,KAArC;AACA,UAAMnF,MAAM,GAAGmF,KAAK,CAACnF,MAArB;AACA,WAAQ,GAAE,KAAKmP,mCAAL,EACT,4DAA2D3O,SAAU,6BAA4BgP,UAAW,IAC3GxP,MAAM,GAAI,2BAA0BA,MAAO,GAArC,GAA0C,EAAG,EAFrD;AAGD;AAED;;;;;;;;;;AAQAyP,EAAAA,mBAAmB,CAACjP,SAAD,EAAYkP,UAAZ,EAAwB;AACzC,WAAQ,eAAc,KAAKjQ,UAAL,CAAgBe,SAAhB,CAA2B,oBAAmB,KAAKS,eAAL,CAAqByO,UAArB,CAAiC,GAArG;AACD;;AA53ByD;;AA+3B5DC,MAAM,CAACC,OAAP,GAAiB7Q,sBAAjB","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && (options.context === 'addColumn' || options.context === 'changeColumn')) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}