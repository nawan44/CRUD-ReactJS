{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst QueryTypes = require('../../query-types');\n\nconst Op = require('../../operators');\n\nconst {\n  QueryInterface\n} = require('../abstract/query-interface');\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\n\n\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = {\n      raw: true,\n      ...(options || {})\n    };\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    } //Check if the current column is a primaryKey\n\n\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n  /**\n   * @override\n   */\n\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n    options = { ...options\n    };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    } // Lets combine unique keys and indexes into one\n\n\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n    const attributes = Object.keys(insertValues);\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mssql/query-interface.js"],"names":["_","require","Utils","QueryTypes","Op","QueryInterface","MSSqlQueryInterface","removeColumn","tableName","attributeName","options","raw","findConstraintSql","queryGenerator","getDefaultConstraintQuery","results0","sequelize","query","length","dropConstraintSql","dropConstraintQuery","name","findForeignKeySql","getForeignKeyQuery","results","dropForeignKeySql","dropForeignKeyQuery","constraint_name","primaryKeyConstraintSql","getPrimaryKeyConstraintQuery","result","constraintName","removeSql","removeColumnQuery","upsert","insertValues","updateValues","where","model","wheres","isWhereEmpty","push","indexes","Object","values","uniqueKeys","map","item","fields","concat","_indexes","filter","unique","attributes","keys","index","intersection","field","or","type","UPSERT","sql","upsertQuery","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"]},"metadata":{},"sourceType":"script"}