{"ast":null,"code":"'use strict';\n\nconst sequelizeErrors = require('../../errors');\n\nconst {\n  QueryInterface\n} = require('../abstract/query-interface');\n\nconst QueryTypes = require('../../query-types');\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\n\n\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), {\n      raw: true,\n      ...options\n    }); //Exclude primary key constraint\n\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), {\n        raw: true,\n        ...options\n      })));\n    }\n\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options\n    };\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * @override\n   */\n\n\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    });\n    const constraint = constraints[0];\n    let query;\n\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mysql/query-interface.js"],"names":["sequelizeErrors","require","QueryInterface","QueryTypes","MySQLQueryInterface","removeColumn","tableName","columnName","options","results","sequelize","query","queryGenerator","getForeignKeyQuery","schema","config","database","raw","length","constraint_name","Promise","all","map","constraint","dropForeignKeyQuery","removeColumnQuery","upsert","insertValues","updateValues","where","type","UPSERT","updateOnDuplicate","Object","keys","model","sql","insertQuery","rawAttributes","removeConstraint","constraintName","showConstraintsQuery","constraints","SHOWCONSTRAINTS","constraintType","UnknownConstraintError","message","table","removeIndexQuery","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"]},"metadata":{},"sourceType":"script"}