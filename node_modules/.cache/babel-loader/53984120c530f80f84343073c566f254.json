{"ast":null,"code":"'use strict';\n\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(`Naming collision between attribute '${association.as}'` + ` and association '${association.as}' on model ${association.source.name}` + '. To remedy this, change either foreignKey or as in your association definition');\n  }\n}\n\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  // FK constraints are opt-in: users must either set `foreignKeyConstraints`\n  // on the association, or request an `onDelete` or `onUpdate` behavior\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    // Find primary keys: composite keys not supported with this approach\n    const primaryKeys = Object.keys(source.primaryKeys).map(primaryKeyAttribute => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);\n\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      newAttribute.references = {\n        model: source.getTableName(),\n        key: key || primaryKeys[0]\n      };\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\n\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n/**\n * Mixin (inject) association methods to model prototype\n *\n * @private\n *\n * @param {object} association instance\n * @param {object} obj Model prototype\n * @param {Array} methods Method names to inject\n * @param {object} aliases Mapping between model and association method names\n *\n */\n\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  for (const method of methods) {\n    // don't override custom methods\n    if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n      const realMethod = aliases[method] || method;\n\n      obj[association.accessors[method]] = function () {\n        return association[realMethod](this, ...Array.from(arguments));\n      };\n    }\n  }\n}\n\nexports.mixinMethods = mixinMethods;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/associations/helpers.js"],"names":["checkNamingCollision","association","Object","prototype","hasOwnProperty","call","source","rawAttributes","as","Error","name","exports","addForeignKeyConstraints","newAttribute","target","options","key","foreignKeyConstraint","onDelete","onUpdate","primaryKeys","keys","map","primaryKeyAttribute","field","length","includes","references","model","getTableName","mixinMethods","obj","methods","aliases","method","accessors","realMethod","Array","from","arguments"],"mappings":"AAAA;;AAEA,SAASA,oBAAT,CAA8BC,WAA9B,EAA2C;AACzC,MAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,WAAW,CAACK,MAAZ,CAAmBC,aAAxD,EAAuEN,WAAW,CAACO,EAAnF,CAAJ,EAA4F;AAC1F,UAAM,IAAIC,KAAJ,CACH,uCAAsCR,WAAW,CAACO,EAAG,GAAtD,GACC,qBAAoBP,WAAW,CAACO,EAAG,cAAaP,WAAW,CAACK,MAAZ,CAAmBI,IAAK,EADzE,GAEA,iFAHI,CAAN;AAKD;AACF;;AACDC,OAAO,CAACX,oBAAR,GAA+BA,oBAA/B;;AAEA,SAASY,wBAAT,CAAkCC,YAAlC,EAAgDP,MAAhD,EAAwDQ,MAAxD,EAAgEC,OAAhE,EAAyEC,GAAzE,EAA8E;AAC5E;AACA;AAEA,MAAID,OAAO,CAACE,oBAAR,IAAgCF,OAAO,CAACG,QAAxC,IAAoDH,OAAO,CAACI,QAAhE,EAA0E;AACxE;AACA,UAAMC,WAAW,GAAGlB,MAAM,CAACmB,IAAP,CAAYf,MAAM,CAACc,WAAnB,EACjBE,GADiB,CACbC,mBAAmB,IAAIjB,MAAM,CAACC,aAAP,CAAqBgB,mBAArB,EAA0CC,KAA1C,IAAmDD,mBAD7D,CAApB;;AAGA,QAAIH,WAAW,CAACK,MAAZ,KAAuB,CAAvB,IAA4B,CAACL,WAAW,CAACM,QAAZ,CAAqBV,GAArB,CAAjC,EAA4D;AAC1DH,MAAAA,YAAY,CAACc,UAAb,GAA0B;AACxBC,QAAAA,KAAK,EAAEtB,MAAM,CAACuB,YAAP,EADiB;AAExBb,QAAAA,GAAG,EAAEA,GAAG,IAAII,WAAW,CAAC,CAAD;AAFC,OAA1B;AAKAP,MAAAA,YAAY,CAACK,QAAb,GAAwBH,OAAO,CAACG,QAAhC;AACAL,MAAAA,YAAY,CAACM,QAAb,GAAwBJ,OAAO,CAACI,QAAhC;AACD;AACF;AACF;;AACDR,OAAO,CAACC,wBAAR,GAAmCA,wBAAnC;AAEA;;;;;;;;;;;;AAWA,SAASkB,YAAT,CAAsB7B,WAAtB,EAAmC8B,GAAnC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0D;AACxDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,OAAK,MAAMC,MAAX,IAAqBF,OAArB,EAA8B;AAC5B;AACA,QAAI,CAAC9B,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC0B,GAArC,EAA0C9B,WAAW,CAACkC,SAAZ,CAAsBD,MAAtB,CAA1C,CAAL,EAA+E;AAC7E,YAAME,UAAU,GAAGH,OAAO,CAACC,MAAD,CAAP,IAAmBA,MAAtC;;AAEAH,MAAAA,GAAG,CAAC9B,WAAW,CAACkC,SAAZ,CAAsBD,MAAtB,CAAD,CAAH,GAAqC,YAAW;AAC9C,eAAOjC,WAAW,CAACmC,UAAD,CAAX,CAAwB,IAAxB,EAA8B,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAjC,CAAP;AACD,OAFD;AAGD;AACF;AACF;;AACD5B,OAAO,CAACmB,YAAR,GAAuBA,YAAvB","sourcesContent":["'use strict';\n\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(\n      `Naming collision between attribute '${association.as}'` +\n      ` and association '${association.as}' on model ${association.source.name}` +\n      '. To remedy this, change either foreignKey or as in your association definition'\n    );\n  }\n}\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  // FK constraints are opt-in: users must either set `foreignKeyConstraints`\n  // on the association, or request an `onDelete` or `onUpdate` behavior\n\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    // Find primary keys: composite keys not supported with this approach\n    const primaryKeys = Object.keys(source.primaryKeys)\n      .map(primaryKeyAttribute => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);\n\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      newAttribute.references = {\n        model: source.getTableName(),\n        key: key || primaryKeys[0]\n      };\n\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n\n/**\n * Mixin (inject) association methods to model prototype\n *\n * @private\n *\n * @param {object} association instance\n * @param {object} obj Model prototype\n * @param {Array} methods Method names to inject\n * @param {object} aliases Mapping between model and association method names\n *\n */\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  for (const method of methods) {\n    // don't override custom methods\n    if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n      const realMethod = aliases[method] || method;\n\n      obj[association.accessors[method]] = function() {\n        return association[realMethod](this, ...Array.from(arguments));\n      };\n    }\n  }\n}\nexports.mixinMethods = mixinMethods;\n"]},"metadata":{},"sourceType":"script"}