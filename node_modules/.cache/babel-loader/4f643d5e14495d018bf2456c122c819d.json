{"ast":null,"code":"'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\n\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n    return Utils.joinSQLFragments(['CREATE SCHEMA IF NOT EXISTS', this.quoteIdentifier(schema), options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`, options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`, ';']);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = ['\\'MYSQL\\'', '\\'INFORMATION_SCHEMA\\'', '\\'PERFORMANCE_SCHEMA\\''];\n\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n\n    return Utils.joinSQLFragments(['SELECT SCHEMA_NAME as schema_name', 'FROM INFORMATION_SCHEMA.SCHEMATA', `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`, ';']);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n\n    return `${query};`;\n  }\n\n}\n\nmodule.exports = MariaDBQueryGenerator;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mariadb/query-generator.js"],"names":["MySQLQueryGenerator","require","Utils","MariaDBQueryGenerator","createSchema","schema","options","charset","collate","joinSQLFragments","quoteIdentifier","escape","dropSchema","showSchemasQuery","schemasToSkip","skip","Array","isArray","length","schemaName","push","join","showTablesQuery","database","query","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,0BAAD,CAAnC;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,eAAD,CAArB;;AAEA,MAAME,qBAAN,SAAoCH,mBAApC,CAAwD;AACtDI,EAAAA,YAAY,CAACC,MAAD,EAASC,OAAT,EAAkB;AAC5BA,IAAAA,OAAO,GAAG;AACRC,MAAAA,OAAO,EAAE,IADD;AAERC,MAAAA,OAAO,EAAE,IAFD;AAGR,SAAGF;AAHK,KAAV;AAMA,WAAOJ,KAAK,CAACO,gBAAN,CAAuB,CAC5B,6BAD4B,EAE5B,KAAKC,eAAL,CAAqBL,MAArB,CAF4B,EAG5BC,OAAO,CAACC,OAAR,IAAoB,yBAAwB,KAAKI,MAAL,CAAYL,OAAO,CAACC,OAApB,CAA6B,EAH7C,EAI5BD,OAAO,CAACE,OAAR,IAAoB,mBAAkB,KAAKG,MAAL,CAAYL,OAAO,CAACE,OAApB,CAA6B,EAJvC,EAK5B,GAL4B,CAAvB,CAAP;AAOD;;AAEDI,EAAAA,UAAU,CAACP,MAAD,EAAS;AACjB,WAAQ,yBAAwB,KAAKK,eAAL,CAAqBL,MAArB,CAA6B,GAA7D;AACD;;AAEDQ,EAAAA,gBAAgB,CAACP,OAAD,EAAU;AACxB,UAAMQ,aAAa,GAAG,CACpB,WADoB,EAEpB,wBAFoB,EAGpB,wBAHoB,CAAtB;;AAKA,QAAIR,OAAO,CAACS,IAAR,IAAgBC,KAAK,CAACC,OAAN,CAAcX,OAAO,CAACS,IAAtB,CAAhB,IAA+CT,OAAO,CAACS,IAAR,CAAaG,MAAb,GAAsB,CAAzE,EAA4E;AAC1E,WAAK,MAAMC,UAAX,IAAyBb,OAAO,CAACS,IAAjC,EAAuC;AACrCD,QAAAA,aAAa,CAACM,IAAd,CAAmB,KAAKT,MAAL,CAAYQ,UAAZ,CAAnB;AACD;AACF;;AACD,WAAOjB,KAAK,CAACO,gBAAN,CAAuB,CAC5B,mCAD4B,EAE5B,kCAF4B,EAG3B,6BAA4BK,aAAa,CAACO,IAAd,CAAmB,IAAnB,CAAyB,GAH1B,EAI5B,GAJ4B,CAAvB,CAAP;AAMD;;AAEDC,EAAAA,eAAe,CAACC,QAAD,EAAW;AACxB,QAAIC,KAAK,GAAG,kGAAZ;;AACA,QAAID,QAAJ,EAAc;AACZC,MAAAA,KAAK,IAAK,uBAAsB,KAAKb,MAAL,CAAYY,QAAZ,CAAsB,EAAtD;AACD,KAFD,MAEO;AACLC,MAAAA,KAAK,IAAI,sFAAT;AACD;;AACD,WAAQ,GAAEA,KAAM,GAAhB;AACD;;AAhDqD;;AAmDxDC,MAAM,CAACC,OAAP,GAAiBvB,qBAAjB","sourcesContent":["'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      '\\'MYSQL\\'',\n      '\\'INFORMATION_SCHEMA\\'',\n      '\\'PERFORMANCE_SCHEMA\\''\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`,\n      ';'\n    ]);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n    return `${query};`;\n  }\n}\n\nmodule.exports = MariaDBQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}