{"ast":null,"code":"'use strict';\n\nconst DataTypes = require('./data-types');\n\nconst SqlString = require('./sql-string');\n\nconst _ = require('lodash');\n\nconst baseIsNative = require('lodash/_baseIsNative');\n\nconst uuidv1 = require('uuid').v1;\n\nconst uuidv4 = require('uuid').v4;\n\nconst operators = require('./operators');\n\nconst operatorsSet = new Set(Object.values(operators));\n\nlet inflection = require('inflection');\n\nexports.classToInvokable = require('./utils/class-to-invokable').classToInvokable;\nexports.joinSQLFragments = require('./utils/join-sql-fragments').joinSQLFragments;\n\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\n\nexports.useInflection = useInflection;\n\nfunction camelizeIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = camelize(str);\n  }\n\n  return result;\n}\n\nexports.camelizeIf = camelizeIf;\n\nfunction underscoredIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\n\nexports.underscoredIf = underscoredIf;\n\nfunction isPrimitive(val) {\n  const type = typeof val;\n  return type === 'string' || type === 'number' || type === 'boolean';\n}\n\nexports.isPrimitive = isPrimitive; // Same concept as _.merge, but don't overwrite properties that have already been assigned\n\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, (objectValue, sourceValue) => {\n    // If it's an object, let _ handle it this time, we will be called again for each property\n    if (!_.isPlainObject(objectValue) && objectValue !== undefined) {\n      // _.isNative includes a check for core-js and throws an error if present.\n      // Depending on _baseIsNative bypasses the core-js check.\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n\n      return objectValue;\n    }\n  });\n}\n\nexports.mergeDefaults = mergeDefaults; // An alternative to _.merge, which doesn't clone its arguments\n// Cloning is a bad idea because options arguments may contain references to sequelize\n// models - which again reference database libs which don't like to be cloned (in particular pg-native)\n\nfunction merge() {\n  const result = {};\n\n  for (const obj of arguments) {\n    _.forOwn(obj, (value, key) => {\n      if (value !== undefined) {\n        if (!result[key]) {\n          result[key] = value;\n        } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n          result[key] = merge(result[key], value);\n        } else if (Array.isArray(value) && Array.isArray(result[key])) {\n          result[key] = value.concat(result[key]);\n        } else {\n          result[key] = value;\n        }\n      }\n    });\n  }\n\n  return result;\n}\n\nexports.merge = merge;\n\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\n\nexports.spliceStr = spliceStr;\n\nfunction camelize(str) {\n  return str.trim().replace(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\n}\n\nexports.camelize = camelize;\n\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\n\nexports.underscore = underscore;\n\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\n\nexports.singularize = singularize;\n\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\n\nexports.pluralize = pluralize;\n\nfunction format(arr, dialect) {\n  const timeZone = null; // Make a clone of the array beacuse format modifies the passed args\n\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, parameters, dialect) {\n  const timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\n\nexports.formatNamedParameters = formatNamedParameters;\n\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, elem => {\n    // Do not try to customize cloning of arrays or POJOs\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return undefined;\n    } // If we specified to clone only plain objects & arrays, we ignore everyhing else\n    // In any case, don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances\n\n\n    if (onlyPlain || typeof elem === 'object') {\n      return elem;\n    } // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain\n\n\n    if (elem && typeof elem.clone === 'function') {\n      return elem.clone();\n    }\n  });\n}\n\nexports.cloneDeep = cloneDeep;\n/* Expand and normalize finder options */\n\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter(v => !Model._virtualAttributes.has(v));\n  }\n\n  mapOptionFieldNames(options, Model);\n  return options;\n}\n\nexports.mapFinderOptions = mapFinderOptions;\n/* Used to map field names in attributes and where conditions */\n\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map(attr => {\n      // Object lookups will force any variable to strings, we don't want that for special objects etc\n      if (typeof attr !== 'string') return attr; // Map attributes to aliased syntax attributes\n\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n\n      return attr;\n    });\n  }\n\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return options;\n}\n\nexports.mapOptionFieldNames = mapOptionFieldNames;\n\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    getComplexKeys(attributes).forEach(attribute => {\n      const rawAttribute = Model.rawAttributes[attribute];\n\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n\n      if (_.isPlainObject(attributes[attribute]) && !(rawAttribute && (rawAttribute.type instanceof DataTypes.HSTORE || rawAttribute.type instanceof DataTypes.JSON))) {\n        // Prevent renaming of HSTORE & JSON fields\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n\n      if (Array.isArray(attributes[attribute])) {\n        attributes[attribute].forEach((where, index) => {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        });\n      }\n    });\n  }\n\n  return attributes;\n}\n\nexports.mapWhereFieldNames = mapWhereFieldNames;\n/* Used to map field names in values */\n\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  const values = {};\n\n  for (const attr of fields) {\n    if (dataValues[attr] !== undefined && !Model._virtualAttributes.has(attr)) {\n      // Field name mapping\n      if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n        values[Model.rawAttributes[attr].field] = dataValues[attr];\n      } else {\n        values[attr] = dataValues[attr];\n      }\n    }\n  }\n\n  return values;\n}\n\nexports.mapValueFieldNames = mapValueFieldNames;\n\nfunction isColString(value) {\n  return typeof value === 'string' && value[0] === '$' && value[value.length - 1] === '$';\n}\n\nexports.isColString = isColString;\n\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some(arg => _.isPlainObject(arg) || arg instanceof Where);\n}\n\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\n\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\n\nexports.combineTableNames = combineTableNames;\n\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === 'function') {\n    const tmp = value();\n\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n\n    return tmp;\n  }\n\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice();\n  }\n\n  if (_.isPlainObject(value)) {\n    return { ...value\n    };\n  }\n\n  return value;\n}\n\nexports.toDefaultValue = toDefaultValue;\n/**\n * Determine if the default value provided exists and can be described\n * in a db schema using the DEFAULT directive.\n *\n * @param  {*} value Any default value.\n * @returns {boolean} yes / no.\n * @private\n */\n\nfunction defaultValueSchemable(value) {\n  if (value === undefined) {\n    return false;\n  } // TODO this will be schemable when all supported db\n  // have been normalized for this case\n\n\n  if (value instanceof DataTypes.NOW) {\n    return false;\n  }\n\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {\n    return false;\n  }\n\n  return typeof value !== 'function';\n}\n\nexports.defaultValueSchemable = defaultValueSchemable;\n\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  let result = hash;\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n\n  if (omitNull) {\n    const _hash = {};\n\n    _.forIn(hash, (val, key) => {\n      if (options.allowNull.includes(key) || key.endsWith('Id') || val !== null && val !== undefined) {\n        _hash[key] = val;\n      }\n    });\n\n    result = _hash;\n  }\n\n  return result;\n}\n\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\nconst dialects = new Set(['mariadb', 'mysql', 'postgres', 'sqlite', 'mssql']);\n\nfunction now(dialect) {\n  const d = new Date();\n\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n\n  return d;\n}\n\nexports.now = now; // Note: Use the `quoteIdentifier()` and `escape()` methods on the\n// `QueryInterface` instead for more portable code.\n\nconst TICK_CHAR = '`';\nexports.TICK_CHAR = TICK_CHAR;\n\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\n\nexports.addTicks = addTicks;\n\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, 'g'), '');\n}\n\nexports.removeTicks = removeTicks;\n/**\n * Receives a tree-like object and returns a plain object which depth is 1.\n *\n * - Input:\n *\n *  {\n *    name: 'John',\n *    address: {\n *      street: 'Fake St. 123',\n *      coordinates: {\n *        longitude: 55.6779627,\n *        latitude: 12.5964313\n *      }\n *    }\n *  }\n *\n * - Output:\n *\n *  {\n *    name: 'John',\n *    address.street: 'Fake St. 123',\n *    address.coordinates.latitude: 55.6779627,\n *    address.coordinates.longitude: 12.5964313\n *  }\n *\n * @param {object} value an Object\n * @returns {object} a flattened object\n * @private\n */\n\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) return value;\n  const flattenedObj = {};\n\n  function flattenObject(obj, subPath) {\n    Object.keys(obj).forEach(key => {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    });\n    return flattenedObj;\n  }\n\n  return flattenObject(value, undefined);\n}\n\nexports.flattenObjectDeep = flattenObjectDeep;\n/**\n * Utility functions for representing SQL functions, and columns that should be escaped.\n * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.\n *\n * @private\n */\n\nclass SequelizeMethod {}\n\nexports.SequelizeMethod = SequelizeMethod;\n\nclass Fn extends SequelizeMethod {\n  constructor(fn, args) {\n    super();\n    this.fn = fn;\n    this.args = args;\n  }\n\n  clone() {\n    return new Fn(this.fn, this.args);\n  }\n\n}\n\nexports.Fn = Fn;\n\nclass Col extends SequelizeMethod {\n  constructor(col, ...args) {\n    super();\n\n    if (args.length > 0) {\n      col = args;\n    }\n\n    this.col = col;\n  }\n\n}\n\nexports.Col = Col;\n\nclass Cast extends SequelizeMethod {\n  constructor(val, type, json) {\n    super();\n    this.val = val;\n    this.type = (type || '').trim();\n    this.json = json || false;\n  }\n\n}\n\nexports.Cast = Cast;\n\nclass Literal extends SequelizeMethod {\n  constructor(val) {\n    super();\n    this.val = val;\n  }\n\n}\n\nexports.Literal = Literal;\n\nclass Json extends SequelizeMethod {\n  constructor(conditionsOrPath, value) {\n    super();\n\n    if (_.isObject(conditionsOrPath)) {\n      this.conditions = conditionsOrPath;\n    } else {\n      this.path = conditionsOrPath;\n\n      if (value) {\n        this.value = value;\n      }\n    }\n  }\n\n}\n\nexports.Json = Json;\n\nclass Where extends SequelizeMethod {\n  constructor(attribute, comparator, logic) {\n    super();\n\n    if (logic === undefined) {\n      logic = comparator;\n      comparator = '=';\n    }\n\n    this.attribute = attribute;\n    this.comparator = comparator;\n    this.logic = logic;\n  }\n\n}\n\nexports.Where = Where; //Collection of helper methods to make it easier to work with symbol operators\n\n/**\n * getOperators\n *\n * @param  {object} obj\n * @returns {Array<symbol>} All operators properties of obj\n * @private\n */\n\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter(s => operatorsSet.has(s));\n}\n\nexports.getOperators = getOperators;\n/**\n * getComplexKeys\n *\n * @param  {object} obj\n * @returns {Array<string|symbol>} All keys including operators\n * @private\n */\n\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\n\nexports.getComplexKeys = getComplexKeys;\n/**\n * getComplexSize\n *\n * @param  {object|Array} obj\n * @returns {number}      Length of object properties including operators if obj is array returns its length\n * @private\n */\n\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\n\nexports.getComplexSize = getComplexSize;\n/**\n * Returns true if a where clause is empty, even with Symbols\n *\n * @param  {object} obj\n * @returns {boolean}\n * @private\n */\n\nfunction isWhereEmpty(obj) {\n  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\n\nexports.isWhereEmpty = isWhereEmpty;\n/**\n * Returns ENUM name by joining table and column name\n *\n * @param {string} tableName\n * @param {string} columnName\n * @returns {string}\n * @private\n */\n\nfunction generateEnumName(tableName, columnName) {\n  return `enum_${tableName}_${columnName}`;\n}\n\nexports.generateEnumName = generateEnumName;\n/**\n * Returns an new Object which keys are camelized\n *\n * @param {object} obj\n * @returns {string}\n * @private\n */\n\nfunction camelizeObjectKeys(obj) {\n  const newObj = new Object();\n  Object.keys(obj).forEach(key => {\n    newObj[camelize(key)] = obj[key];\n  });\n  return newObj;\n}\n\nexports.camelizeObjectKeys = camelizeObjectKeys;\n/**\n * Assigns own and inherited enumerable string and symbol keyed properties of source\n * objects to the destination object.\n *\n * https://lodash.com/docs/4.17.4#defaults\n *\n * **Note:** This method mutates `object`.\n *\n * @param {object} object The destination object.\n * @param {...object} [sources] The source objects.\n * @returns {object} Returns `object`.\n * @private\n */\n\nfunction defaults(object, ...sources) {\n  object = Object(object);\n  sources.forEach(source => {\n    if (source) {\n      source = Object(source);\n      getComplexKeys(source).forEach(key => {\n        const value = object[key];\n\n        if (value === undefined || _.eq(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key)) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n  return object;\n}\n\nexports.defaults = defaults;\n/**\n *\n * @param {object} index\n * @param {Array}  index.fields\n * @param {string} [index.name]\n * @param {string|object} tableName\n *\n * @returns {object}\n * @private\n */\n\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) tableName = tableName.tableName;\n\n  if (!Object.prototype.hasOwnProperty.call(index, 'name')) {\n    const fields = index.fields.map(field => typeof field === 'string' ? field : field.name || field.attribute);\n    index.name = underscore(`${tableName}_${fields.join('_')}`);\n  }\n\n  return index;\n}\n\nexports.nameIndex = nameIndex;\n/**\n * Checks if 2 arrays intersect.\n *\n * @param {Array} arr1\n * @param {Array} arr2\n * @private\n */\n\nfunction intersects(arr1, arr2) {\n  return arr1.some(v => arr2.includes(v));\n}\n\nexports.intersects = intersects;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/utils.js"],"names":["DataTypes","require","SqlString","_","baseIsNative","uuidv1","v1","uuidv4","v4","operators","operatorsSet","Set","Object","values","inflection","exports","classToInvokable","joinSQLFragments","useInflection","_inflection","camelizeIf","str","condition","result","camelize","underscoredIf","underscore","isPrimitive","val","type","mergeDefaults","a","b","mergeWith","objectValue","sourceValue","isPlainObject","undefined","isFunction","merge","obj","arguments","forOwn","value","key","Array","isArray","concat","spliceStr","index","count","add","slice","trim","replace","match","c","toUpperCase","singularize","pluralize","format","arr","dialect","timeZone","formatNamedParameters","sql","parameters","cloneDeep","onlyPlain","cloneDeepWith","elem","clone","mapFinderOptions","options","Model","attributes","_injectDependentVirtualAttributes","filter","v","_virtualAttributes","has","mapOptionFieldNames","map","attr","rawAttributes","field","where","mapWhereFieldNames","getComplexKeys","forEach","attribute","rawAttribute","fieldName","HSTORE","JSON","mapValueFieldNames","dataValues","fields","isColString","length","canTreatArrayAsAnd","some","arg","Where","combineTableNames","tableName1","tableName2","toLowerCase","toDefaultValue","tmp","ABSTRACT","toSql","UUIDV1","UUIDV4","NOW","now","defaultValueSchemable","removeNullValuesFromHash","hash","omitNull","allowNull","_hash","forIn","includes","endsWith","dialects","d","Date","setMilliseconds","TICK_CHAR","addTicks","s","tickChar","removeTicks","RegExp","flattenObjectDeep","flattenedObj","flattenObject","subPath","keys","pathToProperty","get","SequelizeMethod","Fn","constructor","fn","args","Col","col","Cast","json","Literal","Json","conditionsOrPath","isObject","conditions","path","comparator","logic","getOperators","getOwnPropertySymbols","getComplexSize","isWhereEmpty","isEmpty","generateEnumName","tableName","columnName","camelizeObjectKeys","newObj","defaults","object","sources","source","eq","prototype","hasOwnProperty","call","nameIndex","name","join","intersects","arr1","arr2"],"mappings":"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","sourcesContent":["'use strict';\n\nconst DataTypes = require('./data-types');\nconst SqlString = require('./sql-string');\nconst _ = require('lodash');\nconst baseIsNative = require('lodash/_baseIsNative');\nconst uuidv1 = require('uuid').v1;\nconst uuidv4 = require('uuid').v4;\nconst operators = require('./operators');\nconst operatorsSet = new Set(Object.values(operators));\n\nlet inflection = require('inflection');\n\nexports.classToInvokable = require('./utils/class-to-invokable').classToInvokable;\nexports.joinSQLFragments = require('./utils/join-sql-fragments').joinSQLFragments;\n\nfunction useInflection(_inflection) {\n  inflection = _inflection;\n}\nexports.useInflection = useInflection;\n\nfunction camelizeIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = camelize(str);\n  }\n\n  return result;\n}\nexports.camelizeIf = camelizeIf;\n\nfunction underscoredIf(str, condition) {\n  let result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\nexports.underscoredIf = underscoredIf;\n\nfunction isPrimitive(val) {\n  const type = typeof val;\n  return type === 'string' || type === 'number' || type === 'boolean';\n}\nexports.isPrimitive = isPrimitive;\n\n// Same concept as _.merge, but don't overwrite properties that have already been assigned\nfunction mergeDefaults(a, b) {\n  return _.mergeWith(a, b, (objectValue, sourceValue) => {\n    // If it's an object, let _ handle it this time, we will be called again for each property\n    if (!_.isPlainObject(objectValue) && objectValue !== undefined) {\n      // _.isNative includes a check for core-js and throws an error if present.\n      // Depending on _baseIsNative bypasses the core-js check.\n      if (_.isFunction(objectValue) && baseIsNative(objectValue)) {\n        return sourceValue || objectValue;\n      }\n      return objectValue;\n    }\n  });\n}\nexports.mergeDefaults = mergeDefaults;\n\n// An alternative to _.merge, which doesn't clone its arguments\n// Cloning is a bad idea because options arguments may contain references to sequelize\n// models - which again reference database libs which don't like to be cloned (in particular pg-native)\nfunction merge() {\n  const result = {};\n\n  for (const obj of arguments) {\n    _.forOwn(obj, (value, key) => {\n      if (value !== undefined) {\n        if (!result[key]) {\n          result[key] = value;\n        } else if (_.isPlainObject(value) && _.isPlainObject(result[key])) {\n          result[key] = merge(result[key], value);\n        } else if (Array.isArray(value) && Array.isArray(result[key])) {\n          result[key] = value.concat(result[key]);\n        } else {\n          result[key] = value;\n        }\n      }\n    });\n  }\n\n  return result;\n}\nexports.merge = merge;\n\nfunction spliceStr(str, index, count, add) {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\nexports.spliceStr = spliceStr;\n\nfunction camelize(str) {\n  return str.trim().replace(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\n}\nexports.camelize = camelize;\n\nfunction underscore(str) {\n  return inflection.underscore(str);\n}\nexports.underscore = underscore;\n\nfunction singularize(str) {\n  return inflection.singularize(str);\n}\nexports.singularize = singularize;\n\nfunction pluralize(str) {\n  return inflection.pluralize(str);\n}\nexports.pluralize = pluralize;\n\nfunction format(arr, dialect) {\n  const timeZone = null;\n  // Make a clone of the array beacuse format modifies the passed args\n  return SqlString.format(arr[0], arr.slice(1), timeZone, dialect);\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, parameters, dialect) {\n  const timeZone = null;\n  return SqlString.formatNamedParameters(sql, parameters, timeZone, dialect);\n}\nexports.formatNamedParameters = formatNamedParameters;\n\nfunction cloneDeep(obj, onlyPlain) {\n  obj = obj || {};\n  return _.cloneDeepWith(obj, elem => {\n    // Do not try to customize cloning of arrays or POJOs\n    if (Array.isArray(elem) || _.isPlainObject(elem)) {\n      return undefined;\n    }\n\n    // If we specified to clone only plain objects & arrays, we ignore everyhing else\n    // In any case, don't clone stuff that's an object, but not a plain one - fx example sequelize models and instances\n    if (onlyPlain || typeof elem === 'object') {\n      return elem;\n    }\n\n    // Preserve special data-types like `fn` across clones. _.get() is used for checking up the prototype chain\n    if (elem && typeof elem.clone === 'function') {\n      return elem.clone();\n    }\n  });\n}\nexports.cloneDeep = cloneDeep;\n\n/* Expand and normalize finder options */\nfunction mapFinderOptions(options, Model) {\n  if (options.attributes && Array.isArray(options.attributes)) {\n    options.attributes = Model._injectDependentVirtualAttributes(options.attributes);\n    options.attributes = options.attributes.filter(v => !Model._virtualAttributes.has(v));\n  }\n\n  mapOptionFieldNames(options, Model);\n\n  return options;\n}\nexports.mapFinderOptions = mapFinderOptions;\n\n/* Used to map field names in attributes and where conditions */\nfunction mapOptionFieldNames(options, Model) {\n  if (Array.isArray(options.attributes)) {\n    options.attributes = options.attributes.map(attr => {\n      // Object lookups will force any variable to strings, we don't want that for special objects etc\n      if (typeof attr !== 'string') return attr;\n      // Map attributes to aliased syntax attributes\n      if (Model.rawAttributes[attr] && attr !== Model.rawAttributes[attr].field) {\n        return [Model.rawAttributes[attr].field, attr];\n      }\n      return attr;\n    });\n  }\n\n  if (options.where && _.isPlainObject(options.where)) {\n    options.where = mapWhereFieldNames(options.where, Model);\n  }\n\n  return options;\n}\nexports.mapOptionFieldNames = mapOptionFieldNames;\n\nfunction mapWhereFieldNames(attributes, Model) {\n  if (attributes) {\n    getComplexKeys(attributes).forEach(attribute => {\n      const rawAttribute = Model.rawAttributes[attribute];\n\n      if (rawAttribute && rawAttribute.field !== rawAttribute.fieldName) {\n        attributes[rawAttribute.field] = attributes[attribute];\n        delete attributes[attribute];\n      }\n\n      if (_.isPlainObject(attributes[attribute])\n        && !(rawAttribute && (\n          rawAttribute.type instanceof DataTypes.HSTORE\n          || rawAttribute.type instanceof DataTypes.JSON))) { // Prevent renaming of HSTORE & JSON fields\n        attributes[attribute] = mapOptionFieldNames({\n          where: attributes[attribute]\n        }, Model).where;\n      }\n\n      if (Array.isArray(attributes[attribute])) {\n        attributes[attribute].forEach((where, index) => {\n          if (_.isPlainObject(where)) {\n            attributes[attribute][index] = mapWhereFieldNames(where, Model);\n          }\n        });\n      }\n\n    });\n  }\n\n  return attributes;\n}\nexports.mapWhereFieldNames = mapWhereFieldNames;\n\n/* Used to map field names in values */\nfunction mapValueFieldNames(dataValues, fields, Model) {\n  const values = {};\n\n  for (const attr of fields) {\n    if (dataValues[attr] !== undefined && !Model._virtualAttributes.has(attr)) {\n      // Field name mapping\n      if (Model.rawAttributes[attr] && Model.rawAttributes[attr].field && Model.rawAttributes[attr].field !== attr) {\n        values[Model.rawAttributes[attr].field] = dataValues[attr];\n      } else {\n        values[attr] = dataValues[attr];\n      }\n    }\n  }\n\n  return values;\n}\nexports.mapValueFieldNames = mapValueFieldNames;\n\nfunction isColString(value) {\n  return typeof value === 'string' && value[0] === '$' && value[value.length - 1] === '$';\n}\nexports.isColString = isColString;\n\nfunction canTreatArrayAsAnd(arr) {\n  return arr.some(arg => _.isPlainObject(arg) || arg instanceof Where);\n}\nexports.canTreatArrayAsAnd = canTreatArrayAsAnd;\n\nfunction combineTableNames(tableName1, tableName2) {\n  return tableName1.toLowerCase() < tableName2.toLowerCase() ? tableName1 + tableName2 : tableName2 + tableName1;\n}\nexports.combineTableNames = combineTableNames;\n\nfunction toDefaultValue(value, dialect) {\n  if (typeof value === 'function') {\n    const tmp = value();\n    if (tmp instanceof DataTypes.ABSTRACT) {\n      return tmp.toSql();\n    }\n    return tmp;\n  }\n  if (value instanceof DataTypes.UUIDV1) {\n    return uuidv1();\n  }\n  if (value instanceof DataTypes.UUIDV4) {\n    return uuidv4();\n  }\n  if (value instanceof DataTypes.NOW) {\n    return now(dialect);\n  }\n  if (Array.isArray(value)) {\n    return value.slice();\n  }\n  if (_.isPlainObject(value)) {\n    return { ...value };\n  }\n  return value;\n}\nexports.toDefaultValue = toDefaultValue;\n\n/**\n * Determine if the default value provided exists and can be described\n * in a db schema using the DEFAULT directive.\n *\n * @param  {*} value Any default value.\n * @returns {boolean} yes / no.\n * @private\n */\nfunction defaultValueSchemable(value) {\n  if (value === undefined) { return false; }\n\n  // TODO this will be schemable when all supported db\n  // have been normalized for this case\n  if (value instanceof DataTypes.NOW) { return false; }\n\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) { return false; }\n\n  return typeof value !== 'function';\n}\nexports.defaultValueSchemable = defaultValueSchemable;\n\nfunction removeNullValuesFromHash(hash, omitNull, options) {\n  let result = hash;\n\n  options = options || {};\n  options.allowNull = options.allowNull || [];\n\n  if (omitNull) {\n    const _hash = {};\n\n    _.forIn(hash, (val, key) => {\n      if (options.allowNull.includes(key) || key.endsWith('Id') || val !== null && val !== undefined) {\n        _hash[key] = val;\n      }\n    });\n\n    result = _hash;\n  }\n\n  return result;\n}\nexports.removeNullValuesFromHash = removeNullValuesFromHash;\n\nconst dialects = new Set(['mariadb', 'mysql', 'postgres', 'sqlite', 'mssql']);\n\nfunction now(dialect) {\n  const d = new Date();\n  if (!dialects.has(dialect)) {\n    d.setMilliseconds(0);\n  }\n  return d;\n}\nexports.now = now;\n\n// Note: Use the `quoteIdentifier()` and `escape()` methods on the\n// `QueryInterface` instead for more portable code.\n\nconst TICK_CHAR = '`';\nexports.TICK_CHAR = TICK_CHAR;\n\nfunction addTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return tickChar + removeTicks(s, tickChar) + tickChar;\n}\nexports.addTicks = addTicks;\n\nfunction removeTicks(s, tickChar) {\n  tickChar = tickChar || TICK_CHAR;\n  return s.replace(new RegExp(tickChar, 'g'), '');\n}\nexports.removeTicks = removeTicks;\n\n/**\n * Receives a tree-like object and returns a plain object which depth is 1.\n *\n * - Input:\n *\n *  {\n *    name: 'John',\n *    address: {\n *      street: 'Fake St. 123',\n *      coordinates: {\n *        longitude: 55.6779627,\n *        latitude: 12.5964313\n *      }\n *    }\n *  }\n *\n * - Output:\n *\n *  {\n *    name: 'John',\n *    address.street: 'Fake St. 123',\n *    address.coordinates.latitude: 55.6779627,\n *    address.coordinates.longitude: 12.5964313\n *  }\n *\n * @param {object} value an Object\n * @returns {object} a flattened object\n * @private\n */\nfunction flattenObjectDeep(value) {\n  if (!_.isPlainObject(value)) return value;\n  const flattenedObj = {};\n\n  function flattenObject(obj, subPath) {\n    Object.keys(obj).forEach(key => {\n      const pathToProperty = subPath ? `${subPath}.${key}` : key;\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\n        flattenObject(obj[key], pathToProperty);\n      } else {\n        flattenedObj[pathToProperty] = _.get(obj, key);\n      }\n    });\n    return flattenedObj;\n  }\n\n  return flattenObject(value, undefined);\n}\nexports.flattenObjectDeep = flattenObjectDeep;\n\n/**\n * Utility functions for representing SQL functions, and columns that should be escaped.\n * Please do not use these functions directly, use Sequelize.fn and Sequelize.col instead.\n *\n * @private\n */\nclass SequelizeMethod {}\nexports.SequelizeMethod = SequelizeMethod;\n\nclass Fn extends SequelizeMethod {\n  constructor(fn, args) {\n    super();\n    this.fn = fn;\n    this.args = args;\n  }\n  clone() {\n    return new Fn(this.fn, this.args);\n  }\n}\nexports.Fn = Fn;\n\nclass Col extends SequelizeMethod {\n  constructor(col, ...args) {\n    super();\n    if (args.length > 0) {\n      col = args;\n    }\n    this.col = col;\n  }\n}\nexports.Col = Col;\n\nclass Cast extends SequelizeMethod {\n  constructor(val, type, json) {\n    super();\n    this.val = val;\n    this.type = (type || '').trim();\n    this.json = json || false;\n  }\n}\nexports.Cast = Cast;\n\nclass Literal extends SequelizeMethod {\n  constructor(val) {\n    super();\n    this.val = val;\n  }\n}\nexports.Literal = Literal;\n\nclass Json extends SequelizeMethod {\n  constructor(conditionsOrPath, value) {\n    super();\n    if (_.isObject(conditionsOrPath)) {\n      this.conditions = conditionsOrPath;\n    } else {\n      this.path = conditionsOrPath;\n      if (value) {\n        this.value = value;\n      }\n    }\n  }\n}\nexports.Json = Json;\n\nclass Where extends SequelizeMethod {\n  constructor(attribute, comparator, logic) {\n    super();\n    if (logic === undefined) {\n      logic = comparator;\n      comparator = '=';\n    }\n\n    this.attribute = attribute;\n    this.comparator = comparator;\n    this.logic = logic;\n  }\n}\nexports.Where = Where;\n\n//Collection of helper methods to make it easier to work with symbol operators\n\n/**\n * getOperators\n *\n * @param  {object} obj\n * @returns {Array<symbol>} All operators properties of obj\n * @private\n */\nfunction getOperators(obj) {\n  return Object.getOwnPropertySymbols(obj).filter(s => operatorsSet.has(s));\n}\nexports.getOperators = getOperators;\n\n/**\n * getComplexKeys\n *\n * @param  {object} obj\n * @returns {Array<string|symbol>} All keys including operators\n * @private\n */\nfunction getComplexKeys(obj) {\n  return getOperators(obj).concat(Object.keys(obj));\n}\nexports.getComplexKeys = getComplexKeys;\n\n/**\n * getComplexSize\n *\n * @param  {object|Array} obj\n * @returns {number}      Length of object properties including operators if obj is array returns its length\n * @private\n */\nfunction getComplexSize(obj) {\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\n}\nexports.getComplexSize = getComplexSize;\n\n/**\n * Returns true if a where clause is empty, even with Symbols\n *\n * @param  {object} obj\n * @returns {boolean}\n * @private\n */\nfunction isWhereEmpty(obj) {\n  return !!obj && _.isEmpty(obj) && getOperators(obj).length === 0;\n}\nexports.isWhereEmpty = isWhereEmpty;\n\n/**\n * Returns ENUM name by joining table and column name\n *\n * @param {string} tableName\n * @param {string} columnName\n * @returns {string}\n * @private\n */\nfunction generateEnumName(tableName, columnName) {\n  return `enum_${tableName}_${columnName}`;\n}\nexports.generateEnumName = generateEnumName;\n\n/**\n * Returns an new Object which keys are camelized\n *\n * @param {object} obj\n * @returns {string}\n * @private\n */\nfunction camelizeObjectKeys(obj) {\n  const newObj = new Object();\n  Object.keys(obj).forEach(key => {\n    newObj[camelize(key)] = obj[key];\n  });\n  return newObj;\n}\nexports.camelizeObjectKeys = camelizeObjectKeys;\n\n/**\n * Assigns own and inherited enumerable string and symbol keyed properties of source\n * objects to the destination object.\n *\n * https://lodash.com/docs/4.17.4#defaults\n *\n * **Note:** This method mutates `object`.\n *\n * @param {object} object The destination object.\n * @param {...object} [sources] The source objects.\n * @returns {object} Returns `object`.\n * @private\n */\nfunction defaults(object, ...sources) {\n  object = Object(object);\n\n  sources.forEach(source => {\n    if (source) {\n      source = Object(source);\n\n      getComplexKeys(source).forEach(key => {\n        const value = object[key];\n        if (\n          value === undefined ||\n            _.eq(value, Object.prototype[key]) &&\n            !Object.prototype.hasOwnProperty.call(object, key)\n\n        ) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n\n  return object;\n}\nexports.defaults = defaults;\n\n/**\n *\n * @param {object} index\n * @param {Array}  index.fields\n * @param {string} [index.name]\n * @param {string|object} tableName\n *\n * @returns {object}\n * @private\n */\nfunction nameIndex(index, tableName) {\n  if (tableName.tableName) tableName = tableName.tableName;\n\n  if (!Object.prototype.hasOwnProperty.call(index, 'name')) {\n    const fields = index.fields.map(\n      field => typeof field === 'string' ? field : field.name || field.attribute\n    );\n    index.name = underscore(`${tableName}_${fields.join('_')}`);\n  }\n\n  return index;\n}\nexports.nameIndex = nameIndex;\n\n/**\n * Checks if 2 arrays intersect.\n *\n * @param {Array} arr1\n * @param {Array} arr2\n * @private\n */\nfunction intersects(arr1, arr2) {\n  return arr1.some(v => arr2.includes(v));\n}\nexports.intersects = intersects;\n"]},"metadata":{},"sourceType":"script"}