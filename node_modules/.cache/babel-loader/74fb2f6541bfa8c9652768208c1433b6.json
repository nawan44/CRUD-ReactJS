{"ast":null,"code":"'use strict';\n\nconst sequelizeErrors = require('../../errors');\n\nconst QueryTypes = require('../../query-types');\n\nconst {\n  QueryInterface\n} = require('../abstract/query-interface');\n\nconst {\n  cloneDeep\n} = require('../../utils');\n\nconst _ = require('lodash');\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\n\n\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n\n\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n\n\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n    fields[attrNameAfter] = { ...fields[attrNameBefore]\n    };\n    delete fields[attrNameBefore];\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n    const constraints = await this.showConstraint(tableName, constraintName); // sqlite can't show only one constraint, so we find here the one to remove\n\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options,\n      type: QueryTypes.SELECT,\n      raw: true\n    });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1; //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n  /**\n   * @override\n   */\n\n\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n  /**\n   * @override\n   */\n\n\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options,\n      type: QueryTypes.DESCRIBE\n    };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/sqlite/query-interface.js"],"names":["sequelizeErrors","require","QueryTypes","QueryInterface","cloneDeep","_","SQLiteQueryInterface","removeColumn","tableName","attributeName","options","fields","describeTable","sql","queryGenerator","removeColumnQuery","subQueries","split","filter","q","subQuery","sequelize","query","raw","changeColumn","dataTypeOrOptions","Object","assign","normalizeAttribute","renameColumn","attrNameBefore","attrNameAfter","assertTableHasColumn","renameColumnQuery","removeConstraint","constraintName","createTableSql","constraints","showConstraint","constraint","find","constaint","UnknownConstraintError","message","table","quoteIdentifier","constraintSnippet","constraintType","constraintCondition","referenceTableName","quoteTable","referenceTableKeys","map","columnName","join","updateAction","deleteAction","replace","_alterConstraintQuery","addConstraint","Error","type","getConstraintSnippet","describeCreateTableSql","describeCreateTableQuery","SELECT","index","length","substr","getForeignKeyReferencesForTable","database","config","getForeignKeysQuery","result","row","from","referencedTableName","referencedColumnName","to","tableCatalog","referencedTableCatalog","dropAllTables","skip","tableNames","showAllTables","_dropAllTables","schema","schemaDelimiter","describeTableQuery","DESCRIBE","sqlIndexes","showIndexesQuery","data","isEmpty","indexes","prop","unique","field","undefined","attribute","foreignKeys","foreignKey","references","model","key","e","original","code","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"]},"metadata":{},"sourceType":"script"}