{"ast":null,"code":"'use strict';\n\nconst Utils = require('./../utils');\n\nconst Helpers = require('./helpers');\n\nconst _ = require('lodash');\n\nconst Association = require('./base');\n\nconst Op = require('../operators');\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\n\n\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([Utils.singularize(this.options.as || this.source.name), this.source.primaryKeyAttribute].join('_'));\n    }\n\n    if (this.options.sourceKey && !this.source.rawAttributes[this.options.sourceKey]) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    } // Get singular name, trying to uppercase the first letter, unless the model forbids it\n\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  } // the id is in the target table\n\n\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n\n\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, {\n          raw: true\n        })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, {\n          raw: true\n        })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options] Options passed to getAssociation and `target.save`\n   *\n   * @returns {Promise}\n   */\n\n\n  async set(sourceInstance, associatedInstance, options) {\n    options = { ...options,\n      scope: false\n    };\n    const oldInstance = await sourceInstance[this.accessors.get](options); // TODO Use equals method once #5605 is resolved\n\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute => oldInstance.get(attribute, {\n      raw: true\n    }) === (associatedInstance.get ? associatedInstance.get(attribute, {\n      raw: true\n    }) : associatedInstance));\n\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n      await oldInstance.save({ ...options,\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      });\n    }\n\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n      return associatedInstance.save(options);\n    }\n\n    return null;\n  }\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create} for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n\n\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = HasOne;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/associations/has-one.js"],"names":["Utils","require","Helpers","_","Association","Op","HasOne","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelize","singularize","primaryKeyAttribute","join","sourceKey","rawAttributes","Error","sourceKeyAttribute","sourceKeyField","field","sourceKeyIsPrimary","associationAccessor","useHooks","identifierField","upperFirst","accessors","get","set","create","_injectAttributes","newAttributes","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","where","Target","instance","cloneDeep","Object","prototype","hasOwnProperty","call","scope","unscoped","schema","schemaDelimiter","Array","isArray","undefined","in","map","_instance","assign","and","results","findAll","result","raw","findOne","sourceInstance","associatedInstance","oldInstance","alreadyAssociated","primaryKeyAttributes","every","attribute","save","fields","association","tmpInstance","build","isNewRecord","values","keys","push","verifyAssociationAlias","alias","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          Utils.singularize(this.options.as || this.source.name),\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (\n      this.options.sourceKey\n      && !this.source.rawAttributes[this.options.sourceKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the target table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options] Options passed to getAssociation and `target.save`\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options) {\n    options = { ...options, scope: false };\n\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    // TODO Use equals method once #5605 is resolved\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute =>\n      oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance)\n    );\n\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n\n      await oldInstance.save({\n        ...options,\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      });\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n\n      return associatedInstance.save(options);\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create} for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasOne;\n"]},"metadata":{},"sourceType":"script"}