{"ast":null,"code":"'use strict';\n\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\n\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n * \n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n * \n * @param {string[]} parts\n * @returns {string}\n * @private\n */\n\n\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(({\n    skipNextLeadingSpace,\n    result\n  }, part) => {\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: ''\n  }).result;\n}\n/**\n * Joins an array with a single space, auto trimming when needed.\n * \n * Certain elements do not get leading/trailing spaces.\n * \n * @param {any[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n * \n * @returns {string} The joined string.\n * \n * @private\n */\n\n\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return ''; // Skip falsy fragments\n\n  array = array.filter(x => x); // Resolve recursive calls\n\n  array = array.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n\n    return fragment;\n  }); // Ensure strings\n\n  for (const fragment of array) {\n    if (fragment && typeof fragment !== 'string') {\n      const error = new TypeError(`Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n      error.args = array;\n      error.fragment = fragment;\n      throw error;\n    }\n  } // Trim fragments\n\n\n  array = array.map(x => x.trim()); // Skip full-whitespace fragments (empty after the above trim)\n\n  array = array.filter(x => x !== '');\n  return singleSpaceJoinHelper(array);\n}\n\nexports.joinSQLFragments = joinSQLFragments;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/utils/join-sql-fragments.js"],"names":["doesNotWantLeadingSpace","str","test","doesNotWantTrailingSpace","singleSpaceJoinHelper","parts","reduce","skipNextLeadingSpace","result","part","trim","joinSQLFragments","array","length","filter","x","map","fragment","Array","isArray","error","TypeError","args","exports"],"mappings":"AAAA;;AAEA,SAASA,uBAAT,CAAiCC,GAAjC,EAAsC;AACpC,SAAO,SAASC,IAAT,CAAcD,GAAd,CAAP;AACD;;AACD,SAASE,wBAAT,CAAkCF,GAAlC,EAAuC;AACrC,SAAO,MAAMC,IAAN,CAAWD,GAAX,CAAP;AACD;AAED;;;;;;;;;;;;;AAWA,SAASG,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,SAAOA,KAAK,CAACC,MAAN,CAAa,CAAC;AAAEC,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,GAAD,EAAmCC,IAAnC,KAA4C;AAC9D,QAAIF,oBAAoB,IAAIP,uBAAuB,CAACS,IAAD,CAAnD,EAA2D;AACzDD,MAAAA,MAAM,IAAIC,IAAI,CAACC,IAAL,EAAV;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,IAAK,IAAGC,IAAI,CAACC,IAAL,EAAY,EAA1B;AACD;;AACD,WAAO;AACLH,MAAAA,oBAAoB,EAAEJ,wBAAwB,CAACM,IAAD,CADzC;AAELD,MAAAA;AAFK,KAAP;AAID,GAVM,EAUJ;AACDD,IAAAA,oBAAoB,EAAE,IADrB;AAEDC,IAAAA,MAAM,EAAE;AAFP,GAVI,EAaJA,MAbH;AAcD;AAED;;;;;;;;;;;;;;;AAaA,SAASG,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,OAAO,EAAP,CADO,CAG/B;;AACAD,EAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaC,CAAC,IAAIA,CAAlB,CAAR,CAJ+B,CAM/B;;AACAH,EAAAA,KAAK,GAAGA,KAAK,CAACI,GAAN,CAAUC,QAAQ,IAAI;AAC5B,QAAIC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,aAAON,gBAAgB,CAACM,QAAD,CAAvB;AACD;;AACD,WAAOA,QAAP;AACD,GALO,CAAR,CAP+B,CAc/B;;AACA,OAAK,MAAMA,QAAX,IAAuBL,KAAvB,EAA8B;AAC5B,QAAIK,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;AAC5C,YAAMG,KAAK,GAAG,IAAIC,SAAJ,CAAe,0EAAyEJ,QAAS,IAAjG,CAAd;AACAG,MAAAA,KAAK,CAACE,IAAN,GAAaV,KAAb;AACAQ,MAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,YAAMG,KAAN;AACD;AACF,GAtB8B,CAwB/B;;;AACAR,EAAAA,KAAK,GAAGA,KAAK,CAACI,GAAN,CAAUD,CAAC,IAAIA,CAAC,CAACL,IAAF,EAAf,CAAR,CAzB+B,CA2B/B;;AACAE,EAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaC,CAAC,IAAIA,CAAC,KAAK,EAAxB,CAAR;AAEA,SAAOX,qBAAqB,CAACQ,KAAD,CAA5B;AACD;;AACDW,OAAO,CAACZ,gBAAR,GAA2BA,gBAA3B","sourcesContent":["'use strict';\n\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n * \n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n * \n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(({ skipNextLeadingSpace, result }, part) => {\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: ''\n  }).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n * \n * Certain elements do not get leading/trailing spaces.\n * \n * @param {any[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n * \n * @returns {string} The joined string.\n * \n * @private\n */\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return '';\n\n  // Skip falsy fragments\n  array = array.filter(x => x);\n\n  // Resolve recursive calls\n  array = array.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n    return fragment;\n  });\n\n  // Ensure strings\n  for (const fragment of array) {\n    if (fragment && typeof fragment !== 'string') {\n      const error = new TypeError(`Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n      error.args = array;\n      error.fragment = fragment;\n      throw error;\n    }\n  }\n\n  // Trim fragments\n  array = array.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  array = array.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(array);\n}\nexports.joinSQLFragments = joinSQLFragments;\n"]},"metadata":{},"sourceType":"script"}