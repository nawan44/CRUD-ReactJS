{"ast":null,"code":"'use strict';\n\nconst Utils = require('./../utils');\n\nconst Helpers = require('./helpers');\n\nconst _ = require('lodash');\n\nconst Association = require('./base');\n\nconst Op = require('../operators');\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\n\n\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n    /*\n    * If self association, this is the target association\n    */\n\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n    /*\n     * Foreign key setup\n     */\n\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.source.options.name.singular, this.source.primaryKeyAttribute].join('_'));\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    /*\n     * Source key setup\n     */\n\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    } // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  } // the id is in the target table\n  // or in an extra table which connects two tables\n\n\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    }; // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n\n    const constraintOptions = { ...this.options\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n\n\n  async get(instances, options = {}) {\n    const where = {};\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = { ...options\n    };\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, {\n        raw: true\n      }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this,\n          // association\n          values\n        };\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, {\n        raw: true\n      });\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    const results = await Model.findAll(options);\n    if (instance) return results;\n    const result = {};\n\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, {\n        raw: true\n      })] = [];\n    }\n\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, {\n        raw: true\n      })].push(_instance);\n    }\n\n    return result;\n  }\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {object}         [options] find & count options\n   * @param {object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n\n\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n    options.attributes = [[this.sequelize.fn('COUNT', this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)), 'count']];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n\n\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = { ...options,\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    };\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [where, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return associatedObjects.length === targetInstances.length;\n  }\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {object} [options] Options passed to `target.findAll` and `update`.\n   * @param {object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n\n\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    const oldAssociations = await this.get(sourceInstance, { ...options,\n      scope: false,\n      raw: true\n    });\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old => !targetInstances.find(obj => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    const unassociatedObjects = targetInstances.filter(obj => !oldAssociations.find(old => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n    let updateWhere;\n    let update;\n\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject => associatedObject[this.target.primaryKeyAttribute])\n      };\n      promises.push(this.target.unscoped().update(update, { ...options,\n        where: updateWhere\n      }));\n    }\n\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject => unassociatedObject[this.target.primaryKeyAttribute]);\n      promises.push(this.target.unscoped().update(update, { ...options,\n        where: updateWhere\n      }));\n    }\n\n    await Promise.all(promises);\n    return sourceInstance;\n  }\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n\n\n  async add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) return Promise.resolve();\n    targetInstances = this.toInstanceArray(targetInstances);\n    const update = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      ...this.scope\n    };\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject => unassociatedObject.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, { ...options,\n      where\n    });\n    return sourceInstance;\n  }\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n\n\n  async remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n    targetInstances = this.toInstanceArray(targetInstances);\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance => targetInstance.get(this.target.primaryKeyAttribute))\n    };\n    await this.target.unscoped().update(update, { ...options,\n      where\n    });\n    return this;\n  }\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model instance\n   * @param {object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n\n\n  async create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/associations/has-many.js"],"names":["Utils","require","Helpers","_","Association","Op","HasMany","constructor","source","target","options","associationType","targetAssociation","sequelize","isMultiAssociation","foreignKeyAttribute","through","Error","isSelfAssociation","as","isAliased","isPlainObject","name","plural","singular","singularize","isObject","foreignKey","fieldName","camelize","primaryKeyAttribute","join","rawAttributes","identifierField","field","foreignKeyField","sourceKey","sourceKeyAttribute","sourceKeyField","primaryKeyField","upperFirst","associationAccessor","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","_injectAttributes","newAttributes","type","keyType","allowNull","constraintOptions","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","aliases","mixinMethods","instances","where","Model","instance","values","Array","isArray","undefined","scope","Object","assign","map","_instance","raw","limit","length","groupedLimit","on","in","and","prototype","hasOwnProperty","call","unscoped","schema","schemaDelimiter","results","findAll","result","push","cloneDeep","attributes","fn","col","plain","parseInt","has","sourceInstance","targetInstances","or","associatedObjects","toInstanceArray","oldAssociations","promises","obsoleteAssociations","filter","old","find","unassociatedObjects","updateWhere","update","associatedObject","unassociatedObject","Promise","all","resolve","targetInstance","fields","attribute","keys","verifyAssociationAlias","alias","module","exports","default"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,QAAD,CAA3B;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,cAAD,CAAlB;AAEA;;;;;;;;;;AAQA,MAAMK,OAAN,SAAsBF,WAAtB,CAAkC;AAChCG,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACnC,UAAMF,MAAN,EAAcC,MAAd,EAAsBC,OAAtB;AAEA,SAAKC,eAAL,GAAuB,SAAvB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,SAAL,GAAiBL,MAAM,CAACK,SAAxB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACA,SAAKC,mBAAL,GAA2B,EAA3B;;AAEA,QAAI,KAAKL,OAAL,CAAaM,OAAjB,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD;AAED;;;;;AAGA,QAAI,KAAKC,iBAAT,EAA4B;AAC1B,WAAKN,iBAAL,GAAyB,IAAzB;AACD;;AAED,QAAI,KAAKO,EAAT,EAAa;AACX,WAAKC,SAAL,GAAiB,IAAjB;;AAEA,UAAIjB,CAAC,CAACkB,aAAF,CAAgB,KAAKF,EAArB,CAAJ,EAA8B;AAC5B,aAAKT,OAAL,CAAaY,IAAb,GAAoB,KAAKH,EAAzB;AACA,aAAKA,EAAL,GAAU,KAAKA,EAAL,CAAQI,MAAlB;AACD,OAHD,MAGO;AACL,aAAKb,OAAL,CAAaY,IAAb,GAAoB;AAClBC,UAAAA,MAAM,EAAE,KAAKJ,EADK;AAElBK,UAAAA,QAAQ,EAAExB,KAAK,CAACyB,WAAN,CAAkB,KAAKN,EAAvB;AAFQ,SAApB;AAID;AACF,KAZD,MAYO;AACL,WAAKA,EAAL,GAAU,KAAKV,MAAL,CAAYC,OAAZ,CAAoBY,IAApB,CAAyBC,MAAnC;AACA,WAAKb,OAAL,CAAaY,IAAb,GAAoB,KAAKb,MAAL,CAAYC,OAAZ,CAAoBY,IAAxC;AACD;AAED;;;;;AAGA,QAAInB,CAAC,CAACuB,QAAF,CAAW,KAAKhB,OAAL,CAAaiB,UAAxB,CAAJ,EAAyC;AACvC,WAAKZ,mBAAL,GAA2B,KAAKL,OAAL,CAAaiB,UAAxC;AACA,WAAKA,UAAL,GAAkB,KAAKZ,mBAAL,CAAyBO,IAAzB,IAAiC,KAAKP,mBAAL,CAAyBa,SAA5E;AACD,KAHD,MAGO,IAAI,KAAKlB,OAAL,CAAaiB,UAAjB,EAA6B;AAClC,WAAKA,UAAL,GAAkB,KAAKjB,OAAL,CAAaiB,UAA/B;AACD;;AAED,QAAI,CAAC,KAAKA,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkB3B,KAAK,CAAC6B,QAAN,CAChB,CACE,KAAKrB,MAAL,CAAYE,OAAZ,CAAoBY,IAApB,CAAyBE,QAD3B,EAEE,KAAKhB,MAAL,CAAYsB,mBAFd,EAGEC,IAHF,CAGO,GAHP,CADgB,CAAlB;AAMD;;AAED,QAAI,KAAKtB,MAAL,CAAYuB,aAAZ,CAA0B,KAAKL,UAA/B,CAAJ,EAAgD;AAC9C,WAAKM,eAAL,GAAuB,KAAKxB,MAAL,CAAYuB,aAAZ,CAA0B,KAAKL,UAA/B,EAA2CO,KAA3C,IAAoD,KAAKP,UAAhF;AACA,WAAKQ,eAAL,GAAuB,KAAK1B,MAAL,CAAYuB,aAAZ,CAA0B,KAAKL,UAA/B,EAA2CO,KAA3C,IAAoD,KAAKP,UAAhF;AACD;AAED;;;;;AAGA,SAAKS,SAAL,GAAiB,KAAK1B,OAAL,CAAa0B,SAAb,IAA0B,KAAK5B,MAAL,CAAYsB,mBAAvD;;AAEA,QAAI,KAAKtB,MAAL,CAAYwB,aAAZ,CAA0B,KAAKI,SAA/B,CAAJ,EAA+C;AAC7C,WAAKC,kBAAL,GAA0B,KAAKD,SAA/B;AACA,WAAKE,cAAL,GAAsB,KAAK9B,MAAL,CAAYwB,aAAZ,CAA0B,KAAKI,SAA/B,EAA0CF,KAA1C,IAAmD,KAAKE,SAA9E;AACD,KAHD,MAGO;AACL,WAAKC,kBAAL,GAA0B,KAAK7B,MAAL,CAAYsB,mBAAtC;AACA,WAAKQ,cAAL,GAAsB,KAAK9B,MAAL,CAAY+B,eAAlC;AACD,KAxEkC,CA0EnC;AACA;;;AACA,UAAMhB,MAAM,GAAGpB,CAAC,CAACqC,UAAF,CAAa,KAAK9B,OAAL,CAAaY,IAAb,CAAkBC,MAA/B,CAAf;;AACA,UAAMC,QAAQ,GAAGrB,CAAC,CAACqC,UAAF,CAAa,KAAK9B,OAAL,CAAaY,IAAb,CAAkBE,QAA/B,CAAjB;;AAEA,SAAKiB,mBAAL,GAA2B,KAAKtB,EAAhC;AACA,SAAKuB,SAAL,GAAiB;AACfC,MAAAA,GAAG,EAAG,MAAKpB,MAAO,EADH;AAEfqB,MAAAA,GAAG,EAAG,MAAKrB,MAAO,EAFH;AAGfsB,MAAAA,WAAW,EAAG,MAAKtB,MAAO,EAHX;AAIfuB,MAAAA,GAAG,EAAG,MAAKtB,QAAS,EAJL;AAKfuB,MAAAA,MAAM,EAAG,SAAQvB,QAAS,EALX;AAMfwB,MAAAA,MAAM,EAAG,SAAQxB,QAAS,EANX;AAOfyB,MAAAA,cAAc,EAAG,SAAQ1B,MAAO,EAPjB;AAQf2B,MAAAA,SAAS,EAAG,MAAK1B,QAAS,EARX;AASf2B,MAAAA,MAAM,EAAG,MAAK5B,MAAO,EATN;AAUf6B,MAAAA,KAAK,EAAG,QAAO7B,MAAO;AAVP,KAAjB;AAYD,GA7F+B,CA+FhC;AACA;;;AACA8B,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,aAAa,GAAG;AACpB,OAAC,KAAK3B,UAAN,GAAmB;AACjB4B,QAAAA,IAAI,EAAE,KAAK7C,OAAL,CAAa8C,OAAb,IAAwB,KAAKhD,MAAL,CAAYwB,aAAZ,CAA0B,KAAKK,kBAA/B,EAAmDkB,IADhE;AAEjBE,QAAAA,SAAS,EAAE,IAFM;AAGjB,WAAG,KAAK1C;AAHS;AADC,KAAtB,CADkB,CASlB;;AACA,UAAM2C,iBAAiB,GAAG,EAAE,GAAG,KAAKhD;AAAV,KAA1B;;AAEA,QAAI,KAAKA,OAAL,CAAaiD,WAAb,KAA6B,KAAjC,EAAwC;AACtC,YAAMlD,MAAM,GAAG,KAAKA,MAAL,CAAYuB,aAAZ,CAA0B,KAAKL,UAA/B,KAA8C2B,aAAa,CAAC,KAAK3B,UAAN,CAA1E;AACA+B,MAAAA,iBAAiB,CAACE,QAAlB,GAA6BF,iBAAiB,CAACE,QAAlB,KAA+BnD,MAAM,CAACgD,SAAP,GAAmB,UAAnB,GAAgC,SAA/D,CAA7B;AACAC,MAAAA,iBAAiB,CAACG,QAAlB,GAA6BH,iBAAiB,CAACG,QAAlB,IAA8B,SAA3D;AACD;;AAED3D,IAAAA,OAAO,CAAC4D,wBAAR,CAAiCR,aAAa,CAAC,KAAK3B,UAAN,CAA9C,EAAiE,KAAKnB,MAAtE,EAA8E,KAAKC,MAAnF,EAA2FiD,iBAA3F,EAA8G,KAAKpB,cAAnH;AACAtC,IAAAA,KAAK,CAAC+D,aAAN,CAAoB,KAAKtD,MAAL,CAAYuB,aAAhC,EAA+CsB,aAA/C;AAEA,SAAK7C,MAAL,CAAYuD,iBAAZ;AACA,SAAKxD,MAAL,CAAYwD,iBAAZ;AAEA,SAAK/B,eAAL,GAAuB,KAAKxB,MAAL,CAAYuB,aAAZ,CAA0B,KAAKL,UAA/B,EAA2CO,KAA3C,IAAoD,KAAKP,UAAhF;AACA,SAAKQ,eAAL,GAAuB,KAAK1B,MAAL,CAAYuB,aAAZ,CAA0B,KAAKL,UAA/B,EAA2CO,KAA3C,IAAoD,KAAKP,UAAhF;AACA,SAAKW,cAAL,GAAsB,KAAK9B,MAAL,CAAYwB,aAAZ,CAA0B,KAAKI,SAA/B,EAA0CF,KAA1C,IAAmD,KAAKE,SAA9E;AAEAlC,IAAAA,OAAO,CAAC+D,oBAAR,CAA6B,IAA7B;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,GAAD,EAAM;AACT,UAAMC,OAAO,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,WAAjB,EAA8B,QAA9B,EAAwC,KAAxC,EAA+C,KAA/C,EAAsD,aAAtD,EAAqE,QAArE,EAA+E,gBAA/E,EAAiG,QAAjG,CAAhB;AACA,UAAMC,OAAO,GAAG;AACdnB,MAAAA,SAAS,EAAE,KADG;AAEdC,MAAAA,MAAM,EAAE,KAFM;AAGdN,MAAAA,WAAW,EAAE,KAHC;AAIdI,MAAAA,cAAc,EAAE;AAJF,KAAhB;AAOA/C,IAAAA,OAAO,CAACoE,YAAR,CAAqB,IAArB,EAA2BH,GAA3B,EAAgCC,OAAhC,EAAyCC,OAAzC;AACD;AAED;;;;;;;;;;;;;;;;AAcA,QAAM1B,GAAN,CAAU4B,SAAV,EAAqB7D,OAAO,GAAG,EAA/B,EAAmC;AACjC,UAAM8D,KAAK,GAAG,EAAd;AAEA,QAAIC,KAAK,GAAG,KAAKhE,MAAjB;AACA,QAAIiE,QAAJ;AACA,QAAIC,MAAJ;;AAEA,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcN,SAAd,CAAL,EAA+B;AAC7BG,MAAAA,QAAQ,GAAGH,SAAX;AACAA,MAAAA,SAAS,GAAGO,SAAZ;AACD;;AAEDpE,IAAAA,OAAO,GAAG,EAAE,GAAGA;AAAL,KAAV;;AAEA,QAAI,KAAKqE,KAAT,EAAgB;AACdC,MAAAA,MAAM,CAACC,MAAP,CAAcT,KAAd,EAAqB,KAAKO,KAA1B;AACD;;AAED,QAAIR,SAAJ,EAAe;AACbI,MAAAA,MAAM,GAAGJ,SAAS,CAACW,GAAV,CAAcC,SAAS,IAAIA,SAAS,CAACxC,GAAV,CAAc,KAAKP,SAAnB,EAA8B;AAAEgD,QAAAA,GAAG,EAAE;AAAP,OAA9B,CAA3B,CAAT;;AAEA,UAAI1E,OAAO,CAAC2E,KAAR,IAAiBd,SAAS,CAACe,MAAV,GAAmB,CAAxC,EAA2C;AACzC5E,QAAAA,OAAO,CAAC6E,YAAR,GAAuB;AACrBF,UAAAA,KAAK,EAAE3E,OAAO,CAAC2E,KADM;AAErBG,UAAAA,EAAE,EAAE,IAFiB;AAEX;AACVb,UAAAA;AAHqB,SAAvB;AAMA,eAAOjE,OAAO,CAAC2E,KAAf;AACD,OARD,MAQO;AACLb,QAAAA,KAAK,CAAC,KAAK7C,UAAN,CAAL,GAAyB;AACvB,WAACtB,EAAE,CAACoF,EAAJ,GAASd;AADc,SAAzB;AAGA,eAAOjE,OAAO,CAAC6E,YAAf;AACD;AACF,KAjBD,MAiBO;AACLf,MAAAA,KAAK,CAAC,KAAK7C,UAAN,CAAL,GAAyB+C,QAAQ,CAAC/B,GAAT,CAAa,KAAKP,SAAlB,EAA6B;AAAEgD,QAAAA,GAAG,EAAE;AAAP,OAA7B,CAAzB;AACD;;AAED1E,IAAAA,OAAO,CAAC8D,KAAR,GAAgB9D,OAAO,CAAC8D,KAAR,GACd;AAAE,OAACnE,EAAE,CAACqF,GAAJ,GAAU,CAAClB,KAAD,EAAQ9D,OAAO,CAAC8D,KAAhB;AAAZ,KADc,GAEdA,KAFF;;AAIA,QAAIQ,MAAM,CAACW,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCnF,OAArC,EAA8C,OAA9C,CAAJ,EAA4D;AAC1D,UAAI,CAACA,OAAO,CAACqE,KAAb,EAAoB;AAClBN,QAAAA,KAAK,GAAGA,KAAK,CAACqB,QAAN,EAAR;AACD,OAFD,MAEO;AACLrB,QAAAA,KAAK,GAAGA,KAAK,CAACM,KAAN,CAAYrE,OAAO,CAACqE,KAApB,CAAR;AACD;AACF;;AAED,QAAIC,MAAM,CAACW,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCnF,OAArC,EAA8C,QAA9C,CAAJ,EAA6D;AAC3D+D,MAAAA,KAAK,GAAGA,KAAK,CAACsB,MAAN,CAAarF,OAAO,CAACqF,MAArB,EAA6BrF,OAAO,CAACsF,eAArC,CAAR;AACD;;AAED,UAAMC,OAAO,GAAG,MAAMxB,KAAK,CAACyB,OAAN,CAAcxF,OAAd,CAAtB;AACA,QAAIgE,QAAJ,EAAc,OAAOuB,OAAP;AAEd,UAAME,MAAM,GAAG,EAAf;;AACA,SAAK,MAAMhB,SAAX,IAAwBZ,SAAxB,EAAmC;AACjC4B,MAAAA,MAAM,CAAChB,SAAS,CAACxC,GAAV,CAAc,KAAKP,SAAnB,EAA8B;AAAEgD,QAAAA,GAAG,EAAE;AAAP,OAA9B,CAAD,CAAN,GAAuD,EAAvD;AACD;;AAED,SAAK,MAAMD,SAAX,IAAwBc,OAAxB,EAAiC;AAC/BE,MAAAA,MAAM,CAAChB,SAAS,CAACxC,GAAV,CAAc,KAAKhB,UAAnB,EAA+B;AAAEyD,QAAAA,GAAG,EAAE;AAAP,OAA/B,CAAD,CAAN,CAAsDgB,IAAtD,CAA2DjB,SAA3D;AACD;;AAED,WAAOgB,MAAP;AACD;AAED;;;;;;;;;;;;AAUA,QAAM/C,KAAN,CAAYsB,QAAZ,EAAsBhE,OAAtB,EAA+B;AAC7BA,IAAAA,OAAO,GAAGV,KAAK,CAACqG,SAAN,CAAgB3F,OAAhB,CAAV;AAEAA,IAAAA,OAAO,CAAC4F,UAAR,GAAqB,CACnB,CACE,KAAKzF,SAAL,CAAe0F,EAAf,CACE,OADF,EAEE,KAAK1F,SAAL,CAAe2F,GAAf,CAAoB,GAAE,KAAK/F,MAAL,CAAYa,IAAK,IAAG,KAAKb,MAAL,CAAY8B,eAAgB,EAAtE,CAFF,CADF,EAKE,OALF,CADmB,CAArB;AASA7B,IAAAA,OAAO,CAAC0E,GAAR,GAAc,IAAd;AACA1E,IAAAA,OAAO,CAAC+F,KAAR,GAAgB,IAAhB;AAEA,UAAMN,MAAM,GAAG,MAAM,KAAKxD,GAAL,CAAS+B,QAAT,EAAmBhE,OAAnB,CAArB;AAEA,WAAOgG,QAAQ,CAACP,MAAM,CAAC/C,KAAR,EAAe,EAAf,CAAf;AACD;AAED;;;;;;;;;;;AASA,QAAMuD,GAAN,CAAUC,cAAV,EAA0BC,eAA1B,EAA2CnG,OAA3C,EAAoD;AAClD,UAAM8D,KAAK,GAAG,EAAd;;AAEA,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcgC,eAAd,CAAL,EAAqC;AACnCA,MAAAA,eAAe,GAAG,CAACA,eAAD,CAAlB;AACD;;AAEDnG,IAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAERqE,MAAAA,KAAK,EAAE,KAFC;AAGRuB,MAAAA,UAAU,EAAE,CAAC,KAAK7F,MAAL,CAAYqB,mBAAb,CAHJ;AAIRsD,MAAAA,GAAG,EAAE;AAJG,KAAV;AAOAZ,IAAAA,KAAK,CAACnE,EAAE,CAACyG,EAAJ,CAAL,GAAeD,eAAe,CAAC3B,GAAhB,CAAoBR,QAAQ,IAAI;AAC7C,UAAIA,QAAQ,YAAY,KAAKjE,MAA7B,EAAqC;AACnC,eAAOiE,QAAQ,CAACF,KAAT,EAAP;AACD;;AACD,aAAO;AACL,SAAC,KAAK/D,MAAL,CAAYqB,mBAAb,GAAmC4C;AAD9B,OAAP;AAGD,KAPc,CAAf;AASAhE,IAAAA,OAAO,CAAC8D,KAAR,GAAgB;AACd,OAACnE,EAAE,CAACqF,GAAJ,GAAU,CACRlB,KADQ,EAER9D,OAAO,CAAC8D,KAFA;AADI,KAAhB;AAOA,UAAMuC,iBAAiB,GAAG,MAAM,KAAKpE,GAAL,CAASiE,cAAT,EAAyBlG,OAAzB,CAAhC;AAEA,WAAOqG,iBAAiB,CAACzB,MAAlB,KAA6BuB,eAAe,CAACvB,MAApD;AACD;AAED;;;;;;;;;;;;AAUA,QAAM1C,GAAN,CAAUgE,cAAV,EAA0BC,eAA1B,EAA2CnG,OAA3C,EAAoD;AAClD,QAAImG,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,MAAAA,eAAe,GAAG,EAAlB;AACD,KAFD,MAEO;AACLA,MAAAA,eAAe,GAAG,KAAKG,eAAL,CAAqBH,eAArB,CAAlB;AACD;;AAED,UAAMI,eAAe,GAAG,MAAM,KAAKtE,GAAL,CAASiE,cAAT,EAAyB,EAAE,GAAGlG,OAAL;AAAcqE,MAAAA,KAAK,EAAE,KAArB;AAA4BK,MAAAA,GAAG,EAAE;AAAjC,KAAzB,CAA9B;AACA,UAAM8B,QAAQ,GAAG,EAAjB;AACA,UAAMC,oBAAoB,GAAGF,eAAe,CAACG,MAAhB,CAAuBC,GAAG,IACrD,CAACR,eAAe,CAACS,IAAhB,CAAqBnD,GAAG,IACvBA,GAAG,CAAC,KAAK1D,MAAL,CAAYqB,mBAAb,CAAH,KAAyCuF,GAAG,CAAC,KAAK5G,MAAL,CAAYqB,mBAAb,CAD7C,CAD0B,CAA7B;AAKA,UAAMyF,mBAAmB,GAAGV,eAAe,CAACO,MAAhB,CAAuBjD,GAAG,IACpD,CAAC8C,eAAe,CAACK,IAAhB,CAAqBD,GAAG,IACvBlD,GAAG,CAAC,KAAK1D,MAAL,CAAYqB,mBAAb,CAAH,KAAyCuF,GAAG,CAAC,KAAK5G,MAAL,CAAYqB,mBAAb,CAD7C,CADyB,CAA5B;AAKA,QAAI0F,WAAJ;AACA,QAAIC,MAAJ;;AAEA,QAAIN,oBAAoB,CAAC7B,MAArB,GAA8B,CAAlC,EAAqC;AACnCmC,MAAAA,MAAM,GAAG,EAAT;AACAA,MAAAA,MAAM,CAAC,KAAK9F,UAAN,CAAN,GAA0B,IAA1B;AAEA6F,MAAAA,WAAW,GAAG;AACZ,SAAC,KAAK/G,MAAL,CAAYqB,mBAAb,GAAmCqF,oBAAoB,CAACjC,GAArB,CAAyBwC,gBAAgB,IAC1EA,gBAAgB,CAAC,KAAKjH,MAAL,CAAYqB,mBAAb,CADiB;AADvB,OAAd;AAOAoF,MAAAA,QAAQ,CAACd,IAAT,CAAc,KAAK3F,MAAL,CAAYqF,QAAZ,GAAuB2B,MAAvB,CACZA,MADY,EAEZ,EACE,GAAG/G,OADL;AAEE8D,QAAAA,KAAK,EAAEgD;AAFT,OAFY,CAAd;AAOD;;AAED,QAAID,mBAAmB,CAACjC,MAApB,GAA6B,CAAjC,EAAoC;AAClCkC,MAAAA,WAAW,GAAG,EAAd;AAEAC,MAAAA,MAAM,GAAG,EAAT;AACAA,MAAAA,MAAM,CAAC,KAAK9F,UAAN,CAAN,GAA0BiF,cAAc,CAACjE,GAAf,CAAmB,KAAKP,SAAxB,CAA1B;AAEA4C,MAAAA,MAAM,CAACC,MAAP,CAAcwC,MAAd,EAAsB,KAAK1C,KAA3B;AACAyC,MAAAA,WAAW,CAAC,KAAK/G,MAAL,CAAYqB,mBAAb,CAAX,GAA+CyF,mBAAmB,CAACrC,GAApB,CAAwByC,kBAAkB,IACvFA,kBAAkB,CAAC,KAAKlH,MAAL,CAAYqB,mBAAb,CAD2B,CAA/C;AAIAoF,MAAAA,QAAQ,CAACd,IAAT,CAAc,KAAK3F,MAAL,CAAYqF,QAAZ,GAAuB2B,MAAvB,CACZA,MADY,EAEZ,EACE,GAAG/G,OADL;AAEE8D,QAAAA,KAAK,EAAEgD;AAFT,OAFY,CAAd;AAOD;;AAED,UAAMI,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAAN;AAEA,WAAON,cAAP;AACD;AAED;;;;;;;;;;;;AAUA,QAAM9D,GAAN,CAAU8D,cAAV,EAA0BC,eAA1B,EAA2CnG,OAAO,GAAG,EAArD,EAAyD;AACvD,QAAI,CAACmG,eAAL,EAAsB,OAAOe,OAAO,CAACE,OAAR,EAAP;AAGtBjB,IAAAA,eAAe,GAAG,KAAKG,eAAL,CAAqBH,eAArB,CAAlB;AAEA,UAAMY,MAAM,GAAG;AACb,OAAC,KAAK9F,UAAN,GAAmBiF,cAAc,CAACjE,GAAf,CAAmB,KAAKP,SAAxB,CADN;AAEb,SAAG,KAAK2C;AAFK,KAAf;AAKA,UAAMP,KAAK,GAAG;AACZ,OAAC,KAAK/D,MAAL,CAAYqB,mBAAb,GAAmC+E,eAAe,CAAC3B,GAAhB,CAAoByC,kBAAkB,IACvEA,kBAAkB,CAAChF,GAAnB,CAAuB,KAAKlC,MAAL,CAAYqB,mBAAnC,CADiC;AADvB,KAAd;AAMA,UAAM,KAAKrB,MAAL,CAAYqF,QAAZ,GAAuB2B,MAAvB,CAA8BA,MAA9B,EAAsC,EAAE,GAAG/G,OAAL;AAAc8D,MAAAA;AAAd,KAAtC,CAAN;AAEA,WAAOoC,cAAP;AACD;AAED;;;;;;;;;;;AASA,QAAM5D,MAAN,CAAa4D,cAAb,EAA6BC,eAA7B,EAA8CnG,OAAO,GAAG,EAAxD,EAA4D;AAC1D,UAAM+G,MAAM,GAAG;AACb,OAAC,KAAK9F,UAAN,GAAmB;AADN,KAAf;AAIAkF,IAAAA,eAAe,GAAG,KAAKG,eAAL,CAAqBH,eAArB,CAAlB;AAEA,UAAMrC,KAAK,GAAG;AACZ,OAAC,KAAK7C,UAAN,GAAmBiF,cAAc,CAACjE,GAAf,CAAmB,KAAKP,SAAxB,CADP;AAEZ,OAAC,KAAK3B,MAAL,CAAYqB,mBAAb,GAAmC+E,eAAe,CAAC3B,GAAhB,CAAoB6C,cAAc,IACnEA,cAAc,CAACpF,GAAf,CAAmB,KAAKlC,MAAL,CAAYqB,mBAA/B,CADiC;AAFvB,KAAd;AAOA,UAAM,KAAKrB,MAAL,CAAYqF,QAAZ,GAAuB2B,MAAvB,CAA8BA,MAA9B,EAAsC,EAAE,GAAG/G,OAAL;AAAc8D,MAAAA;AAAd,KAAtC,CAAN;AAEA,WAAO,IAAP;AACD;AAED;;;;;;;;;;;AASA,QAAMzB,MAAN,CAAa6D,cAAb,EAA6BjC,MAA7B,EAAqCjE,OAAO,GAAG,EAA/C,EAAmD;AACjD,QAAIkE,KAAK,CAACC,OAAN,CAAcnE,OAAd,CAAJ,EAA4B;AAC1BA,MAAAA,OAAO,GAAG;AACRsH,QAAAA,MAAM,EAAEtH;AADA,OAAV;AAGD;;AAED,QAAIiE,MAAM,KAAKG,SAAf,EAA0B;AACxBH,MAAAA,MAAM,GAAG,EAAT;AACD;;AAED,QAAI,KAAKI,KAAT,EAAgB;AACd,WAAK,MAAMkD,SAAX,IAAwBjD,MAAM,CAACkD,IAAP,CAAY,KAAKnD,KAAjB,CAAxB,EAAiD;AAC/CJ,QAAAA,MAAM,CAACsD,SAAD,CAAN,GAAoB,KAAKlD,KAAL,CAAWkD,SAAX,CAApB;AACA,YAAIvH,OAAO,CAACsH,MAAZ,EAAoBtH,OAAO,CAACsH,MAAR,CAAe5B,IAAf,CAAoB6B,SAApB;AACrB;AACF;;AAEDtD,IAAAA,MAAM,CAAC,KAAKhD,UAAN,CAAN,GAA0BiF,cAAc,CAACjE,GAAf,CAAmB,KAAKP,SAAxB,CAA1B;AACA,QAAI1B,OAAO,CAACsH,MAAZ,EAAoBtH,OAAO,CAACsH,MAAR,CAAe5B,IAAf,CAAoB,KAAKzE,UAAzB;AACpB,WAAO,MAAM,KAAKlB,MAAL,CAAYsC,MAAZ,CAAmB4B,MAAnB,EAA2BjE,OAA3B,CAAb;AACD;;AAEDyH,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC5B,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAO,KAAKjH,EAAL,KAAYiH,KAAnB;AACD;;AAED,QAAIA,KAAK,IAAIA,KAAK,CAAC7G,MAAnB,EAA2B;AACzB,aAAO,KAAKJ,EAAL,KAAYiH,KAAK,CAAC7G,MAAzB;AACD;;AAED,WAAO,CAAC,KAAKH,SAAb;AACD;;AA/d+B;;AAkelCiH,MAAM,CAACC,OAAP,GAAiBhI,OAAjB;AACA+H,MAAM,CAACC,OAAP,CAAehI,OAAf,GAAyBA,OAAzB;AACA+H,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBjI,OAAzB","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n\n    /*\n    * If self association, this is the target association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    /*\n     * Foreign key setup\n     */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    /*\n     * Source key setup\n     */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n\n    // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n    const constraintOptions = { ...this.options };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instances, options = {}) {\n    const where = {};\n\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = { ...options };\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(_instance => _instance.get(this.sourceKey, { raw: true }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this, // association\n          values\n        };\n\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, { raw: true });\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    const results = await Model.findAll(options);\n    if (instance) return results;\n\n    const result = {};\n    for (const _instance of instances) {\n      result[_instance.get(this.sourceKey, { raw: true })] = [];\n    }\n\n    for (const _instance of results) {\n      result[_instance.get(this.foreignKey, { raw: true })].push(_instance);\n    }\n\n    return result;\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {object}         [options] find & count options\n   * @param {object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    options = Utils.cloneDeep(options);\n\n    options.attributes = [\n      [\n        this.sequelize.fn(\n          'COUNT',\n          this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)\n        ),\n        'count'\n      ]\n    ];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n  async has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = {\n      ...options,\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    };\n\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        where,\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return associatedObjects.length === targetInstances.length;\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {object} [options] Options passed to `target.findAll` and `update`.\n   * @param {object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });\n    const promises = [];\n    const obsoleteAssociations = oldAssociations.filter(old =>\n      !targetInstances.find(obj =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    const unassociatedObjects = targetInstances.filter(obj =>\n      !oldAssociations.find(old =>\n        obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n      )\n    );\n    let updateWhere;\n    let update;\n\n    if (obsoleteAssociations.length > 0) {\n      update = {};\n      update[this.foreignKey] = null;\n\n      updateWhere = {\n        [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject =>\n          associatedObject[this.target.primaryKeyAttribute]\n        )\n      };\n\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    if (unassociatedObjects.length > 0) {\n      updateWhere = {};\n\n      update = {};\n      update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n\n      Object.assign(update, this.scope);\n      updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject =>\n        unassociatedObject[this.target.primaryKeyAttribute]\n      );\n\n      promises.push(this.target.unscoped().update(\n        update,\n        {\n          ...options,\n          where: updateWhere\n        }\n      ));\n    }\n\n    await Promise.all(promises);\n\n    return sourceInstance;\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) return Promise.resolve();\n\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const update = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      ...this.scope\n    };\n\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject =>\n        unassociatedObject.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return sourceInstance;\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n  async remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance =>\n        targetInstance.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    await this.target.unscoped().update(update, { ...options, where });\n\n    return this;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model instance\n   * @param {object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n"]},"metadata":{},"sourceType":"script"}