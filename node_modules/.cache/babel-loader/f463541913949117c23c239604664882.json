{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst debug = logger.debugContext('connection:pg');\n\nconst sequelizeErrors = require('../../errors');\n\nconst semver = require('semver');\n\nconst dataTypes = require('../../data-types');\n\nconst moment = require('moment-timezone');\n\nconst {\n  promisify\n} = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n\n    this._clearTypeParser();\n\n    this.refreshTypeParser(dataTypes.postgres);\n  } // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, {\n        parser\n      });\n    }; // Set range parsers\n\n\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (!entry.rangeOid) continue;\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (!entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n\n      return;\n    } // Create parsers for normal or enum data types\n\n\n    const parser = value => dataType.parse(value);\n\n    const arrayParser = arrayParserBuilder(parser); // Set enum parsers\n\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    } // Set parsers for normal data types\n\n\n    dataType.types.postgres.forEach(name => {\n      if (!this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n      if (!this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n\n    const connectionConfig = _.pick(config, ['user', 'password', 'host', 'database', 'port']);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [// see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n      'application_name', // choose the SSL mode with the PGSSLMODE environment variable\n      // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n      // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n      'ssl', // In addition to the values accepted by the corresponding server,\n      // you can use \"auto\" to determine the right encoding from the\n      // current locale in the client (LC_CTYPE environment variable on Unix systems)\n      'client_encoding', // !! DO NOT SET THIS TO TRUE !!\n      // (unless you know what you're doing)\n      // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n      'binary', // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n      // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n      'keepAlive', // Times out queries after a set time in milliseconds. Added in pg v7.3\n      'statement_timeout', // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n      'idle_in_transaction_session_timeout']));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.dialect.defaultVersion;\n            }\n\n            break;\n\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      }; // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n\n\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== false) {\n      query += `SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`;\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n\n    if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    } // Don't let a Postgres restart (or error) to take down the whole app\n\n\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0'; // Check for supported version\n\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query('WITH ranges AS (' + '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' + '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' + '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' + ')' + 'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' + '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' + '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' + ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));');\n    let result = Array.isArray(results) ? results.pop() : results; // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = {\n      oids: [],\n      arrayOids: []\n    };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      } // Mapping base types and their arrays\n\n\n      newNameOidMap[row.typname] = {\n        oid: row.oid\n      };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray; // Mapping ranges(of base types) and their arrays\n\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    } // Replace all OID mappings. Avoids temporary empty OID mappings.\n\n\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = {\n      oids: [],\n      arrayOids: []\n    };\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/postgres/connection-manager.js"],"names":["_","require","AbstractConnectionManager","logger","debug","debugContext","sequelizeErrors","semver","dataTypes","moment","promisify","ConnectionManager","constructor","dialect","sequelize","config","port","pgLib","_loadDialectModule","lib","native","_clearDynamicOIDs","_clearTypeParser","refreshTypeParser","postgres","_refreshTypeParser","dataType","arrayParserBuilder","parser","value","types","arrayParser","create","parse","rangeParserBuilder","key","toLowerCase","name","nameOidMap","entry","rangeOid","rangeParser","getTypeParser","oid","arrayRangeParser","oidParserMap","set","arrayRangeOid","enumOids","oids","forEach","arrayOids","arrayOid","Map","args","get","connect","user","username","connectionConfig","pick","prototype","bind","dialectOptions","merge","connection","Promise","resolve","reject","responded","Client","parameterHandler","message","parameterName","options","databaseVersion","version","coerce","parameterValue","valid","defaultVersion","endHandler","ConnectionTimedOutError","Error","once","on","err","removeListener","code","ConnectionRefusedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","query","standardConformingStrings","clientMinMessages","keepDefaultTimezone","isZone","tz","zone","timezone","Object","keys","length","_refreshDynamicOIDs","error","_invalid","pool","destroy","disconnect","_ending","callback","end","validate","supportedVersion","gte","results","result","Array","isArray","pop","command","newNameOidMap","newEnumOids","row","rows","typtype","push","typarray","typname","rngtypid","rngtyparray","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst moment = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds. Added in pg v7.3\n          'statement_timeout',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== false) {\n      query += `SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`;\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}