{"ast":null,"code":"'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst AsyncQueue = require('./async-queue').default;\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst sequelizeErrors = require('../../errors');\n\nconst DataTypes = require('../../data-types').mssql;\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n\n        const connectHandler = error => {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n          if (error) return reject(error);\n          debug('connection acquired');\n          resolve(connection);\n        };\n\n        const endHandler = () => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        const errorHandler = error => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n\n        connection.on('error', error => {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              this.pool.destroy(connection);\n          }\n        });\n\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n\n          throw new sequelizeErrors.ConnectionError(error);\n\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return;\n    }\n\n    connection.queue.close();\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connection) {\n    return connection && connection.loggedIn;\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["/home/nawan44/Documents/github/portofolio/CRUD/node_modules/sequelize/lib/dialects/mssql/connection-manager.js"],"names":["AbstractConnectionManager","require","AsyncQueue","default","logger","sequelizeErrors","DataTypes","mssql","parserStore","debug","debugContext","debugTedious","ConnectionManager","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","connectionConfig","server","host","authentication","type","options","userName","username","undefined","password","parseInt","database","trustServerCertificate","dialectOptions","instanceName","Object","assign","Promise","resolve","reject","connection","Connection","state","STATE","INITIALIZED","queue","connectHandler","error","removeListener","endHandler","errorHandler","Error","once","on","code","pool","destroy","log","bind","ConnectionError","message","includes","HostNotReachableError","HostNotFoundError","ConnectionRefusedError","AccessDeniedError","InvalidConnectionError","disconnect","closed","close","validate","loggedIn","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,yBAAyB,GAAGC,OAAO,CAAC,gCAAD,CAAzC;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBE,OAA5C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaH,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,KAA9C;;AACA,MAAMC,WAAW,GAAGP,OAAO,CAAC,gBAAD,CAAP,CAA0B,OAA1B,CAApB;;AACA,MAAMQ,KAAK,GAAGL,MAAM,CAACM,YAAP,CAAoB,kBAApB,CAAd;AACA,MAAMC,YAAY,GAAGP,MAAM,CAACM,YAAP,CAAoB,0BAApB,CAArB;;AAEA,MAAME,iBAAN,SAAgCZ,yBAAhC,CAA0D;AACxDa,EAAAA,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAC9BA,IAAAA,SAAS,CAACC,MAAV,CAAiBC,IAAjB,GAAwBF,SAAS,CAACC,MAAV,CAAiBC,IAAjB,IAAyB,IAAjD;AACA,UAAMH,OAAN,EAAeC,SAAf;AACA,SAAKG,GAAL,GAAW,KAAKC,kBAAL,CAAwB,SAAxB,CAAX;AACA,SAAKC,iBAAL,CAAuBd,SAAvB;AACD;;AAEDe,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AAC3Bd,IAAAA,WAAW,CAACe,OAAZ,CAAoBD,QAApB;AACD;;AAEDE,EAAAA,gBAAgB,GAAG;AACjBhB,IAAAA,WAAW,CAACiB,KAAZ;AACD;;AAED,QAAMC,OAAN,CAAcV,MAAd,EAAsB;AACpB,UAAMW,gBAAgB,GAAG;AACvBC,MAAAA,MAAM,EAAEZ,MAAM,CAACa,IADQ;AAEvBC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAE,SADQ;AAEdC,QAAAA,OAAO,EAAE;AACPC,UAAAA,QAAQ,EAAEjB,MAAM,CAACkB,QAAP,IAAmBC,SADtB;AAEPC,UAAAA,QAAQ,EAAEpB,MAAM,CAACoB,QAAP,IAAmBD;AAFtB;AAFK,OAFO;AASvBH,MAAAA,OAAO,EAAE;AACPf,QAAAA,IAAI,EAAEoB,QAAQ,CAACrB,MAAM,CAACC,IAAR,EAAc,EAAd,CADP;AAEPqB,QAAAA,QAAQ,EAAEtB,MAAM,CAACsB,QAFV;AAGPC,QAAAA,sBAAsB,EAAE;AAHjB;AATc,KAAzB;;AAgBA,QAAIvB,MAAM,CAACwB,cAAX,EAA2B;AACzB;AACA,UACExB,MAAM,CAACwB,cAAP,CAAsBR,OAAtB,IACAhB,MAAM,CAACwB,cAAP,CAAsBR,OAAtB,CAA8BS,YAFhC,EAGE;AACA,eAAOd,gBAAgB,CAACK,OAAjB,CAAyBf,IAAhC;AACD;;AAED,UAAID,MAAM,CAACwB,cAAP,CAAsBV,cAA1B,EAA0C;AACxCY,QAAAA,MAAM,CAACC,MAAP,CAAchB,gBAAgB,CAACG,cAA/B,EAA+Cd,MAAM,CAACwB,cAAP,CAAsBV,cAArE;AACD;;AAEDY,MAAAA,MAAM,CAACC,MAAP,CAAchB,gBAAgB,CAACK,OAA/B,EAAwChB,MAAM,CAACwB,cAAP,CAAsBR,OAA9D;AACD;;AAED,QAAI;AACF,aAAO,MAAM,IAAIY,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5C,cAAMC,UAAU,GAAG,IAAI,KAAK7B,GAAL,CAAS8B,UAAb,CAAwBrB,gBAAxB,CAAnB;;AACA,YAAIoB,UAAU,CAACE,KAAX,KAAqBF,UAAU,CAACG,KAAX,CAAiBC,WAA1C,EAAuD;AACrDJ,UAAAA,UAAU,CAACrB,OAAX;AACD;;AACDqB,QAAAA,UAAU,CAACK,KAAX,GAAmB,IAAIlD,UAAJ,EAAnB;AACA6C,QAAAA,UAAU,CAAC7B,GAAX,GAAiB,KAAKA,GAAtB;;AAEA,cAAMmC,cAAc,GAAGC,KAAK,IAAI;AAC9BP,UAAAA,UAAU,CAACQ,cAAX,CAA0B,KAA1B,EAAiCC,UAAjC;AACAT,UAAAA,UAAU,CAACQ,cAAX,CAA0B,OAA1B,EAAmCE,YAAnC;AAEA,cAAIH,KAAJ,EAAW,OAAOR,MAAM,CAACQ,KAAD,CAAb;AAEX7C,UAAAA,KAAK,CAAC,qBAAD,CAAL;AACAoC,UAAAA,OAAO,CAACE,UAAD,CAAP;AACD,SARD;;AAUA,cAAMS,UAAU,GAAG,MAAM;AACvBT,UAAAA,UAAU,CAACQ,cAAX,CAA0B,SAA1B,EAAqCF,cAArC;AACAN,UAAAA,UAAU,CAACQ,cAAX,CAA0B,OAA1B,EAAmCE,YAAnC;AACAX,UAAAA,MAAM,CAAC,IAAIY,KAAJ,CAAU,wCAAV,CAAD,CAAN;AACD,SAJD;;AAMA,cAAMD,YAAY,GAAGH,KAAK,IAAI;AAC5BP,UAAAA,UAAU,CAACQ,cAAX,CAA0B,SAA1B,EAAqCF,cAArC;AACAN,UAAAA,UAAU,CAACQ,cAAX,CAA0B,KAA1B,EAAiCC,UAAjC;AACAV,UAAAA,MAAM,CAACQ,KAAD,CAAN;AACD,SAJD;;AAMAP,QAAAA,UAAU,CAACY,IAAX,CAAgB,OAAhB,EAAyBF,YAAzB;AACAV,QAAAA,UAAU,CAACY,IAAX,CAAgB,KAAhB,EAAuBH,UAAvB;AACAT,QAAAA,UAAU,CAACY,IAAX,CAAgB,SAAhB,EAA2BN,cAA3B;AAEA;;;;;;;;;AAQAN,QAAAA,UAAU,CAACa,EAAX,CAAc,OAAd,EAAuBN,KAAK,IAAI;AAC9B,kBAAQA,KAAK,CAACO,IAAd;AACE,iBAAK,SAAL;AACA,iBAAK,YAAL;AACE,mBAAKC,IAAL,CAAUC,OAAV,CAAkBhB,UAAlB;AAHJ;AAKD,SAND;;AAQA,YAAI/B,MAAM,CAACwB,cAAP,IAAyBxB,MAAM,CAACwB,cAAP,CAAsB/B,KAAnD,EAA0D;AACxDsC,UAAAA,UAAU,CAACa,EAAX,CAAc,OAAd,EAAuBjD,YAAY,CAACqD,GAAb,CAAiBC,IAAjB,CAAsBtD,YAAtB,CAAvB;AACD;AACF,OArDY,CAAb;AAsDD,KAvDD,CAuDE,OAAO2C,KAAP,EAAc;AACd,UAAI,CAACA,KAAK,CAACO,IAAX,EAAiB;AACf,cAAM,IAAIxD,eAAe,CAAC6D,eAApB,CAAoCZ,KAApC,CAAN;AACD;;AAED,cAAQA,KAAK,CAACO,IAAd;AACE,aAAK,SAAL;AACE,cAAIP,KAAK,CAACa,OAAN,CAAcC,QAAd,CAAuB,sBAAvB,CAAJ,EAAoD;AAClD,kBAAM,IAAI/D,eAAe,CAACgE,qBAApB,CAA0Cf,KAA1C,CAAN;AACD;;AACD,cAAIA,KAAK,CAACa,OAAN,CAAcC,QAAd,CAAuB,qBAAvB,CAAJ,EAAmD;AACjD,kBAAM,IAAI/D,eAAe,CAACgE,qBAApB,CAA0Cf,KAA1C,CAAN;AACD;;AACD,cAAIA,KAAK,CAACa,OAAN,CAAcC,QAAd,CAAuB,uBAAvB,CAAJ,EAAqD;AACnD,kBAAM,IAAI/D,eAAe,CAACgE,qBAApB,CAA0Cf,KAA1C,CAAN;AACD;;AACD,cAAIA,KAAK,CAACa,OAAN,CAAcC,QAAd,CAAuB,uBAAvB,CAAJ,EAAqD;AACnD,kBAAM,IAAI/D,eAAe,CAACiE,iBAApB,CAAsChB,KAAtC,CAAN;AACD;;AACD,cAAIA,KAAK,CAACa,OAAN,CAAcC,QAAd,CAAuB,sBAAvB,CAAJ,EAAoD;AAClD,kBAAM,IAAI/D,eAAe,CAACkE,sBAApB,CAA2CjB,KAA3C,CAAN;AACD;;AACD,gBAAM,IAAIjD,eAAe,CAAC6D,eAApB,CAAoCZ,KAApC,CAAN;;AACF,aAAK,wBAAL;AACA,aAAK,QAAL;AACE,gBAAM,IAAIjD,eAAe,CAACmE,iBAApB,CAAsClB,KAAtC,CAAN;;AACF,aAAK,QAAL;AACE,gBAAM,IAAIjD,eAAe,CAACoE,sBAApB,CAA2CnB,KAA3C,CAAN;;AACF;AACE,gBAAM,IAAIjD,eAAe,CAAC6D,eAApB,CAAoCZ,KAApC,CAAN;AAxBJ;AA0BD;AACF;;AAED,QAAMoB,UAAN,CAAiB3B,UAAjB,EAA6B;AAC3B;AACA,QAAIA,UAAU,CAAC4B,MAAf,EAAuB;AACrB;AACD;;AAED5B,IAAAA,UAAU,CAACK,KAAX,CAAiBwB,KAAjB;AAEA,WAAO,IAAIhC,OAAJ,CAAYC,OAAO,IAAI;AAC5BE,MAAAA,UAAU,CAACa,EAAX,CAAc,KAAd,EAAqBf,OAArB;AACAE,MAAAA,UAAU,CAAC6B,KAAX;AACAnE,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACD,KAJM,CAAP;AAKD;;AAEDoE,EAAAA,QAAQ,CAAC9B,UAAD,EAAa;AACnB,WAAOA,UAAU,IAAIA,UAAU,CAAC+B,QAAhC;AACD;;AA3JuD;;AA8J1DC,MAAM,CAACC,OAAP,GAAiBpE,iBAAjB;AACAmE,MAAM,CAACC,OAAP,CAAepE,iBAAf,GAAmCA,iBAAnC;AACAmE,MAAM,CAACC,OAAP,CAAe7E,OAAf,GAAyBS,iBAAzB","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst AsyncQueue = require('./async-queue').default;\nconst { logger } = require('../../utils/logger');\nconst sequelizeErrors = require('../../errors');\nconst DataTypes = require('../../data-types').mssql;\nconst parserStore = require('../parserStore')('mssql');\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (\n        config.dialectOptions.options &&\n        config.dialectOptions.options.instanceName\n      ) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n\n        const connectHandler = error => {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n\n          if (error) return reject(error);\n\n          debug('connection acquired');\n          resolve(connection);\n        };\n\n        const endHandler = () => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        const errorHandler = error => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n        connection.on('error', error => {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              this.pool.destroy(connection);\n          }\n        });\n\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return;\n    }\n\n    connection.queue.close();\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connection) {\n    return connection && connection.loggedIn;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}